import java.util.function.Consumer
import java.util.function.Function
import java.util.function.Predicate

class GenerateStaticThrift {
    static isModuleDirectory(File f) {
        return f.isDirectory() && (
                f.getName().startsWith('providence-') || f.getName().startsWith('it-'))
    }

    static Predicate<File> not(Predicate<File> p) {
        return new Predicate<File>() {
            boolean test(File o) {
                return !p.test(o)
            }
        }
    }

    static hasThriftDirectory(File f) {
        return new File(f, 'thrift').directory
    }

    static Function<File, File> withSubdir(String s) {
        return new Function<File, File>() {
            @Override
            File apply(File file) {
                return new File(file, s)
            }
        }
    }

    static Consumer<File> addIf(List<File> list, Predicate<File> test) {
        return new Consumer<File>() {
            @Override
            void accept(File t) {
                if (test.test(t)) {
                    list.add(t)
                }
            }
        }
    }

    static getThriftDirs() {
        def candidates = new ArrayList()
        def result = new ArrayList()

        Collections.addAll(candidates, new File('.').listFiles())
        candidates.removeIf(not(GenerateStaticThrift.&isModuleDirectory))

        candidates.stream()
                .map(withSubdir('src/main'))
                .forEach(addIf(result, GenerateStaticThrift.&hasThriftDirectory))
        candidates.stream()
                .map(withSubdir('src/test'))
                .forEach(addIf(result, GenerateStaticThrift.&hasThriftDirectory))

        Collections.sort(result)
        return result
    }

    static generate(project, File dir) {
        def srcDir = new File(dir, 'thrift')
        def outDir = new File(dir, 'java-gen')

        project.exec {
            executable 'mkdir'
            args '-p', outDir.toString()
        }
        project.exec {
            executable 'rm'
            args '-rf', outDir.toString() + '/*'
        }

        for (File srcFile : project.fileTree(srcDir.toString()) {
            include '**/*.thrift'
        }.files) {
            project.exec {
                executable 'thrift'
                args '--out', outDir.toString(), '--gen', 'java:generated_annotations=suppress,private-members,fullcamel', srcFile.toString()
            }
        }
    }
}

/**
 * Thrift files are pre-generated and checked in. This is to make sure we are
 * not adding an unversioned dependency on the actual thrift compiler. Which
 * in turn has to be installed locally.
 *
 * Since the thrift version decides what content is generated (and which thrift
 * library it depends on), this can in part result in a sudden breakage when
 * the apache thrift guys suddenly decides to release thrift-1.0 (has been
 * pending for too long).
 */
task generateStaticThrift() {
    doLast {
        for (File f : GenerateStaticThrift.getThriftDirs()) {
            GenerateStaticThrift.generate(project, f)
        }
    }
}
