/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.morimekta.test.thrift.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class OptionalFields implements org.apache.thrift.TBase<OptionalFields, OptionalFields._Fields>, java.io.Serializable, Cloneable, Comparable<OptionalFields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptionalFields");

  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanValue", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteValue", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("shortValue", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField INTEGER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("integerValue", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("longValue", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryValue", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ENUM_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("enumValue", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField COMPACT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("compactValue", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OptionalFieldsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OptionalFieldsTupleSchemeFactory();

  private boolean booleanValue; // optional
  private byte byteValue; // optional
  private short shortValue; // optional
  private int integerValue; // optional
  private long longValue; // optional
  private double doubleValue; // optional
  private java.lang.String stringValue; // optional
  private java.nio.ByteBuffer binaryValue; // optional
  private Value enumValue; // optional
  private CompactFields compactValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOLEAN_VALUE((short)1, "booleanValue"),
    BYTE_VALUE((short)2, "byteValue"),
    SHORT_VALUE((short)3, "shortValue"),
    INTEGER_VALUE((short)4, "integerValue"),
    LONG_VALUE((short)5, "longValue"),
    DOUBLE_VALUE((short)6, "doubleValue"),
    STRING_VALUE((short)7, "stringValue"),
    BINARY_VALUE((short)8, "binaryValue"),
    /**
     * 
     * @see Value
     */
    ENUM_VALUE((short)9, "enumValue"),
    COMPACT_VALUE((short)10, "compactValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOLEAN_VALUE
          return BOOLEAN_VALUE;
        case 2: // BYTE_VALUE
          return BYTE_VALUE;
        case 3: // SHORT_VALUE
          return SHORT_VALUE;
        case 4: // INTEGER_VALUE
          return INTEGER_VALUE;
        case 5: // LONG_VALUE
          return LONG_VALUE;
        case 6: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 7: // STRING_VALUE
          return STRING_VALUE;
        case 8: // BINARY_VALUE
          return BINARY_VALUE;
        case 9: // ENUM_VALUE
          return ENUM_VALUE;
        case 10: // COMPACT_VALUE
          return COMPACT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLEANVALUE_ISSET_ID = 0;
  private static final int __BYTEVALUE_ISSET_ID = 1;
  private static final int __SHORTVALUE_ISSET_ID = 2;
  private static final int __INTEGERVALUE_ISSET_ID = 3;
  private static final int __LONGVALUE_ISSET_ID = 4;
  private static final int __DOUBLEVALUE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BOOLEAN_VALUE,_Fields.BYTE_VALUE,_Fields.SHORT_VALUE,_Fields.INTEGER_VALUE,_Fields.LONG_VALUE,_Fields.DOUBLE_VALUE,_Fields.STRING_VALUE,_Fields.BINARY_VALUE,_Fields.ENUM_VALUE,_Fields.COMPACT_VALUE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOLEAN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("booleanValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("byteValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SHORT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("shortValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INTEGER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("integerValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("longValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("binaryValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENUM_VALUE, new org.apache.thrift.meta_data.FieldMetaData("enumValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Value.class)));
    tmpMap.put(_Fields.COMPACT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("compactValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompactFields.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptionalFields.class, metaDataMap);
  }

  public OptionalFields() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptionalFields(OptionalFields other) {
    __isset_bitfield = other.__isset_bitfield;
    this.booleanValue = other.booleanValue;
    this.byteValue = other.byteValue;
    this.shortValue = other.shortValue;
    this.integerValue = other.integerValue;
    this.longValue = other.longValue;
    this.doubleValue = other.doubleValue;
    if (other.isSetStringValue()) {
      this.stringValue = other.stringValue;
    }
    if (other.isSetBinaryValue()) {
      this.binaryValue = org.apache.thrift.TBaseHelper.copyBinary(other.binaryValue);
    }
    if (other.isSetEnumValue()) {
      this.enumValue = other.enumValue;
    }
    if (other.isSetCompactValue()) {
      this.compactValue = new CompactFields(other.compactValue);
    }
  }

  public OptionalFields deepCopy() {
    return new OptionalFields(this);
  }

  @Override
  public void clear() {
    setBooleanValueIsSet(false);
    this.booleanValue = false;
    setByteValueIsSet(false);
    this.byteValue = 0;
    setShortValueIsSet(false);
    this.shortValue = 0;
    setIntegerValueIsSet(false);
    this.integerValue = 0;
    setLongValueIsSet(false);
    this.longValue = 0;
    setDoubleValueIsSet(false);
    this.doubleValue = 0.0;
    this.stringValue = null;
    this.binaryValue = null;
    this.enumValue = null;
    this.compactValue = null;
  }

  public boolean isBooleanValue() {
    return this.booleanValue;
  }

  public OptionalFields setBooleanValue(boolean booleanValue) {
    this.booleanValue = booleanValue;
    setBooleanValueIsSet(true);
    return this;
  }

  public void unsetBooleanValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID);
  }

  /** Returns true if field booleanValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID);
  }

  public void setBooleanValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID, value);
  }

  public byte getByteValue() {
    return this.byteValue;
  }

  public OptionalFields setByteValue(byte byteValue) {
    this.byteValue = byteValue;
    setByteValueIsSet(true);
    return this;
  }

  public void unsetByteValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTEVALUE_ISSET_ID);
  }

  /** Returns true if field byteValue is set (has been assigned a value) and false otherwise */
  public boolean isSetByteValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTEVALUE_ISSET_ID);
  }

  public void setByteValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTEVALUE_ISSET_ID, value);
  }

  public short getShortValue() {
    return this.shortValue;
  }

  public OptionalFields setShortValue(short shortValue) {
    this.shortValue = shortValue;
    setShortValueIsSet(true);
    return this;
  }

  public void unsetShortValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHORTVALUE_ISSET_ID);
  }

  /** Returns true if field shortValue is set (has been assigned a value) and false otherwise */
  public boolean isSetShortValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHORTVALUE_ISSET_ID);
  }

  public void setShortValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHORTVALUE_ISSET_ID, value);
  }

  public int getIntegerValue() {
    return this.integerValue;
  }

  public OptionalFields setIntegerValue(int integerValue) {
    this.integerValue = integerValue;
    setIntegerValueIsSet(true);
    return this;
  }

  public void unsetIntegerValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEGERVALUE_ISSET_ID);
  }

  /** Returns true if field integerValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEGERVALUE_ISSET_ID);
  }

  public void setIntegerValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEGERVALUE_ISSET_ID, value);
  }

  public long getLongValue() {
    return this.longValue;
  }

  public OptionalFields setLongValue(long longValue) {
    this.longValue = longValue;
    setLongValueIsSet(true);
    return this;
  }

  public void unsetLongValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONGVALUE_ISSET_ID);
  }

  /** Returns true if field longValue is set (has been assigned a value) and false otherwise */
  public boolean isSetLongValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONGVALUE_ISSET_ID);
  }

  public void setLongValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONGVALUE_ISSET_ID, value);
  }

  public double getDoubleValue() {
    return this.doubleValue;
  }

  public OptionalFields setDoubleValue(double doubleValue) {
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID, value);
  }

  public java.lang.String getStringValue() {
    return this.stringValue;
  }

  public OptionalFields setStringValue(java.lang.String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  public void unsetStringValue() {
    this.stringValue = null;
  }

  /** Returns true if field stringValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.stringValue != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.stringValue = null;
    }
  }

  public byte[] getBinaryValue() {
    setBinaryValue(org.apache.thrift.TBaseHelper.rightSize(binaryValue));
    return binaryValue == null ? null : binaryValue.array();
  }

  public java.nio.ByteBuffer bufferForBinaryValue() {
    return org.apache.thrift.TBaseHelper.copyBinary(binaryValue);
  }

  public OptionalFields setBinaryValue(byte[] binaryValue) {
    this.binaryValue = binaryValue == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(binaryValue.clone());
    return this;
  }

  public OptionalFields setBinaryValue(java.nio.ByteBuffer binaryValue) {
    this.binaryValue = org.apache.thrift.TBaseHelper.copyBinary(binaryValue);
    return this;
  }

  public void unsetBinaryValue() {
    this.binaryValue = null;
  }

  /** Returns true if field binaryValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryValue() {
    return this.binaryValue != null;
  }

  public void setBinaryValueIsSet(boolean value) {
    if (!value) {
      this.binaryValue = null;
    }
  }

  /**
   * 
   * @see Value
   */
  public Value getEnumValue() {
    return this.enumValue;
  }

  /**
   * 
   * @see Value
   */
  public OptionalFields setEnumValue(Value enumValue) {
    this.enumValue = enumValue;
    return this;
  }

  public void unsetEnumValue() {
    this.enumValue = null;
  }

  /** Returns true if field enumValue is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumValue() {
    return this.enumValue != null;
  }

  public void setEnumValueIsSet(boolean value) {
    if (!value) {
      this.enumValue = null;
    }
  }

  public CompactFields getCompactValue() {
    return this.compactValue;
  }

  public OptionalFields setCompactValue(CompactFields compactValue) {
    this.compactValue = compactValue;
    return this;
  }

  public void unsetCompactValue() {
    this.compactValue = null;
  }

  /** Returns true if field compactValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactValue() {
    return this.compactValue != null;
  }

  public void setCompactValueIsSet(boolean value) {
    if (!value) {
      this.compactValue = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BOOLEAN_VALUE:
      if (value == null) {
        unsetBooleanValue();
      } else {
        setBooleanValue((java.lang.Boolean)value);
      }
      break;

    case BYTE_VALUE:
      if (value == null) {
        unsetByteValue();
      } else {
        setByteValue((java.lang.Byte)value);
      }
      break;

    case SHORT_VALUE:
      if (value == null) {
        unsetShortValue();
      } else {
        setShortValue((java.lang.Short)value);
      }
      break;

    case INTEGER_VALUE:
      if (value == null) {
        unsetIntegerValue();
      } else {
        setIntegerValue((java.lang.Integer)value);
      }
      break;

    case LONG_VALUE:
      if (value == null) {
        unsetLongValue();
      } else {
        setLongValue((java.lang.Long)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((java.lang.Double)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((java.lang.String)value);
      }
      break;

    case BINARY_VALUE:
      if (value == null) {
        unsetBinaryValue();
      } else {
        if (value instanceof byte[]) {
          setBinaryValue((byte[])value);
        } else {
          setBinaryValue((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ENUM_VALUE:
      if (value == null) {
        unsetEnumValue();
      } else {
        setEnumValue((Value)value);
      }
      break;

    case COMPACT_VALUE:
      if (value == null) {
        unsetCompactValue();
      } else {
        setCompactValue((CompactFields)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOLEAN_VALUE:
      return isBooleanValue();

    case BYTE_VALUE:
      return getByteValue();

    case SHORT_VALUE:
      return getShortValue();

    case INTEGER_VALUE:
      return getIntegerValue();

    case LONG_VALUE:
      return getLongValue();

    case DOUBLE_VALUE:
      return getDoubleValue();

    case STRING_VALUE:
      return getStringValue();

    case BINARY_VALUE:
      return getBinaryValue();

    case ENUM_VALUE:
      return getEnumValue();

    case COMPACT_VALUE:
      return getCompactValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOOLEAN_VALUE:
      return isSetBooleanValue();
    case BYTE_VALUE:
      return isSetByteValue();
    case SHORT_VALUE:
      return isSetShortValue();
    case INTEGER_VALUE:
      return isSetIntegerValue();
    case LONG_VALUE:
      return isSetLongValue();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case STRING_VALUE:
      return isSetStringValue();
    case BINARY_VALUE:
      return isSetBinaryValue();
    case ENUM_VALUE:
      return isSetEnumValue();
    case COMPACT_VALUE:
      return isSetCompactValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OptionalFields)
      return this.equals((OptionalFields)that);
    return false;
  }

  public boolean equals(OptionalFields that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_booleanValue = true && this.isSetBooleanValue();
    boolean that_present_booleanValue = true && that.isSetBooleanValue();
    if (this_present_booleanValue || that_present_booleanValue) {
      if (!(this_present_booleanValue && that_present_booleanValue))
        return false;
      if (this.booleanValue != that.booleanValue)
        return false;
    }

    boolean this_present_byteValue = true && this.isSetByteValue();
    boolean that_present_byteValue = true && that.isSetByteValue();
    if (this_present_byteValue || that_present_byteValue) {
      if (!(this_present_byteValue && that_present_byteValue))
        return false;
      if (this.byteValue != that.byteValue)
        return false;
    }

    boolean this_present_shortValue = true && this.isSetShortValue();
    boolean that_present_shortValue = true && that.isSetShortValue();
    if (this_present_shortValue || that_present_shortValue) {
      if (!(this_present_shortValue && that_present_shortValue))
        return false;
      if (this.shortValue != that.shortValue)
        return false;
    }

    boolean this_present_integerValue = true && this.isSetIntegerValue();
    boolean that_present_integerValue = true && that.isSetIntegerValue();
    if (this_present_integerValue || that_present_integerValue) {
      if (!(this_present_integerValue && that_present_integerValue))
        return false;
      if (this.integerValue != that.integerValue)
        return false;
    }

    boolean this_present_longValue = true && this.isSetLongValue();
    boolean that_present_longValue = true && that.isSetLongValue();
    if (this_present_longValue || that_present_longValue) {
      if (!(this_present_longValue && that_present_longValue))
        return false;
      if (this.longValue != that.longValue)
        return false;
    }

    boolean this_present_doubleValue = true && this.isSetDoubleValue();
    boolean that_present_doubleValue = true && that.isSetDoubleValue();
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (this.doubleValue != that.doubleValue)
        return false;
    }

    boolean this_present_stringValue = true && this.isSetStringValue();
    boolean that_present_stringValue = true && that.isSetStringValue();
    if (this_present_stringValue || that_present_stringValue) {
      if (!(this_present_stringValue && that_present_stringValue))
        return false;
      if (!this.stringValue.equals(that.stringValue))
        return false;
    }

    boolean this_present_binaryValue = true && this.isSetBinaryValue();
    boolean that_present_binaryValue = true && that.isSetBinaryValue();
    if (this_present_binaryValue || that_present_binaryValue) {
      if (!(this_present_binaryValue && that_present_binaryValue))
        return false;
      if (!this.binaryValue.equals(that.binaryValue))
        return false;
    }

    boolean this_present_enumValue = true && this.isSetEnumValue();
    boolean that_present_enumValue = true && that.isSetEnumValue();
    if (this_present_enumValue || that_present_enumValue) {
      if (!(this_present_enumValue && that_present_enumValue))
        return false;
      if (!this.enumValue.equals(that.enumValue))
        return false;
    }

    boolean this_present_compactValue = true && this.isSetCompactValue();
    boolean that_present_compactValue = true && that.isSetCompactValue();
    if (this_present_compactValue || that_present_compactValue) {
      if (!(this_present_compactValue && that_present_compactValue))
        return false;
      if (!this.compactValue.equals(that.compactValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBooleanValue()) ? 131071 : 524287);
    if (isSetBooleanValue())
      hashCode = hashCode * 8191 + ((booleanValue) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetByteValue()) ? 131071 : 524287);
    if (isSetByteValue())
      hashCode = hashCode * 8191 + (int) (byteValue);

    hashCode = hashCode * 8191 + ((isSetShortValue()) ? 131071 : 524287);
    if (isSetShortValue())
      hashCode = hashCode * 8191 + shortValue;

    hashCode = hashCode * 8191 + ((isSetIntegerValue()) ? 131071 : 524287);
    if (isSetIntegerValue())
      hashCode = hashCode * 8191 + integerValue;

    hashCode = hashCode * 8191 + ((isSetLongValue()) ? 131071 : 524287);
    if (isSetLongValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(longValue);

    hashCode = hashCode * 8191 + ((isSetDoubleValue()) ? 131071 : 524287);
    if (isSetDoubleValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(doubleValue);

    hashCode = hashCode * 8191 + ((isSetStringValue()) ? 131071 : 524287);
    if (isSetStringValue())
      hashCode = hashCode * 8191 + stringValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinaryValue()) ? 131071 : 524287);
    if (isSetBinaryValue())
      hashCode = hashCode * 8191 + binaryValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnumValue()) ? 131071 : 524287);
    if (isSetEnumValue())
      hashCode = hashCode * 8191 + enumValue.getValue();

    hashCode = hashCode * 8191 + ((isSetCompactValue()) ? 131071 : 524287);
    if (isSetCompactValue())
      hashCode = hashCode * 8191 + compactValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OptionalFields other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBooleanValue()).compareTo(other.isSetBooleanValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanValue, other.booleanValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetByteValue()).compareTo(other.isSetByteValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteValue, other.byteValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortValue()).compareTo(other.isSetShortValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortValue, other.shortValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegerValue()).compareTo(other.isSetIntegerValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerValue, other.integerValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongValue()).compareTo(other.isSetLongValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longValue, other.longValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoubleValue()).compareTo(other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, other.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValue, other.stringValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinaryValue()).compareTo(other.isSetBinaryValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryValue, other.binaryValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnumValue()).compareTo(other.isSetEnumValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumValue, other.enumValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompactValue()).compareTo(other.isSetCompactValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compactValue, other.compactValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OptionalFields(");
    boolean first = true;

    if (isSetBooleanValue()) {
      sb.append("booleanValue:");
      sb.append(this.booleanValue);
      first = false;
    }
    if (isSetByteValue()) {
      if (!first) sb.append(", ");
      sb.append("byteValue:");
      sb.append(this.byteValue);
      first = false;
    }
    if (isSetShortValue()) {
      if (!first) sb.append(", ");
      sb.append("shortValue:");
      sb.append(this.shortValue);
      first = false;
    }
    if (isSetIntegerValue()) {
      if (!first) sb.append(", ");
      sb.append("integerValue:");
      sb.append(this.integerValue);
      first = false;
    }
    if (isSetLongValue()) {
      if (!first) sb.append(", ");
      sb.append("longValue:");
      sb.append(this.longValue);
      first = false;
    }
    if (isSetDoubleValue()) {
      if (!first) sb.append(", ");
      sb.append("doubleValue:");
      sb.append(this.doubleValue);
      first = false;
    }
    if (isSetStringValue()) {
      if (!first) sb.append(", ");
      sb.append("stringValue:");
      if (this.stringValue == null) {
        sb.append("null");
      } else {
        sb.append(this.stringValue);
      }
      first = false;
    }
    if (isSetBinaryValue()) {
      if (!first) sb.append(", ");
      sb.append("binaryValue:");
      if (this.binaryValue == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryValue, sb);
      }
      first = false;
    }
    if (isSetEnumValue()) {
      if (!first) sb.append(", ");
      sb.append("enumValue:");
      if (this.enumValue == null) {
        sb.append("null");
      } else {
        sb.append(this.enumValue);
      }
      first = false;
    }
    if (isSetCompactValue()) {
      if (!first) sb.append(", ");
      sb.append("compactValue:");
      if (this.compactValue == null) {
        sb.append("null");
      } else {
        sb.append(this.compactValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (compactValue != null) {
      compactValue.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptionalFieldsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptionalFieldsStandardScheme getScheme() {
      return new OptionalFieldsStandardScheme();
    }
  }

  private static class OptionalFieldsStandardScheme extends org.apache.thrift.scheme.StandardScheme<OptionalFields> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptionalFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOLEAN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.booleanValue = iprot.readBool();
              struct.setBooleanValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteValue = iprot.readByte();
              struct.setByteValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHORT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.shortValue = iprot.readI16();
              struct.setShortValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTEGER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integerValue = iprot.readI32();
              struct.setIntegerValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longValue = iprot.readI64();
              struct.setLongValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleValue = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringValue = iprot.readString();
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BINARY_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryValue = iprot.readBinary();
              struct.setBinaryValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENUM_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enumValue = net.morimekta.test.thrift.thrift.Value.findByValue(iprot.readI32());
              struct.setEnumValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPACT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compactValue = new CompactFields();
              struct.compactValue.read(iprot);
              struct.setCompactValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptionalFields struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBooleanValue()) {
        oprot.writeFieldBegin(BOOLEAN_VALUE_FIELD_DESC);
        oprot.writeBool(struct.booleanValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetByteValue()) {
        oprot.writeFieldBegin(BYTE_VALUE_FIELD_DESC);
        oprot.writeByte(struct.byteValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShortValue()) {
        oprot.writeFieldBegin(SHORT_VALUE_FIELD_DESC);
        oprot.writeI16(struct.shortValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIntegerValue()) {
        oprot.writeFieldBegin(INTEGER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.integerValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongValue()) {
        oprot.writeFieldBegin(LONG_VALUE_FIELD_DESC);
        oprot.writeI64(struct.longValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.doubleValue);
        oprot.writeFieldEnd();
      }
      if (struct.stringValue != null) {
        if (struct.isSetStringValue()) {
          oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
          oprot.writeString(struct.stringValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryValue != null) {
        if (struct.isSetBinaryValue()) {
          oprot.writeFieldBegin(BINARY_VALUE_FIELD_DESC);
          oprot.writeBinary(struct.binaryValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.enumValue != null) {
        if (struct.isSetEnumValue()) {
          oprot.writeFieldBegin(ENUM_VALUE_FIELD_DESC);
          oprot.writeI32(struct.enumValue.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.compactValue != null) {
        if (struct.isSetCompactValue()) {
          oprot.writeFieldBegin(COMPACT_VALUE_FIELD_DESC);
          struct.compactValue.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptionalFieldsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptionalFieldsTupleScheme getScheme() {
      return new OptionalFieldsTupleScheme();
    }
  }

  private static class OptionalFieldsTupleScheme extends org.apache.thrift.scheme.TupleScheme<OptionalFields> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptionalFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBooleanValue()) {
        optionals.set(0);
      }
      if (struct.isSetByteValue()) {
        optionals.set(1);
      }
      if (struct.isSetShortValue()) {
        optionals.set(2);
      }
      if (struct.isSetIntegerValue()) {
        optionals.set(3);
      }
      if (struct.isSetLongValue()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(5);
      }
      if (struct.isSetStringValue()) {
        optionals.set(6);
      }
      if (struct.isSetBinaryValue()) {
        optionals.set(7);
      }
      if (struct.isSetEnumValue()) {
        optionals.set(8);
      }
      if (struct.isSetCompactValue()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBooleanValue()) {
        oprot.writeBool(struct.booleanValue);
      }
      if (struct.isSetByteValue()) {
        oprot.writeByte(struct.byteValue);
      }
      if (struct.isSetShortValue()) {
        oprot.writeI16(struct.shortValue);
      }
      if (struct.isSetIntegerValue()) {
        oprot.writeI32(struct.integerValue);
      }
      if (struct.isSetLongValue()) {
        oprot.writeI64(struct.longValue);
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.doubleValue);
      }
      if (struct.isSetStringValue()) {
        oprot.writeString(struct.stringValue);
      }
      if (struct.isSetBinaryValue()) {
        oprot.writeBinary(struct.binaryValue);
      }
      if (struct.isSetEnumValue()) {
        oprot.writeI32(struct.enumValue.getValue());
      }
      if (struct.isSetCompactValue()) {
        struct.compactValue.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptionalFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.booleanValue = iprot.readBool();
        struct.setBooleanValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byteValue = iprot.readByte();
        struct.setByteValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shortValue = iprot.readI16();
        struct.setShortValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.integerValue = iprot.readI32();
        struct.setIntegerValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longValue = iprot.readI64();
        struct.setLongValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleValue = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stringValue = iprot.readString();
        struct.setStringValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.binaryValue = iprot.readBinary();
        struct.setBinaryValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.enumValue = net.morimekta.test.thrift.thrift.Value.findByValue(iprot.readI32());
        struct.setEnumValueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.compactValue = new CompactFields();
        struct.compactValue.read(iprot);
        struct.setCompactValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

