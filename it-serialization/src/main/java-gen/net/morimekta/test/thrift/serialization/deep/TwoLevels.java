/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.morimekta.test.thrift.serialization.deep;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TwoLevels implements org.apache.thrift.TBase<TwoLevels, TwoLevels._Fields>, java.io.Serializable, Cloneable, Comparable<TwoLevels> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TwoLevels");

  private static final org.apache.thrift.protocol.TField ONE1_FIELD_DESC = new org.apache.thrift.protocol.TField("one1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ONE2_FIELD_DESC = new org.apache.thrift.protocol.TField("one2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TwoLevelsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TwoLevelsTupleSchemeFactory();

  private OneLevel one1; // optional
  private OneLevel one2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ONE1((short)1, "one1"),
    ONE2((short)2, "one2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ONE1
          return ONE1;
        case 2: // ONE2
          return ONE2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ONE1,_Fields.ONE2};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ONE1, new org.apache.thrift.meta_data.FieldMetaData("one1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OneLevel.class)));
    tmpMap.put(_Fields.ONE2, new org.apache.thrift.meta_data.FieldMetaData("one2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OneLevel.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TwoLevels.class, metaDataMap);
  }

  public TwoLevels() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TwoLevels(TwoLevels other) {
    if (other.isSetOne1()) {
      this.one1 = new OneLevel(other.one1);
    }
    if (other.isSetOne2()) {
      this.one2 = new OneLevel(other.one2);
    }
  }

  public TwoLevels deepCopy() {
    return new TwoLevels(this);
  }

  @Override
  public void clear() {
    this.one1 = null;
    this.one2 = null;
  }

  public OneLevel getOne1() {
    return this.one1;
  }

  public TwoLevels setOne1(OneLevel one1) {
    this.one1 = one1;
    return this;
  }

  public void unsetOne1() {
    this.one1 = null;
  }

  /** Returns true if field one1 is set (has been assigned a value) and false otherwise */
  public boolean isSetOne1() {
    return this.one1 != null;
  }

  public void setOne1IsSet(boolean value) {
    if (!value) {
      this.one1 = null;
    }
  }

  public OneLevel getOne2() {
    return this.one2;
  }

  public TwoLevels setOne2(OneLevel one2) {
    this.one2 = one2;
    return this;
  }

  public void unsetOne2() {
    this.one2 = null;
  }

  /** Returns true if field one2 is set (has been assigned a value) and false otherwise */
  public boolean isSetOne2() {
    return this.one2 != null;
  }

  public void setOne2IsSet(boolean value) {
    if (!value) {
      this.one2 = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ONE1:
      if (value == null) {
        unsetOne1();
      } else {
        setOne1((OneLevel)value);
      }
      break;

    case ONE2:
      if (value == null) {
        unsetOne2();
      } else {
        setOne2((OneLevel)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ONE1:
      return getOne1();

    case ONE2:
      return getOne2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ONE1:
      return isSetOne1();
    case ONE2:
      return isSetOne2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TwoLevels)
      return this.equals((TwoLevels)that);
    return false;
  }

  public boolean equals(TwoLevels that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_one1 = true && this.isSetOne1();
    boolean that_present_one1 = true && that.isSetOne1();
    if (this_present_one1 || that_present_one1) {
      if (!(this_present_one1 && that_present_one1))
        return false;
      if (!this.one1.equals(that.one1))
        return false;
    }

    boolean this_present_one2 = true && this.isSetOne2();
    boolean that_present_one2 = true && that.isSetOne2();
    if (this_present_one2 || that_present_one2) {
      if (!(this_present_one2 && that_present_one2))
        return false;
      if (!this.one2.equals(that.one2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOne1()) ? 131071 : 524287);
    if (isSetOne1())
      hashCode = hashCode * 8191 + one1.hashCode();

    hashCode = hashCode * 8191 + ((isSetOne2()) ? 131071 : 524287);
    if (isSetOne2())
      hashCode = hashCode * 8191 + one2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TwoLevels other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOne1()).compareTo(other.isSetOne1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOne1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one1, other.one1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOne2()).compareTo(other.isSetOne2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOne2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one2, other.one2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TwoLevels(");
    boolean first = true;

    if (isSetOne1()) {
      sb.append("one1:");
      if (this.one1 == null) {
        sb.append("null");
      } else {
        sb.append(this.one1);
      }
      first = false;
    }
    if (isSetOne2()) {
      if (!first) sb.append(", ");
      sb.append("one2:");
      if (this.one2 == null) {
        sb.append("null");
      } else {
        sb.append(this.one2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (one1 != null) {
      one1.validate();
    }
    if (one2 != null) {
      one2.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TwoLevelsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TwoLevelsStandardScheme getScheme() {
      return new TwoLevelsStandardScheme();
    }
  }

  private static class TwoLevelsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TwoLevels> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TwoLevels struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ONE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.one1 = new OneLevel();
              struct.one1.read(iprot);
              struct.setOne1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.one2 = new OneLevel();
              struct.one2.read(iprot);
              struct.setOne2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TwoLevels struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.one1 != null) {
        if (struct.isSetOne1()) {
          oprot.writeFieldBegin(ONE1_FIELD_DESC);
          struct.one1.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.one2 != null) {
        if (struct.isSetOne2()) {
          oprot.writeFieldBegin(ONE2_FIELD_DESC);
          struct.one2.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TwoLevelsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TwoLevelsTupleScheme getScheme() {
      return new TwoLevelsTupleScheme();
    }
  }

  private static class TwoLevelsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TwoLevels> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TwoLevels struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOne1()) {
        optionals.set(0);
      }
      if (struct.isSetOne2()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOne1()) {
        struct.one1.write(oprot);
      }
      if (struct.isSetOne2()) {
        struct.one2.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TwoLevels struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.one1 = new OneLevel();
        struct.one1.read(iprot);
        struct.setOne1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.one2 = new OneLevel();
        struct.one2.read(iprot);
        struct.setOne2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

