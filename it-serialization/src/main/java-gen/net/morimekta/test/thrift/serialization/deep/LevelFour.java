/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.morimekta.test.thrift.serialization.deep;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class LevelFour implements org.apache.thrift.TBase<LevelFour, LevelFour._Fields>, java.io.Serializable, Cloneable, Comparable<LevelFour> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LevelFour");

  private static final org.apache.thrift.protocol.TField REQUIRED_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredFields", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEFAULT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultFields", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OPTIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField UNION_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("unionFields", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValues", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField COMPACT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("compactFields", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LevelFourStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LevelFourTupleSchemeFactory();

  private net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields; // optional
  private net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields; // optional
  private net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields; // optional
  private net.morimekta.test.thrift.serialization.common.UnionFields unionFields; // optional
  private net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues; // optional
  private net.morimekta.test.thrift.serialization.common.CompactFields compactFields; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUIRED_FIELDS((short)1, "requiredFields"),
    DEFAULT_FIELDS((short)2, "defaultFields"),
    OPTIONAL_FIELDS((short)3, "optionalFields"),
    UNION_FIELDS((short)4, "unionFields"),
    DEFAULT_VALUES((short)6, "defaultValues"),
    COMPACT_FIELDS((short)7, "compactFields");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUIRED_FIELDS
          return REQUIRED_FIELDS;
        case 2: // DEFAULT_FIELDS
          return DEFAULT_FIELDS;
        case 3: // OPTIONAL_FIELDS
          return OPTIONAL_FIELDS;
        case 4: // UNION_FIELDS
          return UNION_FIELDS;
        case 6: // DEFAULT_VALUES
          return DEFAULT_VALUES;
        case 7: // COMPACT_FIELDS
          return COMPACT_FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REQUIRED_FIELDS,_Fields.DEFAULT_FIELDS,_Fields.OPTIONAL_FIELDS,_Fields.UNION_FIELDS,_Fields.DEFAULT_VALUES,_Fields.COMPACT_FIELDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUIRED_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("requiredFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.RequiredFields.class)));
    tmpMap.put(_Fields.DEFAULT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("defaultFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultFields.class)));
    tmpMap.put(_Fields.OPTIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("optionalFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.OptionalFields.class)));
    tmpMap.put(_Fields.UNION_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("unionFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.UnionFields.class)));
    tmpMap.put(_Fields.DEFAULT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("defaultValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultValues.class)));
    tmpMap.put(_Fields.COMPACT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("compactFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.CompactFields.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LevelFour.class, metaDataMap);
  }

  public LevelFour() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LevelFour(LevelFour other) {
    if (other.isSetRequiredFields()) {
      this.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields(other.requiredFields);
    }
    if (other.isSetDefaultFields()) {
      this.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields(other.defaultFields);
    }
    if (other.isSetOptionalFields()) {
      this.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields(other.optionalFields);
    }
    if (other.isSetUnionFields()) {
      this.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields(other.unionFields);
    }
    if (other.isSetDefaultValues()) {
      this.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues(other.defaultValues);
    }
    if (other.isSetCompactFields()) {
      this.compactFields = new net.morimekta.test.thrift.serialization.common.CompactFields(other.compactFields);
    }
  }

  public LevelFour deepCopy() {
    return new LevelFour(this);
  }

  @Override
  public void clear() {
    this.requiredFields = null;
    this.defaultFields = null;
    this.optionalFields = null;
    this.unionFields = null;
    this.defaultValues = null;
    this.compactFields = null;
  }

  public net.morimekta.test.thrift.serialization.common.RequiredFields getRequiredFields() {
    return this.requiredFields;
  }

  public LevelFour setRequiredFields(net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields) {
    this.requiredFields = requiredFields;
    return this;
  }

  public void unsetRequiredFields() {
    this.requiredFields = null;
  }

  /** Returns true if field requiredFields is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredFields() {
    return this.requiredFields != null;
  }

  public void setRequiredFieldsIsSet(boolean value) {
    if (!value) {
      this.requiredFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.DefaultFields getDefaultFields() {
    return this.defaultFields;
  }

  public LevelFour setDefaultFields(net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields) {
    this.defaultFields = defaultFields;
    return this;
  }

  public void unsetDefaultFields() {
    this.defaultFields = null;
  }

  /** Returns true if field defaultFields is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultFields() {
    return this.defaultFields != null;
  }

  public void setDefaultFieldsIsSet(boolean value) {
    if (!value) {
      this.defaultFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.OptionalFields getOptionalFields() {
    return this.optionalFields;
  }

  public LevelFour setOptionalFields(net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields) {
    this.optionalFields = optionalFields;
    return this;
  }

  public void unsetOptionalFields() {
    this.optionalFields = null;
  }

  /** Returns true if field optionalFields is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalFields() {
    return this.optionalFields != null;
  }

  public void setOptionalFieldsIsSet(boolean value) {
    if (!value) {
      this.optionalFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.UnionFields getUnionFields() {
    return this.unionFields;
  }

  public LevelFour setUnionFields(net.morimekta.test.thrift.serialization.common.UnionFields unionFields) {
    this.unionFields = unionFields;
    return this;
  }

  public void unsetUnionFields() {
    this.unionFields = null;
  }

  /** Returns true if field unionFields is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionFields() {
    return this.unionFields != null;
  }

  public void setUnionFieldsIsSet(boolean value) {
    if (!value) {
      this.unionFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.DefaultValues getDefaultValues() {
    return this.defaultValues;
  }

  public LevelFour setDefaultValues(net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public void unsetDefaultValues() {
    this.defaultValues = null;
  }

  /** Returns true if field defaultValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValues() {
    return this.defaultValues != null;
  }

  public void setDefaultValuesIsSet(boolean value) {
    if (!value) {
      this.defaultValues = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.CompactFields getCompactFields() {
    return this.compactFields;
  }

  public LevelFour setCompactFields(net.morimekta.test.thrift.serialization.common.CompactFields compactFields) {
    this.compactFields = compactFields;
    return this;
  }

  public void unsetCompactFields() {
    this.compactFields = null;
  }

  /** Returns true if field compactFields is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactFields() {
    return this.compactFields != null;
  }

  public void setCompactFieldsIsSet(boolean value) {
    if (!value) {
      this.compactFields = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case REQUIRED_FIELDS:
      if (value == null) {
        unsetRequiredFields();
      } else {
        setRequiredFields((net.morimekta.test.thrift.serialization.common.RequiredFields)value);
      }
      break;

    case DEFAULT_FIELDS:
      if (value == null) {
        unsetDefaultFields();
      } else {
        setDefaultFields((net.morimekta.test.thrift.serialization.common.DefaultFields)value);
      }
      break;

    case OPTIONAL_FIELDS:
      if (value == null) {
        unsetOptionalFields();
      } else {
        setOptionalFields((net.morimekta.test.thrift.serialization.common.OptionalFields)value);
      }
      break;

    case UNION_FIELDS:
      if (value == null) {
        unsetUnionFields();
      } else {
        setUnionFields((net.morimekta.test.thrift.serialization.common.UnionFields)value);
      }
      break;

    case DEFAULT_VALUES:
      if (value == null) {
        unsetDefaultValues();
      } else {
        setDefaultValues((net.morimekta.test.thrift.serialization.common.DefaultValues)value);
      }
      break;

    case COMPACT_FIELDS:
      if (value == null) {
        unsetCompactFields();
      } else {
        setCompactFields((net.morimekta.test.thrift.serialization.common.CompactFields)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUIRED_FIELDS:
      return getRequiredFields();

    case DEFAULT_FIELDS:
      return getDefaultFields();

    case OPTIONAL_FIELDS:
      return getOptionalFields();

    case UNION_FIELDS:
      return getUnionFields();

    case DEFAULT_VALUES:
      return getDefaultValues();

    case COMPACT_FIELDS:
      return getCompactFields();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUIRED_FIELDS:
      return isSetRequiredFields();
    case DEFAULT_FIELDS:
      return isSetDefaultFields();
    case OPTIONAL_FIELDS:
      return isSetOptionalFields();
    case UNION_FIELDS:
      return isSetUnionFields();
    case DEFAULT_VALUES:
      return isSetDefaultValues();
    case COMPACT_FIELDS:
      return isSetCompactFields();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LevelFour)
      return this.equals((LevelFour)that);
    return false;
  }

  public boolean equals(LevelFour that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requiredFields = true && this.isSetRequiredFields();
    boolean that_present_requiredFields = true && that.isSetRequiredFields();
    if (this_present_requiredFields || that_present_requiredFields) {
      if (!(this_present_requiredFields && that_present_requiredFields))
        return false;
      if (!this.requiredFields.equals(that.requiredFields))
        return false;
    }

    boolean this_present_defaultFields = true && this.isSetDefaultFields();
    boolean that_present_defaultFields = true && that.isSetDefaultFields();
    if (this_present_defaultFields || that_present_defaultFields) {
      if (!(this_present_defaultFields && that_present_defaultFields))
        return false;
      if (!this.defaultFields.equals(that.defaultFields))
        return false;
    }

    boolean this_present_optionalFields = true && this.isSetOptionalFields();
    boolean that_present_optionalFields = true && that.isSetOptionalFields();
    if (this_present_optionalFields || that_present_optionalFields) {
      if (!(this_present_optionalFields && that_present_optionalFields))
        return false;
      if (!this.optionalFields.equals(that.optionalFields))
        return false;
    }

    boolean this_present_unionFields = true && this.isSetUnionFields();
    boolean that_present_unionFields = true && that.isSetUnionFields();
    if (this_present_unionFields || that_present_unionFields) {
      if (!(this_present_unionFields && that_present_unionFields))
        return false;
      if (!this.unionFields.equals(that.unionFields))
        return false;
    }

    boolean this_present_defaultValues = true && this.isSetDefaultValues();
    boolean that_present_defaultValues = true && that.isSetDefaultValues();
    if (this_present_defaultValues || that_present_defaultValues) {
      if (!(this_present_defaultValues && that_present_defaultValues))
        return false;
      if (!this.defaultValues.equals(that.defaultValues))
        return false;
    }

    boolean this_present_compactFields = true && this.isSetCompactFields();
    boolean that_present_compactFields = true && that.isSetCompactFields();
    if (this_present_compactFields || that_present_compactFields) {
      if (!(this_present_compactFields && that_present_compactFields))
        return false;
      if (!this.compactFields.equals(that.compactFields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRequiredFields()) ? 131071 : 524287);
    if (isSetRequiredFields())
      hashCode = hashCode * 8191 + requiredFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultFields()) ? 131071 : 524287);
    if (isSetDefaultFields())
      hashCode = hashCode * 8191 + defaultFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionalFields()) ? 131071 : 524287);
    if (isSetOptionalFields())
      hashCode = hashCode * 8191 + optionalFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnionFields()) ? 131071 : 524287);
    if (isSetUnionFields())
      hashCode = hashCode * 8191 + unionFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultValues()) ? 131071 : 524287);
    if (isSetDefaultValues())
      hashCode = hashCode * 8191 + defaultValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompactFields()) ? 131071 : 524287);
    if (isSetCompactFields())
      hashCode = hashCode * 8191 + compactFields.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LevelFour other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequiredFields()).compareTo(other.isSetRequiredFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredFields, other.requiredFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultFields()).compareTo(other.isSetDefaultFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultFields, other.defaultFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptionalFields()).compareTo(other.isSetOptionalFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalFields, other.optionalFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionFields()).compareTo(other.isSetUnionFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionFields, other.unionFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultValues()).compareTo(other.isSetDefaultValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValues, other.defaultValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompactFields()).compareTo(other.isSetCompactFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compactFields, other.compactFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LevelFour(");
    boolean first = true;

    if (isSetRequiredFields()) {
      sb.append("requiredFields:");
      if (this.requiredFields == null) {
        sb.append("null");
      } else {
        sb.append(this.requiredFields);
      }
      first = false;
    }
    if (isSetDefaultFields()) {
      if (!first) sb.append(", ");
      sb.append("defaultFields:");
      if (this.defaultFields == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultFields);
      }
      first = false;
    }
    if (isSetOptionalFields()) {
      if (!first) sb.append(", ");
      sb.append("optionalFields:");
      if (this.optionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalFields);
      }
      first = false;
    }
    if (isSetUnionFields()) {
      if (!first) sb.append(", ");
      sb.append("unionFields:");
      if (this.unionFields == null) {
        sb.append("null");
      } else {
        sb.append(this.unionFields);
      }
      first = false;
    }
    if (isSetDefaultValues()) {
      if (!first) sb.append(", ");
      sb.append("defaultValues:");
      if (this.defaultValues == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultValues);
      }
      first = false;
    }
    if (isSetCompactFields()) {
      if (!first) sb.append(", ");
      sb.append("compactFields:");
      if (this.compactFields == null) {
        sb.append("null");
      } else {
        sb.append(this.compactFields);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (requiredFields != null) {
      requiredFields.validate();
    }
    if (defaultFields != null) {
      defaultFields.validate();
    }
    if (optionalFields != null) {
      optionalFields.validate();
    }
    if (defaultValues != null) {
      defaultValues.validate();
    }
    if (compactFields != null) {
      compactFields.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LevelFourStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LevelFourStandardScheme getScheme() {
      return new LevelFourStandardScheme();
    }
  }

  private static class LevelFourStandardScheme extends org.apache.thrift.scheme.StandardScheme<LevelFour> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LevelFour struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUIRED_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields();
              struct.requiredFields.read(iprot);
              struct.setRequiredFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEFAULT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields();
              struct.defaultFields.read(iprot);
              struct.setDefaultFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPTIONAL_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields();
              struct.optionalFields.read(iprot);
              struct.setOptionalFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNION_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields();
              struct.unionFields.read(iprot);
              struct.setUnionFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFAULT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues();
              struct.defaultValues.read(iprot);
              struct.setDefaultValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPACT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compactFields = new net.morimekta.test.thrift.serialization.common.CompactFields();
              struct.compactFields.read(iprot);
              struct.setCompactFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LevelFour struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requiredFields != null) {
        if (struct.isSetRequiredFields()) {
          oprot.writeFieldBegin(REQUIRED_FIELDS_FIELD_DESC);
          struct.requiredFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultFields != null) {
        if (struct.isSetDefaultFields()) {
          oprot.writeFieldBegin(DEFAULT_FIELDS_FIELD_DESC);
          struct.defaultFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.optionalFields != null) {
        if (struct.isSetOptionalFields()) {
          oprot.writeFieldBegin(OPTIONAL_FIELDS_FIELD_DESC);
          struct.optionalFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unionFields != null) {
        if (struct.isSetUnionFields()) {
          oprot.writeFieldBegin(UNION_FIELDS_FIELD_DESC);
          struct.unionFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultValues != null) {
        if (struct.isSetDefaultValues()) {
          oprot.writeFieldBegin(DEFAULT_VALUES_FIELD_DESC);
          struct.defaultValues.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compactFields != null) {
        if (struct.isSetCompactFields()) {
          oprot.writeFieldBegin(COMPACT_FIELDS_FIELD_DESC);
          struct.compactFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LevelFourTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LevelFourTupleScheme getScheme() {
      return new LevelFourTupleScheme();
    }
  }

  private static class LevelFourTupleScheme extends org.apache.thrift.scheme.TupleScheme<LevelFour> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LevelFour struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequiredFields()) {
        optionals.set(0);
      }
      if (struct.isSetDefaultFields()) {
        optionals.set(1);
      }
      if (struct.isSetOptionalFields()) {
        optionals.set(2);
      }
      if (struct.isSetUnionFields()) {
        optionals.set(3);
      }
      if (struct.isSetDefaultValues()) {
        optionals.set(4);
      }
      if (struct.isSetCompactFields()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRequiredFields()) {
        struct.requiredFields.write(oprot);
      }
      if (struct.isSetDefaultFields()) {
        struct.defaultFields.write(oprot);
      }
      if (struct.isSetOptionalFields()) {
        struct.optionalFields.write(oprot);
      }
      if (struct.isSetUnionFields()) {
        struct.unionFields.write(oprot);
      }
      if (struct.isSetDefaultValues()) {
        struct.defaultValues.write(oprot);
      }
      if (struct.isSetCompactFields()) {
        struct.compactFields.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LevelFour struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields();
        struct.requiredFields.read(iprot);
        struct.setRequiredFieldsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields();
        struct.defaultFields.read(iprot);
        struct.setDefaultFieldsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields();
        struct.optionalFields.read(iprot);
        struct.setOptionalFieldsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields();
        struct.unionFields.read(iprot);
        struct.setUnionFieldsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues();
        struct.defaultValues.read(iprot);
        struct.setDefaultValuesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.compactFields = new net.morimekta.test.thrift.serialization.common.CompactFields();
        struct.compactFields.read(iprot);
        struct.setCompactFieldsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

