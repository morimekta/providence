/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.morimekta.test.thrift.serialization.deep;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class LevelTwo implements org.apache.thrift.TBase<LevelTwo, LevelTwo._Fields>, java.io.Serializable, Cloneable, Comparable<LevelTwo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LevelTwo");

  private static final org.apache.thrift.protocol.TField TREE1_FIELD_DESC = new org.apache.thrift.protocol.TField("tree1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TREE2_FIELD_DESC = new org.apache.thrift.protocol.TField("tree2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LevelTwoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LevelTwoTupleSchemeFactory();

  private LevelTree tree1; // required
  private LevelTree tree2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TREE1((short)1, "tree1"),
    TREE2((short)2, "tree2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TREE1
          return TREE1;
        case 2: // TREE2
          return TREE2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TREE1, new org.apache.thrift.meta_data.FieldMetaData("tree1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LevelTree.class)));
    tmpMap.put(_Fields.TREE2, new org.apache.thrift.meta_data.FieldMetaData("tree2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LevelTree.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LevelTwo.class, metaDataMap);
  }

  public LevelTwo() {
  }

  public LevelTwo(
    LevelTree tree1,
    LevelTree tree2)
  {
    this();
    this.tree1 = tree1;
    this.tree2 = tree2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LevelTwo(LevelTwo other) {
    if (other.isSetTree1()) {
      this.tree1 = new LevelTree(other.tree1);
    }
    if (other.isSetTree2()) {
      this.tree2 = new LevelTree(other.tree2);
    }
  }

  public LevelTwo deepCopy() {
    return new LevelTwo(this);
  }

  @Override
  public void clear() {
    this.tree1 = null;
    this.tree2 = null;
  }

  public LevelTree getTree1() {
    return this.tree1;
  }

  public LevelTwo setTree1(LevelTree tree1) {
    this.tree1 = tree1;
    return this;
  }

  public void unsetTree1() {
    this.tree1 = null;
  }

  /** Returns true if field tree1 is set (has been assigned a value) and false otherwise */
  public boolean isSetTree1() {
    return this.tree1 != null;
  }

  public void setTree1IsSet(boolean value) {
    if (!value) {
      this.tree1 = null;
    }
  }

  public LevelTree getTree2() {
    return this.tree2;
  }

  public LevelTwo setTree2(LevelTree tree2) {
    this.tree2 = tree2;
    return this;
  }

  public void unsetTree2() {
    this.tree2 = null;
  }

  /** Returns true if field tree2 is set (has been assigned a value) and false otherwise */
  public boolean isSetTree2() {
    return this.tree2 != null;
  }

  public void setTree2IsSet(boolean value) {
    if (!value) {
      this.tree2 = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TREE1:
      if (value == null) {
        unsetTree1();
      } else {
        setTree1((LevelTree)value);
      }
      break;

    case TREE2:
      if (value == null) {
        unsetTree2();
      } else {
        setTree2((LevelTree)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TREE1:
      return getTree1();

    case TREE2:
      return getTree2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TREE1:
      return isSetTree1();
    case TREE2:
      return isSetTree2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LevelTwo)
      return this.equals((LevelTwo)that);
    return false;
  }

  public boolean equals(LevelTwo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tree1 = true && this.isSetTree1();
    boolean that_present_tree1 = true && that.isSetTree1();
    if (this_present_tree1 || that_present_tree1) {
      if (!(this_present_tree1 && that_present_tree1))
        return false;
      if (!this.tree1.equals(that.tree1))
        return false;
    }

    boolean this_present_tree2 = true && this.isSetTree2();
    boolean that_present_tree2 = true && that.isSetTree2();
    if (this_present_tree2 || that_present_tree2) {
      if (!(this_present_tree2 && that_present_tree2))
        return false;
      if (!this.tree2.equals(that.tree2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTree1()) ? 131071 : 524287);
    if (isSetTree1())
      hashCode = hashCode * 8191 + tree1.hashCode();

    hashCode = hashCode * 8191 + ((isSetTree2()) ? 131071 : 524287);
    if (isSetTree2())
      hashCode = hashCode * 8191 + tree2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LevelTwo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTree1()).compareTo(other.isSetTree1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTree1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree1, other.tree1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTree2()).compareTo(other.isSetTree2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTree2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree2, other.tree2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LevelTwo(");
    boolean first = true;

    sb.append("tree1:");
    if (this.tree1 == null) {
      sb.append("null");
    } else {
      sb.append(this.tree1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tree2:");
    if (this.tree2 == null) {
      sb.append("null");
    } else {
      sb.append(this.tree2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tree1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tree1' was not present! Struct: " + toString());
    }
    if (tree2 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tree2' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tree1 != null) {
      tree1.validate();
    }
    if (tree2 != null) {
      tree2.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LevelTwoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LevelTwoStandardScheme getScheme() {
      return new LevelTwoStandardScheme();
    }
  }

  private static class LevelTwoStandardScheme extends org.apache.thrift.scheme.StandardScheme<LevelTwo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LevelTwo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TREE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tree1 = new LevelTree();
              struct.tree1.read(iprot);
              struct.setTree1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TREE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tree2 = new LevelTree();
              struct.tree2.read(iprot);
              struct.setTree2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LevelTwo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tree1 != null) {
        oprot.writeFieldBegin(TREE1_FIELD_DESC);
        struct.tree1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tree2 != null) {
        oprot.writeFieldBegin(TREE2_FIELD_DESC);
        struct.tree2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LevelTwoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LevelTwoTupleScheme getScheme() {
      return new LevelTwoTupleScheme();
    }
  }

  private static class LevelTwoTupleScheme extends org.apache.thrift.scheme.TupleScheme<LevelTwo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LevelTwo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tree1.write(oprot);
      struct.tree2.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LevelTwo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tree1 = new LevelTree();
      struct.tree1.read(iprot);
      struct.setTree1IsSet(true);
      struct.tree2 = new LevelTree();
      struct.tree2.read(iprot);
      struct.setTree2IsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

