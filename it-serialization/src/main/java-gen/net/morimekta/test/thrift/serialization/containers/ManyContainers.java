/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.morimekta.test.thrift.serialization.containers;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ManyContainers implements org.apache.thrift.TBase<ManyContainers, ManyContainers._Fields>, java.io.Serializable, Cloneable, Comparable<ManyContainers> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ManyContainers");

  private static final org.apache.thrift.protocol.TField BOOLEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INTEGER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("integerList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("longList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stringList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BOOLEAN_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanSet", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField BYTE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("byteSet", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField SHORT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("shortSet", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField INTEGER_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("integerSet", org.apache.thrift.protocol.TType.SET, (short)14);
  private static final org.apache.thrift.protocol.TField LONG_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("longSet", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField DOUBLE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleSet", org.apache.thrift.protocol.TType.SET, (short)16);
  private static final org.apache.thrift.protocol.TField STRING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("stringSet", org.apache.thrift.protocol.TType.SET, (short)17);
  private static final org.apache.thrift.protocol.TField BINARY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("binarySet", org.apache.thrift.protocol.TType.SET, (short)18);
  private static final org.apache.thrift.protocol.TField BOOLEAN_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanMap", org.apache.thrift.protocol.TType.MAP, (short)21);
  private static final org.apache.thrift.protocol.TField BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byteMap", org.apache.thrift.protocol.TType.MAP, (short)22);
  private static final org.apache.thrift.protocol.TField SHORT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("shortMap", org.apache.thrift.protocol.TType.MAP, (short)23);
  private static final org.apache.thrift.protocol.TField INTEGER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("integerMap", org.apache.thrift.protocol.TType.MAP, (short)24);
  private static final org.apache.thrift.protocol.TField LONG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("longMap", org.apache.thrift.protocol.TType.MAP, (short)25);
  private static final org.apache.thrift.protocol.TField DOUBLE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleMap", org.apache.thrift.protocol.TType.MAP, (short)26);
  private static final org.apache.thrift.protocol.TField STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringMap", org.apache.thrift.protocol.TType.MAP, (short)27);
  private static final org.apache.thrift.protocol.TField BINARY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryMap", org.apache.thrift.protocol.TType.MAP, (short)28);
  private static final org.apache.thrift.protocol.TField ENUM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("enumList", org.apache.thrift.protocol.TType.LIST, (short)31);
  private static final org.apache.thrift.protocol.TField ENUM_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("enumSet", org.apache.thrift.protocol.TType.SET, (short)32);
  private static final org.apache.thrift.protocol.TField ENUM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("enumMap", org.apache.thrift.protocol.TType.MAP, (short)33);
  private static final org.apache.thrift.protocol.TField MESSAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("messageList", org.apache.thrift.protocol.TType.LIST, (short)41);
  private static final org.apache.thrift.protocol.TField MESSAGE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("messageSet", org.apache.thrift.protocol.TType.SET, (short)42);
  private static final org.apache.thrift.protocol.TField MESSAGE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("messageMap", org.apache.thrift.protocol.TType.MAP, (short)43);
  private static final org.apache.thrift.protocol.TField REQUIRED_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredFields", org.apache.thrift.protocol.TType.STRUCT, (short)51);
  private static final org.apache.thrift.protocol.TField DEFAULT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultFields", org.apache.thrift.protocol.TType.STRUCT, (short)52);
  private static final org.apache.thrift.protocol.TField OPTIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)53);
  private static final org.apache.thrift.protocol.TField UNION_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("unionFields", org.apache.thrift.protocol.TType.STRUCT, (short)54);
  private static final org.apache.thrift.protocol.TField EXCEPTION_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionFields", org.apache.thrift.protocol.TType.STRUCT, (short)55);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValues", org.apache.thrift.protocol.TType.STRUCT, (short)56);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ManyContainersStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ManyContainersTupleSchemeFactory();

  private java.util.List<java.lang.Boolean> booleanList; // optional
  private java.util.List<java.lang.Byte> byteList; // optional
  private java.util.List<java.lang.Short> shortList; // optional
  private java.util.List<java.lang.Integer> integerList; // optional
  private java.util.List<java.lang.Long> longList; // optional
  private java.util.List<java.lang.Double> doubleList; // optional
  private java.util.List<java.lang.String> stringList; // optional
  private java.util.List<java.nio.ByteBuffer> binaryList; // optional
  private java.util.Set<java.lang.Boolean> booleanSet; // optional
  private java.util.Set<java.lang.Byte> byteSet; // optional
  private java.util.Set<java.lang.Short> shortSet; // optional
  private java.util.Set<java.lang.Integer> integerSet; // optional
  private java.util.Set<java.lang.Long> longSet; // optional
  private java.util.Set<java.lang.Double> doubleSet; // optional
  private java.util.Set<java.lang.String> stringSet; // optional
  private java.util.Set<java.nio.ByteBuffer> binarySet; // optional
  private java.util.Map<java.lang.Boolean,java.lang.Boolean> booleanMap; // optional
  private java.util.Map<java.lang.Byte,java.lang.Byte> byteMap; // optional
  private java.util.Map<java.lang.Short,java.lang.Short> shortMap; // optional
  private java.util.Map<java.lang.Integer,java.lang.Integer> integerMap; // optional
  private java.util.Map<java.lang.Long,java.lang.Long> longMap; // optional
  private java.util.Map<java.lang.Double,java.lang.Double> doubleMap; // optional
  private java.util.Map<java.lang.String,java.lang.String> stringMap; // optional
  private java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> binaryMap; // optional
  private java.util.List<net.morimekta.test.thrift.serialization.common.Value> enumList; // optional
  private java.util.Set<net.morimekta.test.thrift.serialization.common.Value> enumSet; // optional
  private java.util.Map<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value> enumMap; // optional
  private java.util.List<net.morimekta.test.thrift.serialization.common.DefaultFields> messageList; // optional
  private java.util.Set<net.morimekta.test.thrift.serialization.common.DefaultFields> messageSet; // optional
  private java.util.Map<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields> messageMap; // optional
  private net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields; // optional
  private net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields; // optional
  private net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields; // optional
  private net.morimekta.test.thrift.serialization.common.UnionFields unionFields; // optional
  private net.morimekta.test.thrift.serialization.common.ExceptionFields exceptionFields; // optional
  private net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOLEAN_LIST((short)1, "booleanList"),
    BYTE_LIST((short)2, "byteList"),
    SHORT_LIST((short)3, "shortList"),
    INTEGER_LIST((short)4, "integerList"),
    LONG_LIST((short)5, "longList"),
    DOUBLE_LIST((short)6, "doubleList"),
    STRING_LIST((short)7, "stringList"),
    BINARY_LIST((short)8, "binaryList"),
    BOOLEAN_SET((short)11, "booleanSet"),
    BYTE_SET((short)12, "byteSet"),
    SHORT_SET((short)13, "shortSet"),
    INTEGER_SET((short)14, "integerSet"),
    LONG_SET((short)15, "longSet"),
    DOUBLE_SET((short)16, "doubleSet"),
    STRING_SET((short)17, "stringSet"),
    BINARY_SET((short)18, "binarySet"),
    BOOLEAN_MAP((short)21, "booleanMap"),
    BYTE_MAP((short)22, "byteMap"),
    SHORT_MAP((short)23, "shortMap"),
    INTEGER_MAP((short)24, "integerMap"),
    LONG_MAP((short)25, "longMap"),
    DOUBLE_MAP((short)26, "doubleMap"),
    STRING_MAP((short)27, "stringMap"),
    BINARY_MAP((short)28, "binaryMap"),
    ENUM_LIST((short)31, "enumList"),
    ENUM_SET((short)32, "enumSet"),
    ENUM_MAP((short)33, "enumMap"),
    MESSAGE_LIST((short)41, "messageList"),
    MESSAGE_SET((short)42, "messageSet"),
    MESSAGE_MAP((short)43, "messageMap"),
    REQUIRED_FIELDS((short)51, "requiredFields"),
    DEFAULT_FIELDS((short)52, "defaultFields"),
    OPTIONAL_FIELDS((short)53, "optionalFields"),
    UNION_FIELDS((short)54, "unionFields"),
    EXCEPTION_FIELDS((short)55, "exceptionFields"),
    DEFAULT_VALUES((short)56, "defaultValues");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOLEAN_LIST
          return BOOLEAN_LIST;
        case 2: // BYTE_LIST
          return BYTE_LIST;
        case 3: // SHORT_LIST
          return SHORT_LIST;
        case 4: // INTEGER_LIST
          return INTEGER_LIST;
        case 5: // LONG_LIST
          return LONG_LIST;
        case 6: // DOUBLE_LIST
          return DOUBLE_LIST;
        case 7: // STRING_LIST
          return STRING_LIST;
        case 8: // BINARY_LIST
          return BINARY_LIST;
        case 11: // BOOLEAN_SET
          return BOOLEAN_SET;
        case 12: // BYTE_SET
          return BYTE_SET;
        case 13: // SHORT_SET
          return SHORT_SET;
        case 14: // INTEGER_SET
          return INTEGER_SET;
        case 15: // LONG_SET
          return LONG_SET;
        case 16: // DOUBLE_SET
          return DOUBLE_SET;
        case 17: // STRING_SET
          return STRING_SET;
        case 18: // BINARY_SET
          return BINARY_SET;
        case 21: // BOOLEAN_MAP
          return BOOLEAN_MAP;
        case 22: // BYTE_MAP
          return BYTE_MAP;
        case 23: // SHORT_MAP
          return SHORT_MAP;
        case 24: // INTEGER_MAP
          return INTEGER_MAP;
        case 25: // LONG_MAP
          return LONG_MAP;
        case 26: // DOUBLE_MAP
          return DOUBLE_MAP;
        case 27: // STRING_MAP
          return STRING_MAP;
        case 28: // BINARY_MAP
          return BINARY_MAP;
        case 31: // ENUM_LIST
          return ENUM_LIST;
        case 32: // ENUM_SET
          return ENUM_SET;
        case 33: // ENUM_MAP
          return ENUM_MAP;
        case 41: // MESSAGE_LIST
          return MESSAGE_LIST;
        case 42: // MESSAGE_SET
          return MESSAGE_SET;
        case 43: // MESSAGE_MAP
          return MESSAGE_MAP;
        case 51: // REQUIRED_FIELDS
          return REQUIRED_FIELDS;
        case 52: // DEFAULT_FIELDS
          return DEFAULT_FIELDS;
        case 53: // OPTIONAL_FIELDS
          return OPTIONAL_FIELDS;
        case 54: // UNION_FIELDS
          return UNION_FIELDS;
        case 55: // EXCEPTION_FIELDS
          return EXCEPTION_FIELDS;
        case 56: // DEFAULT_VALUES
          return DEFAULT_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BOOLEAN_LIST,_Fields.BYTE_LIST,_Fields.SHORT_LIST,_Fields.INTEGER_LIST,_Fields.LONG_LIST,_Fields.DOUBLE_LIST,_Fields.STRING_LIST,_Fields.BINARY_LIST,_Fields.BOOLEAN_SET,_Fields.BYTE_SET,_Fields.SHORT_SET,_Fields.INTEGER_SET,_Fields.LONG_SET,_Fields.DOUBLE_SET,_Fields.STRING_SET,_Fields.BINARY_SET,_Fields.BOOLEAN_MAP,_Fields.BYTE_MAP,_Fields.SHORT_MAP,_Fields.INTEGER_MAP,_Fields.LONG_MAP,_Fields.DOUBLE_MAP,_Fields.STRING_MAP,_Fields.BINARY_MAP,_Fields.ENUM_LIST,_Fields.ENUM_SET,_Fields.ENUM_MAP,_Fields.MESSAGE_LIST,_Fields.MESSAGE_SET,_Fields.MESSAGE_MAP,_Fields.REQUIRED_FIELDS,_Fields.DEFAULT_FIELDS,_Fields.OPTIONAL_FIELDS,_Fields.UNION_FIELDS,_Fields.EXCEPTION_FIELDS,_Fields.DEFAULT_VALUES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOLEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("booleanList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INTEGER_LIST, new org.apache.thrift.meta_data.FieldMetaData("integerList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_LIST, new org.apache.thrift.meta_data.FieldMetaData("longList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("doubleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_LIST, new org.apache.thrift.meta_data.FieldMetaData("stringList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_LIST, new org.apache.thrift.meta_data.FieldMetaData("binaryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BOOLEAN_SET, new org.apache.thrift.meta_data.FieldMetaData("booleanSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BYTE_SET, new org.apache.thrift.meta_data.FieldMetaData("byteSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_SET, new org.apache.thrift.meta_data.FieldMetaData("shortSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INTEGER_SET, new org.apache.thrift.meta_data.FieldMetaData("integerSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_SET, new org.apache.thrift.meta_data.FieldMetaData("longSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_SET, new org.apache.thrift.meta_data.FieldMetaData("doubleSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_SET, new org.apache.thrift.meta_data.FieldMetaData("stringSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_SET, new org.apache.thrift.meta_data.FieldMetaData("binarySet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BOOLEAN_MAP, new org.apache.thrift.meta_data.FieldMetaData("booleanMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("byteMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_MAP, new org.apache.thrift.meta_data.FieldMetaData("shortMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INTEGER_MAP, new org.apache.thrift.meta_data.FieldMetaData("integerMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_MAP, new org.apache.thrift.meta_data.FieldMetaData("longMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_MAP, new org.apache.thrift.meta_data.FieldMetaData("doubleMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_MAP, new org.apache.thrift.meta_data.FieldMetaData("binaryMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.ENUM_LIST, new org.apache.thrift.meta_data.FieldMetaData("enumList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, net.morimekta.test.thrift.serialization.common.Value.class))));
    tmpMap.put(_Fields.ENUM_SET, new org.apache.thrift.meta_data.FieldMetaData("enumSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, net.morimekta.test.thrift.serialization.common.Value.class))));
    tmpMap.put(_Fields.ENUM_MAP, new org.apache.thrift.meta_data.FieldMetaData("enumMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, net.morimekta.test.thrift.serialization.common.Value.class), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, net.morimekta.test.thrift.serialization.common.Value.class))));
    tmpMap.put(_Fields.MESSAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("messageList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultFields.class))));
    tmpMap.put(_Fields.MESSAGE_SET, new org.apache.thrift.meta_data.FieldMetaData("messageSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultFields.class))));
    tmpMap.put(_Fields.MESSAGE_MAP, new org.apache.thrift.meta_data.FieldMetaData("messageMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultFields.class))));
    tmpMap.put(_Fields.REQUIRED_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("requiredFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.RequiredFields.class)));
    tmpMap.put(_Fields.DEFAULT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("defaultFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultFields.class)));
    tmpMap.put(_Fields.OPTIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("optionalFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.OptionalFields.class)));
    tmpMap.put(_Fields.UNION_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("unionFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.UnionFields.class)));
    tmpMap.put(_Fields.EXCEPTION_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("exceptionFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.ExceptionFields.class)));
    tmpMap.put(_Fields.DEFAULT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("defaultValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultValues.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ManyContainers.class, metaDataMap);
  }

  public ManyContainers() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ManyContainers(ManyContainers other) {
    if (other.isSetBooleanList()) {
      java.util.List<java.lang.Boolean> __this__booleanList = new java.util.ArrayList<java.lang.Boolean>(other.booleanList);
      this.booleanList = __this__booleanList;
    }
    if (other.isSetByteList()) {
      java.util.List<java.lang.Byte> __this__byteList = new java.util.ArrayList<java.lang.Byte>(other.byteList);
      this.byteList = __this__byteList;
    }
    if (other.isSetShortList()) {
      java.util.List<java.lang.Short> __this__shortList = new java.util.ArrayList<java.lang.Short>(other.shortList);
      this.shortList = __this__shortList;
    }
    if (other.isSetIntegerList()) {
      java.util.List<java.lang.Integer> __this__integerList = new java.util.ArrayList<java.lang.Integer>(other.integerList);
      this.integerList = __this__integerList;
    }
    if (other.isSetLongList()) {
      java.util.List<java.lang.Long> __this__longList = new java.util.ArrayList<java.lang.Long>(other.longList);
      this.longList = __this__longList;
    }
    if (other.isSetDoubleList()) {
      java.util.List<java.lang.Double> __this__doubleList = new java.util.ArrayList<java.lang.Double>(other.doubleList);
      this.doubleList = __this__doubleList;
    }
    if (other.isSetStringList()) {
      java.util.List<java.lang.String> __this__stringList = new java.util.ArrayList<java.lang.String>(other.stringList);
      this.stringList = __this__stringList;
    }
    if (other.isSetBinaryList()) {
      java.util.List<java.nio.ByteBuffer> __this__binaryList = new java.util.ArrayList<java.nio.ByteBuffer>(other.binaryList);
      this.binaryList = __this__binaryList;
    }
    if (other.isSetBooleanSet()) {
      java.util.Set<java.lang.Boolean> __this__booleanSet = new java.util.HashSet<java.lang.Boolean>(other.booleanSet);
      this.booleanSet = __this__booleanSet;
    }
    if (other.isSetByteSet()) {
      java.util.Set<java.lang.Byte> __this__byteSet = new java.util.HashSet<java.lang.Byte>(other.byteSet);
      this.byteSet = __this__byteSet;
    }
    if (other.isSetShortSet()) {
      java.util.Set<java.lang.Short> __this__shortSet = new java.util.HashSet<java.lang.Short>(other.shortSet);
      this.shortSet = __this__shortSet;
    }
    if (other.isSetIntegerSet()) {
      java.util.Set<java.lang.Integer> __this__integerSet = new java.util.HashSet<java.lang.Integer>(other.integerSet);
      this.integerSet = __this__integerSet;
    }
    if (other.isSetLongSet()) {
      java.util.Set<java.lang.Long> __this__longSet = new java.util.HashSet<java.lang.Long>(other.longSet);
      this.longSet = __this__longSet;
    }
    if (other.isSetDoubleSet()) {
      java.util.Set<java.lang.Double> __this__doubleSet = new java.util.HashSet<java.lang.Double>(other.doubleSet);
      this.doubleSet = __this__doubleSet;
    }
    if (other.isSetStringSet()) {
      java.util.Set<java.lang.String> __this__stringSet = new java.util.HashSet<java.lang.String>(other.stringSet);
      this.stringSet = __this__stringSet;
    }
    if (other.isSetBinarySet()) {
      java.util.Set<java.nio.ByteBuffer> __this__binarySet = new java.util.HashSet<java.nio.ByteBuffer>(other.binarySet);
      this.binarySet = __this__binarySet;
    }
    if (other.isSetBooleanMap()) {
      java.util.Map<java.lang.Boolean,java.lang.Boolean> __this__booleanMap = new java.util.HashMap<java.lang.Boolean,java.lang.Boolean>(other.booleanMap);
      this.booleanMap = __this__booleanMap;
    }
    if (other.isSetByteMap()) {
      java.util.Map<java.lang.Byte,java.lang.Byte> __this__byteMap = new java.util.HashMap<java.lang.Byte,java.lang.Byte>(other.byteMap);
      this.byteMap = __this__byteMap;
    }
    if (other.isSetShortMap()) {
      java.util.Map<java.lang.Short,java.lang.Short> __this__shortMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(other.shortMap);
      this.shortMap = __this__shortMap;
    }
    if (other.isSetIntegerMap()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.integerMap);
      this.integerMap = __this__integerMap;
    }
    if (other.isSetLongMap()) {
      java.util.Map<java.lang.Long,java.lang.Long> __this__longMap = new java.util.HashMap<java.lang.Long,java.lang.Long>(other.longMap);
      this.longMap = __this__longMap;
    }
    if (other.isSetDoubleMap()) {
      java.util.Map<java.lang.Double,java.lang.Double> __this__doubleMap = new java.util.HashMap<java.lang.Double,java.lang.Double>(other.doubleMap);
      this.doubleMap = __this__doubleMap;
    }
    if (other.isSetStringMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__stringMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.stringMap);
      this.stringMap = __this__stringMap;
    }
    if (other.isSetBinaryMap()) {
      java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> __this__binaryMap = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(other.binaryMap);
      this.binaryMap = __this__binaryMap;
    }
    if (other.isSetEnumList()) {
      java.util.List<net.morimekta.test.thrift.serialization.common.Value> __this__enumList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.Value>(other.enumList.size());
      for (net.morimekta.test.thrift.serialization.common.Value other_element : other.enumList) {
        __this__enumList.add(other_element);
      }
      this.enumList = __this__enumList;
    }
    if (other.isSetEnumSet()) {
      java.util.Set<net.morimekta.test.thrift.serialization.common.Value> __this__enumSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.Value>(other.enumSet.size());
      for (net.morimekta.test.thrift.serialization.common.Value other_element : other.enumSet) {
        __this__enumSet.add(other_element);
      }
      this.enumSet = __this__enumSet;
    }
    if (other.isSetEnumMap()) {
      java.util.Map<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value> __this__enumMap = new java.util.HashMap<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value>(other.enumMap.size());
      for (java.util.Map.Entry<net.morimekta.test.thrift.serialization.common.Value, net.morimekta.test.thrift.serialization.common.Value> other_element : other.enumMap.entrySet()) {

        net.morimekta.test.thrift.serialization.common.Value other_element_key = other_element.getKey();
        net.morimekta.test.thrift.serialization.common.Value other_element_value = other_element.getValue();

        net.morimekta.test.thrift.serialization.common.Value __this__enumMap_copy_key = other_element_key;

        net.morimekta.test.thrift.serialization.common.Value __this__enumMap_copy_value = other_element_value;

        __this__enumMap.put(__this__enumMap_copy_key, __this__enumMap_copy_value);
      }
      this.enumMap = __this__enumMap;
    }
    if (other.isSetMessageList()) {
      java.util.List<net.morimekta.test.thrift.serialization.common.DefaultFields> __this__messageList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.DefaultFields>(other.messageList.size());
      for (net.morimekta.test.thrift.serialization.common.DefaultFields other_element : other.messageList) {
        __this__messageList.add(new net.morimekta.test.thrift.serialization.common.DefaultFields(other_element));
      }
      this.messageList = __this__messageList;
    }
    if (other.isSetMessageSet()) {
      java.util.Set<net.morimekta.test.thrift.serialization.common.DefaultFields> __this__messageSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.DefaultFields>(other.messageSet.size());
      for (net.morimekta.test.thrift.serialization.common.DefaultFields other_element : other.messageSet) {
        __this__messageSet.add(new net.morimekta.test.thrift.serialization.common.DefaultFields(other_element));
      }
      this.messageSet = __this__messageSet;
    }
    if (other.isSetMessageMap()) {
      java.util.Map<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields> __this__messageMap = new java.util.HashMap<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields>(other.messageMap.size());
      for (java.util.Map.Entry<java.lang.String, net.morimekta.test.thrift.serialization.common.DefaultFields> other_element : other.messageMap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        net.morimekta.test.thrift.serialization.common.DefaultFields other_element_value = other_element.getValue();

        java.lang.String __this__messageMap_copy_key = other_element_key;

        net.morimekta.test.thrift.serialization.common.DefaultFields __this__messageMap_copy_value = new net.morimekta.test.thrift.serialization.common.DefaultFields(other_element_value);

        __this__messageMap.put(__this__messageMap_copy_key, __this__messageMap_copy_value);
      }
      this.messageMap = __this__messageMap;
    }
    if (other.isSetRequiredFields()) {
      this.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields(other.requiredFields);
    }
    if (other.isSetDefaultFields()) {
      this.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields(other.defaultFields);
    }
    if (other.isSetOptionalFields()) {
      this.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields(other.optionalFields);
    }
    if (other.isSetUnionFields()) {
      this.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields(other.unionFields);
    }
    if (other.isSetExceptionFields()) {
      this.exceptionFields = new net.morimekta.test.thrift.serialization.common.ExceptionFields(other.exceptionFields);
    }
    if (other.isSetDefaultValues()) {
      this.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues(other.defaultValues);
    }
  }

  public ManyContainers deepCopy() {
    return new ManyContainers(this);
  }

  @Override
  public void clear() {
    this.booleanList = null;
    this.byteList = null;
    this.shortList = null;
    this.integerList = null;
    this.longList = null;
    this.doubleList = null;
    this.stringList = null;
    this.binaryList = null;
    this.booleanSet = null;
    this.byteSet = null;
    this.shortSet = null;
    this.integerSet = null;
    this.longSet = null;
    this.doubleSet = null;
    this.stringSet = null;
    this.binarySet = null;
    this.booleanMap = null;
    this.byteMap = null;
    this.shortMap = null;
    this.integerMap = null;
    this.longMap = null;
    this.doubleMap = null;
    this.stringMap = null;
    this.binaryMap = null;
    this.enumList = null;
    this.enumSet = null;
    this.enumMap = null;
    this.messageList = null;
    this.messageSet = null;
    this.messageMap = null;
    this.requiredFields = null;
    this.defaultFields = null;
    this.optionalFields = null;
    this.unionFields = null;
    this.exceptionFields = null;
    this.defaultValues = null;
  }

  public int getBooleanListSize() {
    return (this.booleanList == null) ? 0 : this.booleanList.size();
  }

  public java.util.Iterator<java.lang.Boolean> getBooleanListIterator() {
    return (this.booleanList == null) ? null : this.booleanList.iterator();
  }

  public void addToBooleanList(boolean elem) {
    if (this.booleanList == null) {
      this.booleanList = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.booleanList.add(elem);
  }

  public java.util.List<java.lang.Boolean> getBooleanList() {
    return this.booleanList;
  }

  public ManyContainers setBooleanList(java.util.List<java.lang.Boolean> booleanList) {
    this.booleanList = booleanList;
    return this;
  }

  public void unsetBooleanList() {
    this.booleanList = null;
  }

  /** Returns true if field booleanList is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanList() {
    return this.booleanList != null;
  }

  public void setBooleanListIsSet(boolean value) {
    if (!value) {
      this.booleanList = null;
    }
  }

  public int getByteListSize() {
    return (this.byteList == null) ? 0 : this.byteList.size();
  }

  public java.util.Iterator<java.lang.Byte> getByteListIterator() {
    return (this.byteList == null) ? null : this.byteList.iterator();
  }

  public void addToByteList(byte elem) {
    if (this.byteList == null) {
      this.byteList = new java.util.ArrayList<java.lang.Byte>();
    }
    this.byteList.add(elem);
  }

  public java.util.List<java.lang.Byte> getByteList() {
    return this.byteList;
  }

  public ManyContainers setByteList(java.util.List<java.lang.Byte> byteList) {
    this.byteList = byteList;
    return this;
  }

  public void unsetByteList() {
    this.byteList = null;
  }

  /** Returns true if field byteList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteList() {
    return this.byteList != null;
  }

  public void setByteListIsSet(boolean value) {
    if (!value) {
      this.byteList = null;
    }
  }

  public int getShortListSize() {
    return (this.shortList == null) ? 0 : this.shortList.size();
  }

  public java.util.Iterator<java.lang.Short> getShortListIterator() {
    return (this.shortList == null) ? null : this.shortList.iterator();
  }

  public void addToShortList(short elem) {
    if (this.shortList == null) {
      this.shortList = new java.util.ArrayList<java.lang.Short>();
    }
    this.shortList.add(elem);
  }

  public java.util.List<java.lang.Short> getShortList() {
    return this.shortList;
  }

  public ManyContainers setShortList(java.util.List<java.lang.Short> shortList) {
    this.shortList = shortList;
    return this;
  }

  public void unsetShortList() {
    this.shortList = null;
  }

  /** Returns true if field shortList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortList() {
    return this.shortList != null;
  }

  public void setShortListIsSet(boolean value) {
    if (!value) {
      this.shortList = null;
    }
  }

  public int getIntegerListSize() {
    return (this.integerList == null) ? 0 : this.integerList.size();
  }

  public java.util.Iterator<java.lang.Integer> getIntegerListIterator() {
    return (this.integerList == null) ? null : this.integerList.iterator();
  }

  public void addToIntegerList(int elem) {
    if (this.integerList == null) {
      this.integerList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.integerList.add(elem);
  }

  public java.util.List<java.lang.Integer> getIntegerList() {
    return this.integerList;
  }

  public ManyContainers setIntegerList(java.util.List<java.lang.Integer> integerList) {
    this.integerList = integerList;
    return this;
  }

  public void unsetIntegerList() {
    this.integerList = null;
  }

  /** Returns true if field integerList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerList() {
    return this.integerList != null;
  }

  public void setIntegerListIsSet(boolean value) {
    if (!value) {
      this.integerList = null;
    }
  }

  public int getLongListSize() {
    return (this.longList == null) ? 0 : this.longList.size();
  }

  public java.util.Iterator<java.lang.Long> getLongListIterator() {
    return (this.longList == null) ? null : this.longList.iterator();
  }

  public void addToLongList(long elem) {
    if (this.longList == null) {
      this.longList = new java.util.ArrayList<java.lang.Long>();
    }
    this.longList.add(elem);
  }

  public java.util.List<java.lang.Long> getLongList() {
    return this.longList;
  }

  public ManyContainers setLongList(java.util.List<java.lang.Long> longList) {
    this.longList = longList;
    return this;
  }

  public void unsetLongList() {
    this.longList = null;
  }

  /** Returns true if field longList is set (has been assigned a value) and false otherwise */
  public boolean isSetLongList() {
    return this.longList != null;
  }

  public void setLongListIsSet(boolean value) {
    if (!value) {
      this.longList = null;
    }
  }

  public int getDoubleListSize() {
    return (this.doubleList == null) ? 0 : this.doubleList.size();
  }

  public java.util.Iterator<java.lang.Double> getDoubleListIterator() {
    return (this.doubleList == null) ? null : this.doubleList.iterator();
  }

  public void addToDoubleList(double elem) {
    if (this.doubleList == null) {
      this.doubleList = new java.util.ArrayList<java.lang.Double>();
    }
    this.doubleList.add(elem);
  }

  public java.util.List<java.lang.Double> getDoubleList() {
    return this.doubleList;
  }

  public ManyContainers setDoubleList(java.util.List<java.lang.Double> doubleList) {
    this.doubleList = doubleList;
    return this;
  }

  public void unsetDoubleList() {
    this.doubleList = null;
  }

  /** Returns true if field doubleList is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleList() {
    return this.doubleList != null;
  }

  public void setDoubleListIsSet(boolean value) {
    if (!value) {
      this.doubleList = null;
    }
  }

  public int getStringListSize() {
    return (this.stringList == null) ? 0 : this.stringList.size();
  }

  public java.util.Iterator<java.lang.String> getStringListIterator() {
    return (this.stringList == null) ? null : this.stringList.iterator();
  }

  public void addToStringList(java.lang.String elem) {
    if (this.stringList == null) {
      this.stringList = new java.util.ArrayList<java.lang.String>();
    }
    this.stringList.add(elem);
  }

  public java.util.List<java.lang.String> getStringList() {
    return this.stringList;
  }

  public ManyContainers setStringList(java.util.List<java.lang.String> stringList) {
    this.stringList = stringList;
    return this;
  }

  public void unsetStringList() {
    this.stringList = null;
  }

  /** Returns true if field stringList is set (has been assigned a value) and false otherwise */
  public boolean isSetStringList() {
    return this.stringList != null;
  }

  public void setStringListIsSet(boolean value) {
    if (!value) {
      this.stringList = null;
    }
  }

  public int getBinaryListSize() {
    return (this.binaryList == null) ? 0 : this.binaryList.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getBinaryListIterator() {
    return (this.binaryList == null) ? null : this.binaryList.iterator();
  }

  public void addToBinaryList(java.nio.ByteBuffer elem) {
    if (this.binaryList == null) {
      this.binaryList = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.binaryList.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getBinaryList() {
    return this.binaryList;
  }

  public ManyContainers setBinaryList(java.util.List<java.nio.ByteBuffer> binaryList) {
    this.binaryList = binaryList;
    return this;
  }

  public void unsetBinaryList() {
    this.binaryList = null;
  }

  /** Returns true if field binaryList is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryList() {
    return this.binaryList != null;
  }

  public void setBinaryListIsSet(boolean value) {
    if (!value) {
      this.binaryList = null;
    }
  }

  public int getBooleanSetSize() {
    return (this.booleanSet == null) ? 0 : this.booleanSet.size();
  }

  public java.util.Iterator<java.lang.Boolean> getBooleanSetIterator() {
    return (this.booleanSet == null) ? null : this.booleanSet.iterator();
  }

  public void addToBooleanSet(boolean elem) {
    if (this.booleanSet == null) {
      this.booleanSet = new java.util.HashSet<java.lang.Boolean>();
    }
    this.booleanSet.add(elem);
  }

  public java.util.Set<java.lang.Boolean> getBooleanSet() {
    return this.booleanSet;
  }

  public ManyContainers setBooleanSet(java.util.Set<java.lang.Boolean> booleanSet) {
    this.booleanSet = booleanSet;
    return this;
  }

  public void unsetBooleanSet() {
    this.booleanSet = null;
  }

  /** Returns true if field booleanSet is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanSet() {
    return this.booleanSet != null;
  }

  public void setBooleanSetIsSet(boolean value) {
    if (!value) {
      this.booleanSet = null;
    }
  }

  public int getByteSetSize() {
    return (this.byteSet == null) ? 0 : this.byteSet.size();
  }

  public java.util.Iterator<java.lang.Byte> getByteSetIterator() {
    return (this.byteSet == null) ? null : this.byteSet.iterator();
  }

  public void addToByteSet(byte elem) {
    if (this.byteSet == null) {
      this.byteSet = new java.util.HashSet<java.lang.Byte>();
    }
    this.byteSet.add(elem);
  }

  public java.util.Set<java.lang.Byte> getByteSet() {
    return this.byteSet;
  }

  public ManyContainers setByteSet(java.util.Set<java.lang.Byte> byteSet) {
    this.byteSet = byteSet;
    return this;
  }

  public void unsetByteSet() {
    this.byteSet = null;
  }

  /** Returns true if field byteSet is set (has been assigned a value) and false otherwise */
  public boolean isSetByteSet() {
    return this.byteSet != null;
  }

  public void setByteSetIsSet(boolean value) {
    if (!value) {
      this.byteSet = null;
    }
  }

  public int getShortSetSize() {
    return (this.shortSet == null) ? 0 : this.shortSet.size();
  }

  public java.util.Iterator<java.lang.Short> getShortSetIterator() {
    return (this.shortSet == null) ? null : this.shortSet.iterator();
  }

  public void addToShortSet(short elem) {
    if (this.shortSet == null) {
      this.shortSet = new java.util.HashSet<java.lang.Short>();
    }
    this.shortSet.add(elem);
  }

  public java.util.Set<java.lang.Short> getShortSet() {
    return this.shortSet;
  }

  public ManyContainers setShortSet(java.util.Set<java.lang.Short> shortSet) {
    this.shortSet = shortSet;
    return this;
  }

  public void unsetShortSet() {
    this.shortSet = null;
  }

  /** Returns true if field shortSet is set (has been assigned a value) and false otherwise */
  public boolean isSetShortSet() {
    return this.shortSet != null;
  }

  public void setShortSetIsSet(boolean value) {
    if (!value) {
      this.shortSet = null;
    }
  }

  public int getIntegerSetSize() {
    return (this.integerSet == null) ? 0 : this.integerSet.size();
  }

  public java.util.Iterator<java.lang.Integer> getIntegerSetIterator() {
    return (this.integerSet == null) ? null : this.integerSet.iterator();
  }

  public void addToIntegerSet(int elem) {
    if (this.integerSet == null) {
      this.integerSet = new java.util.HashSet<java.lang.Integer>();
    }
    this.integerSet.add(elem);
  }

  public java.util.Set<java.lang.Integer> getIntegerSet() {
    return this.integerSet;
  }

  public ManyContainers setIntegerSet(java.util.Set<java.lang.Integer> integerSet) {
    this.integerSet = integerSet;
    return this;
  }

  public void unsetIntegerSet() {
    this.integerSet = null;
  }

  /** Returns true if field integerSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerSet() {
    return this.integerSet != null;
  }

  public void setIntegerSetIsSet(boolean value) {
    if (!value) {
      this.integerSet = null;
    }
  }

  public int getLongSetSize() {
    return (this.longSet == null) ? 0 : this.longSet.size();
  }

  public java.util.Iterator<java.lang.Long> getLongSetIterator() {
    return (this.longSet == null) ? null : this.longSet.iterator();
  }

  public void addToLongSet(long elem) {
    if (this.longSet == null) {
      this.longSet = new java.util.HashSet<java.lang.Long>();
    }
    this.longSet.add(elem);
  }

  public java.util.Set<java.lang.Long> getLongSet() {
    return this.longSet;
  }

  public ManyContainers setLongSet(java.util.Set<java.lang.Long> longSet) {
    this.longSet = longSet;
    return this;
  }

  public void unsetLongSet() {
    this.longSet = null;
  }

  /** Returns true if field longSet is set (has been assigned a value) and false otherwise */
  public boolean isSetLongSet() {
    return this.longSet != null;
  }

  public void setLongSetIsSet(boolean value) {
    if (!value) {
      this.longSet = null;
    }
  }

  public int getDoubleSetSize() {
    return (this.doubleSet == null) ? 0 : this.doubleSet.size();
  }

  public java.util.Iterator<java.lang.Double> getDoubleSetIterator() {
    return (this.doubleSet == null) ? null : this.doubleSet.iterator();
  }

  public void addToDoubleSet(double elem) {
    if (this.doubleSet == null) {
      this.doubleSet = new java.util.HashSet<java.lang.Double>();
    }
    this.doubleSet.add(elem);
  }

  public java.util.Set<java.lang.Double> getDoubleSet() {
    return this.doubleSet;
  }

  public ManyContainers setDoubleSet(java.util.Set<java.lang.Double> doubleSet) {
    this.doubleSet = doubleSet;
    return this;
  }

  public void unsetDoubleSet() {
    this.doubleSet = null;
  }

  /** Returns true if field doubleSet is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleSet() {
    return this.doubleSet != null;
  }

  public void setDoubleSetIsSet(boolean value) {
    if (!value) {
      this.doubleSet = null;
    }
  }

  public int getStringSetSize() {
    return (this.stringSet == null) ? 0 : this.stringSet.size();
  }

  public java.util.Iterator<java.lang.String> getStringSetIterator() {
    return (this.stringSet == null) ? null : this.stringSet.iterator();
  }

  public void addToStringSet(java.lang.String elem) {
    if (this.stringSet == null) {
      this.stringSet = new java.util.HashSet<java.lang.String>();
    }
    this.stringSet.add(elem);
  }

  public java.util.Set<java.lang.String> getStringSet() {
    return this.stringSet;
  }

  public ManyContainers setStringSet(java.util.Set<java.lang.String> stringSet) {
    this.stringSet = stringSet;
    return this;
  }

  public void unsetStringSet() {
    this.stringSet = null;
  }

  /** Returns true if field stringSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStringSet() {
    return this.stringSet != null;
  }

  public void setStringSetIsSet(boolean value) {
    if (!value) {
      this.stringSet = null;
    }
  }

  public int getBinarySetSize() {
    return (this.binarySet == null) ? 0 : this.binarySet.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getBinarySetIterator() {
    return (this.binarySet == null) ? null : this.binarySet.iterator();
  }

  public void addToBinarySet(java.nio.ByteBuffer elem) {
    if (this.binarySet == null) {
      this.binarySet = new java.util.HashSet<java.nio.ByteBuffer>();
    }
    this.binarySet.add(elem);
  }

  public java.util.Set<java.nio.ByteBuffer> getBinarySet() {
    return this.binarySet;
  }

  public ManyContainers setBinarySet(java.util.Set<java.nio.ByteBuffer> binarySet) {
    this.binarySet = binarySet;
    return this;
  }

  public void unsetBinarySet() {
    this.binarySet = null;
  }

  /** Returns true if field binarySet is set (has been assigned a value) and false otherwise */
  public boolean isSetBinarySet() {
    return this.binarySet != null;
  }

  public void setBinarySetIsSet(boolean value) {
    if (!value) {
      this.binarySet = null;
    }
  }

  public int getBooleanMapSize() {
    return (this.booleanMap == null) ? 0 : this.booleanMap.size();
  }

  public void putToBooleanMap(boolean key, boolean val) {
    if (this.booleanMap == null) {
      this.booleanMap = new java.util.HashMap<java.lang.Boolean,java.lang.Boolean>();
    }
    this.booleanMap.put(key, val);
  }

  public java.util.Map<java.lang.Boolean,java.lang.Boolean> getBooleanMap() {
    return this.booleanMap;
  }

  public ManyContainers setBooleanMap(java.util.Map<java.lang.Boolean,java.lang.Boolean> booleanMap) {
    this.booleanMap = booleanMap;
    return this;
  }

  public void unsetBooleanMap() {
    this.booleanMap = null;
  }

  /** Returns true if field booleanMap is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanMap() {
    return this.booleanMap != null;
  }

  public void setBooleanMapIsSet(boolean value) {
    if (!value) {
      this.booleanMap = null;
    }
  }

  public int getByteMapSize() {
    return (this.byteMap == null) ? 0 : this.byteMap.size();
  }

  public void putToByteMap(byte key, byte val) {
    if (this.byteMap == null) {
      this.byteMap = new java.util.HashMap<java.lang.Byte,java.lang.Byte>();
    }
    this.byteMap.put(key, val);
  }

  public java.util.Map<java.lang.Byte,java.lang.Byte> getByteMap() {
    return this.byteMap;
  }

  public ManyContainers setByteMap(java.util.Map<java.lang.Byte,java.lang.Byte> byteMap) {
    this.byteMap = byteMap;
    return this;
  }

  public void unsetByteMap() {
    this.byteMap = null;
  }

  /** Returns true if field byteMap is set (has been assigned a value) and false otherwise */
  public boolean isSetByteMap() {
    return this.byteMap != null;
  }

  public void setByteMapIsSet(boolean value) {
    if (!value) {
      this.byteMap = null;
    }
  }

  public int getShortMapSize() {
    return (this.shortMap == null) ? 0 : this.shortMap.size();
  }

  public void putToShortMap(short key, short val) {
    if (this.shortMap == null) {
      this.shortMap = new java.util.HashMap<java.lang.Short,java.lang.Short>();
    }
    this.shortMap.put(key, val);
  }

  public java.util.Map<java.lang.Short,java.lang.Short> getShortMap() {
    return this.shortMap;
  }

  public ManyContainers setShortMap(java.util.Map<java.lang.Short,java.lang.Short> shortMap) {
    this.shortMap = shortMap;
    return this;
  }

  public void unsetShortMap() {
    this.shortMap = null;
  }

  /** Returns true if field shortMap is set (has been assigned a value) and false otherwise */
  public boolean isSetShortMap() {
    return this.shortMap != null;
  }

  public void setShortMapIsSet(boolean value) {
    if (!value) {
      this.shortMap = null;
    }
  }

  public int getIntegerMapSize() {
    return (this.integerMap == null) ? 0 : this.integerMap.size();
  }

  public void putToIntegerMap(int key, int val) {
    if (this.integerMap == null) {
      this.integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.integerMap.put(key, val);
  }

  public java.util.Map<java.lang.Integer,java.lang.Integer> getIntegerMap() {
    return this.integerMap;
  }

  public ManyContainers setIntegerMap(java.util.Map<java.lang.Integer,java.lang.Integer> integerMap) {
    this.integerMap = integerMap;
    return this;
  }

  public void unsetIntegerMap() {
    this.integerMap = null;
  }

  /** Returns true if field integerMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerMap() {
    return this.integerMap != null;
  }

  public void setIntegerMapIsSet(boolean value) {
    if (!value) {
      this.integerMap = null;
    }
  }

  public int getLongMapSize() {
    return (this.longMap == null) ? 0 : this.longMap.size();
  }

  public void putToLongMap(long key, long val) {
    if (this.longMap == null) {
      this.longMap = new java.util.HashMap<java.lang.Long,java.lang.Long>();
    }
    this.longMap.put(key, val);
  }

  public java.util.Map<java.lang.Long,java.lang.Long> getLongMap() {
    return this.longMap;
  }

  public ManyContainers setLongMap(java.util.Map<java.lang.Long,java.lang.Long> longMap) {
    this.longMap = longMap;
    return this;
  }

  public void unsetLongMap() {
    this.longMap = null;
  }

  /** Returns true if field longMap is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMap() {
    return this.longMap != null;
  }

  public void setLongMapIsSet(boolean value) {
    if (!value) {
      this.longMap = null;
    }
  }

  public int getDoubleMapSize() {
    return (this.doubleMap == null) ? 0 : this.doubleMap.size();
  }

  public void putToDoubleMap(double key, double val) {
    if (this.doubleMap == null) {
      this.doubleMap = new java.util.HashMap<java.lang.Double,java.lang.Double>();
    }
    this.doubleMap.put(key, val);
  }

  public java.util.Map<java.lang.Double,java.lang.Double> getDoubleMap() {
    return this.doubleMap;
  }

  public ManyContainers setDoubleMap(java.util.Map<java.lang.Double,java.lang.Double> doubleMap) {
    this.doubleMap = doubleMap;
    return this;
  }

  public void unsetDoubleMap() {
    this.doubleMap = null;
  }

  /** Returns true if field doubleMap is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleMap() {
    return this.doubleMap != null;
  }

  public void setDoubleMapIsSet(boolean value) {
    if (!value) {
      this.doubleMap = null;
    }
  }

  public int getStringMapSize() {
    return (this.stringMap == null) ? 0 : this.stringMap.size();
  }

  public void putToStringMap(java.lang.String key, java.lang.String val) {
    if (this.stringMap == null) {
      this.stringMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.stringMap.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getStringMap() {
    return this.stringMap;
  }

  public ManyContainers setStringMap(java.util.Map<java.lang.String,java.lang.String> stringMap) {
    this.stringMap = stringMap;
    return this;
  }

  public void unsetStringMap() {
    this.stringMap = null;
  }

  /** Returns true if field stringMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStringMap() {
    return this.stringMap != null;
  }

  public void setStringMapIsSet(boolean value) {
    if (!value) {
      this.stringMap = null;
    }
  }

  public int getBinaryMapSize() {
    return (this.binaryMap == null) ? 0 : this.binaryMap.size();
  }

  public void putToBinaryMap(java.nio.ByteBuffer key, java.nio.ByteBuffer val) {
    if (this.binaryMap == null) {
      this.binaryMap = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>();
    }
    this.binaryMap.put(key, val);
  }

  public java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> getBinaryMap() {
    return this.binaryMap;
  }

  public ManyContainers setBinaryMap(java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> binaryMap) {
    this.binaryMap = binaryMap;
    return this;
  }

  public void unsetBinaryMap() {
    this.binaryMap = null;
  }

  /** Returns true if field binaryMap is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryMap() {
    return this.binaryMap != null;
  }

  public void setBinaryMapIsSet(boolean value) {
    if (!value) {
      this.binaryMap = null;
    }
  }

  public int getEnumListSize() {
    return (this.enumList == null) ? 0 : this.enumList.size();
  }

  public java.util.Iterator<net.morimekta.test.thrift.serialization.common.Value> getEnumListIterator() {
    return (this.enumList == null) ? null : this.enumList.iterator();
  }

  public void addToEnumList(net.morimekta.test.thrift.serialization.common.Value elem) {
    if (this.enumList == null) {
      this.enumList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.Value>();
    }
    this.enumList.add(elem);
  }

  public java.util.List<net.morimekta.test.thrift.serialization.common.Value> getEnumList() {
    return this.enumList;
  }

  public ManyContainers setEnumList(java.util.List<net.morimekta.test.thrift.serialization.common.Value> enumList) {
    this.enumList = enumList;
    return this;
  }

  public void unsetEnumList() {
    this.enumList = null;
  }

  /** Returns true if field enumList is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumList() {
    return this.enumList != null;
  }

  public void setEnumListIsSet(boolean value) {
    if (!value) {
      this.enumList = null;
    }
  }

  public int getEnumSetSize() {
    return (this.enumSet == null) ? 0 : this.enumSet.size();
  }

  public java.util.Iterator<net.morimekta.test.thrift.serialization.common.Value> getEnumSetIterator() {
    return (this.enumSet == null) ? null : this.enumSet.iterator();
  }

  public void addToEnumSet(net.morimekta.test.thrift.serialization.common.Value elem) {
    if (this.enumSet == null) {
      this.enumSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.Value>();
    }
    this.enumSet.add(elem);
  }

  public java.util.Set<net.morimekta.test.thrift.serialization.common.Value> getEnumSet() {
    return this.enumSet;
  }

  public ManyContainers setEnumSet(java.util.Set<net.morimekta.test.thrift.serialization.common.Value> enumSet) {
    this.enumSet = enumSet;
    return this;
  }

  public void unsetEnumSet() {
    this.enumSet = null;
  }

  /** Returns true if field enumSet is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumSet() {
    return this.enumSet != null;
  }

  public void setEnumSetIsSet(boolean value) {
    if (!value) {
      this.enumSet = null;
    }
  }

  public int getEnumMapSize() {
    return (this.enumMap == null) ? 0 : this.enumMap.size();
  }

  public void putToEnumMap(net.morimekta.test.thrift.serialization.common.Value key, net.morimekta.test.thrift.serialization.common.Value val) {
    if (this.enumMap == null) {
      this.enumMap = new java.util.HashMap<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value>();
    }
    this.enumMap.put(key, val);
  }

  public java.util.Map<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value> getEnumMap() {
    return this.enumMap;
  }

  public ManyContainers setEnumMap(java.util.Map<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value> enumMap) {
    this.enumMap = enumMap;
    return this;
  }

  public void unsetEnumMap() {
    this.enumMap = null;
  }

  /** Returns true if field enumMap is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumMap() {
    return this.enumMap != null;
  }

  public void setEnumMapIsSet(boolean value) {
    if (!value) {
      this.enumMap = null;
    }
  }

  public int getMessageListSize() {
    return (this.messageList == null) ? 0 : this.messageList.size();
  }

  public java.util.Iterator<net.morimekta.test.thrift.serialization.common.DefaultFields> getMessageListIterator() {
    return (this.messageList == null) ? null : this.messageList.iterator();
  }

  public void addToMessageList(net.morimekta.test.thrift.serialization.common.DefaultFields elem) {
    if (this.messageList == null) {
      this.messageList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.DefaultFields>();
    }
    this.messageList.add(elem);
  }

  public java.util.List<net.morimekta.test.thrift.serialization.common.DefaultFields> getMessageList() {
    return this.messageList;
  }

  public ManyContainers setMessageList(java.util.List<net.morimekta.test.thrift.serialization.common.DefaultFields> messageList) {
    this.messageList = messageList;
    return this;
  }

  public void unsetMessageList() {
    this.messageList = null;
  }

  /** Returns true if field messageList is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageList() {
    return this.messageList != null;
  }

  public void setMessageListIsSet(boolean value) {
    if (!value) {
      this.messageList = null;
    }
  }

  public int getMessageSetSize() {
    return (this.messageSet == null) ? 0 : this.messageSet.size();
  }

  public java.util.Iterator<net.morimekta.test.thrift.serialization.common.DefaultFields> getMessageSetIterator() {
    return (this.messageSet == null) ? null : this.messageSet.iterator();
  }

  public void addToMessageSet(net.morimekta.test.thrift.serialization.common.DefaultFields elem) {
    if (this.messageSet == null) {
      this.messageSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.DefaultFields>();
    }
    this.messageSet.add(elem);
  }

  public java.util.Set<net.morimekta.test.thrift.serialization.common.DefaultFields> getMessageSet() {
    return this.messageSet;
  }

  public ManyContainers setMessageSet(java.util.Set<net.morimekta.test.thrift.serialization.common.DefaultFields> messageSet) {
    this.messageSet = messageSet;
    return this;
  }

  public void unsetMessageSet() {
    this.messageSet = null;
  }

  /** Returns true if field messageSet is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageSet() {
    return this.messageSet != null;
  }

  public void setMessageSetIsSet(boolean value) {
    if (!value) {
      this.messageSet = null;
    }
  }

  public int getMessageMapSize() {
    return (this.messageMap == null) ? 0 : this.messageMap.size();
  }

  public void putToMessageMap(java.lang.String key, net.morimekta.test.thrift.serialization.common.DefaultFields val) {
    if (this.messageMap == null) {
      this.messageMap = new java.util.HashMap<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields>();
    }
    this.messageMap.put(key, val);
  }

  public java.util.Map<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields> getMessageMap() {
    return this.messageMap;
  }

  public ManyContainers setMessageMap(java.util.Map<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields> messageMap) {
    this.messageMap = messageMap;
    return this;
  }

  public void unsetMessageMap() {
    this.messageMap = null;
  }

  /** Returns true if field messageMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageMap() {
    return this.messageMap != null;
  }

  public void setMessageMapIsSet(boolean value) {
    if (!value) {
      this.messageMap = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.RequiredFields getRequiredFields() {
    return this.requiredFields;
  }

  public ManyContainers setRequiredFields(net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields) {
    this.requiredFields = requiredFields;
    return this;
  }

  public void unsetRequiredFields() {
    this.requiredFields = null;
  }

  /** Returns true if field requiredFields is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredFields() {
    return this.requiredFields != null;
  }

  public void setRequiredFieldsIsSet(boolean value) {
    if (!value) {
      this.requiredFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.DefaultFields getDefaultFields() {
    return this.defaultFields;
  }

  public ManyContainers setDefaultFields(net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields) {
    this.defaultFields = defaultFields;
    return this;
  }

  public void unsetDefaultFields() {
    this.defaultFields = null;
  }

  /** Returns true if field defaultFields is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultFields() {
    return this.defaultFields != null;
  }

  public void setDefaultFieldsIsSet(boolean value) {
    if (!value) {
      this.defaultFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.OptionalFields getOptionalFields() {
    return this.optionalFields;
  }

  public ManyContainers setOptionalFields(net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields) {
    this.optionalFields = optionalFields;
    return this;
  }

  public void unsetOptionalFields() {
    this.optionalFields = null;
  }

  /** Returns true if field optionalFields is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalFields() {
    return this.optionalFields != null;
  }

  public void setOptionalFieldsIsSet(boolean value) {
    if (!value) {
      this.optionalFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.UnionFields getUnionFields() {
    return this.unionFields;
  }

  public ManyContainers setUnionFields(net.morimekta.test.thrift.serialization.common.UnionFields unionFields) {
    this.unionFields = unionFields;
    return this;
  }

  public void unsetUnionFields() {
    this.unionFields = null;
  }

  /** Returns true if field unionFields is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionFields() {
    return this.unionFields != null;
  }

  public void setUnionFieldsIsSet(boolean value) {
    if (!value) {
      this.unionFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.ExceptionFields getExceptionFields() {
    return this.exceptionFields;
  }

  public ManyContainers setExceptionFields(net.morimekta.test.thrift.serialization.common.ExceptionFields exceptionFields) {
    this.exceptionFields = exceptionFields;
    return this;
  }

  public void unsetExceptionFields() {
    this.exceptionFields = null;
  }

  /** Returns true if field exceptionFields is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionFields() {
    return this.exceptionFields != null;
  }

  public void setExceptionFieldsIsSet(boolean value) {
    if (!value) {
      this.exceptionFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.DefaultValues getDefaultValues() {
    return this.defaultValues;
  }

  public ManyContainers setDefaultValues(net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public void unsetDefaultValues() {
    this.defaultValues = null;
  }

  /** Returns true if field defaultValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValues() {
    return this.defaultValues != null;
  }

  public void setDefaultValuesIsSet(boolean value) {
    if (!value) {
      this.defaultValues = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BOOLEAN_LIST:
      if (value == null) {
        unsetBooleanList();
      } else {
        setBooleanList((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByteList();
      } else {
        setByteList((java.util.List<java.lang.Byte>)value);
      }
      break;

    case SHORT_LIST:
      if (value == null) {
        unsetShortList();
      } else {
        setShortList((java.util.List<java.lang.Short>)value);
      }
      break;

    case INTEGER_LIST:
      if (value == null) {
        unsetIntegerList();
      } else {
        setIntegerList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case LONG_LIST:
      if (value == null) {
        unsetLongList();
      } else {
        setLongList((java.util.List<java.lang.Long>)value);
      }
      break;

    case DOUBLE_LIST:
      if (value == null) {
        unsetDoubleList();
      } else {
        setDoubleList((java.util.List<java.lang.Double>)value);
      }
      break;

    case STRING_LIST:
      if (value == null) {
        unsetStringList();
      } else {
        setStringList((java.util.List<java.lang.String>)value);
      }
      break;

    case BINARY_LIST:
      if (value == null) {
        unsetBinaryList();
      } else {
        setBinaryList((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case BOOLEAN_SET:
      if (value == null) {
        unsetBooleanSet();
      } else {
        setBooleanSet((java.util.Set<java.lang.Boolean>)value);
      }
      break;

    case BYTE_SET:
      if (value == null) {
        unsetByteSet();
      } else {
        setByteSet((java.util.Set<java.lang.Byte>)value);
      }
      break;

    case SHORT_SET:
      if (value == null) {
        unsetShortSet();
      } else {
        setShortSet((java.util.Set<java.lang.Short>)value);
      }
      break;

    case INTEGER_SET:
      if (value == null) {
        unsetIntegerSet();
      } else {
        setIntegerSet((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case LONG_SET:
      if (value == null) {
        unsetLongSet();
      } else {
        setLongSet((java.util.Set<java.lang.Long>)value);
      }
      break;

    case DOUBLE_SET:
      if (value == null) {
        unsetDoubleSet();
      } else {
        setDoubleSet((java.util.Set<java.lang.Double>)value);
      }
      break;

    case STRING_SET:
      if (value == null) {
        unsetStringSet();
      } else {
        setStringSet((java.util.Set<java.lang.String>)value);
      }
      break;

    case BINARY_SET:
      if (value == null) {
        unsetBinarySet();
      } else {
        setBinarySet((java.util.Set<java.nio.ByteBuffer>)value);
      }
      break;

    case BOOLEAN_MAP:
      if (value == null) {
        unsetBooleanMap();
      } else {
        setBooleanMap((java.util.Map<java.lang.Boolean,java.lang.Boolean>)value);
      }
      break;

    case BYTE_MAP:
      if (value == null) {
        unsetByteMap();
      } else {
        setByteMap((java.util.Map<java.lang.Byte,java.lang.Byte>)value);
      }
      break;

    case SHORT_MAP:
      if (value == null) {
        unsetShortMap();
      } else {
        setShortMap((java.util.Map<java.lang.Short,java.lang.Short>)value);
      }
      break;

    case INTEGER_MAP:
      if (value == null) {
        unsetIntegerMap();
      } else {
        setIntegerMap((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case LONG_MAP:
      if (value == null) {
        unsetLongMap();
      } else {
        setLongMap((java.util.Map<java.lang.Long,java.lang.Long>)value);
      }
      break;

    case DOUBLE_MAP:
      if (value == null) {
        unsetDoubleMap();
      } else {
        setDoubleMap((java.util.Map<java.lang.Double,java.lang.Double>)value);
      }
      break;

    case STRING_MAP:
      if (value == null) {
        unsetStringMap();
      } else {
        setStringMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case BINARY_MAP:
      if (value == null) {
        unsetBinaryMap();
      } else {
        setBinaryMap((java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer>)value);
      }
      break;

    case ENUM_LIST:
      if (value == null) {
        unsetEnumList();
      } else {
        setEnumList((java.util.List<net.morimekta.test.thrift.serialization.common.Value>)value);
      }
      break;

    case ENUM_SET:
      if (value == null) {
        unsetEnumSet();
      } else {
        setEnumSet((java.util.Set<net.morimekta.test.thrift.serialization.common.Value>)value);
      }
      break;

    case ENUM_MAP:
      if (value == null) {
        unsetEnumMap();
      } else {
        setEnumMap((java.util.Map<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value>)value);
      }
      break;

    case MESSAGE_LIST:
      if (value == null) {
        unsetMessageList();
      } else {
        setMessageList((java.util.List<net.morimekta.test.thrift.serialization.common.DefaultFields>)value);
      }
      break;

    case MESSAGE_SET:
      if (value == null) {
        unsetMessageSet();
      } else {
        setMessageSet((java.util.Set<net.morimekta.test.thrift.serialization.common.DefaultFields>)value);
      }
      break;

    case MESSAGE_MAP:
      if (value == null) {
        unsetMessageMap();
      } else {
        setMessageMap((java.util.Map<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields>)value);
      }
      break;

    case REQUIRED_FIELDS:
      if (value == null) {
        unsetRequiredFields();
      } else {
        setRequiredFields((net.morimekta.test.thrift.serialization.common.RequiredFields)value);
      }
      break;

    case DEFAULT_FIELDS:
      if (value == null) {
        unsetDefaultFields();
      } else {
        setDefaultFields((net.morimekta.test.thrift.serialization.common.DefaultFields)value);
      }
      break;

    case OPTIONAL_FIELDS:
      if (value == null) {
        unsetOptionalFields();
      } else {
        setOptionalFields((net.morimekta.test.thrift.serialization.common.OptionalFields)value);
      }
      break;

    case UNION_FIELDS:
      if (value == null) {
        unsetUnionFields();
      } else {
        setUnionFields((net.morimekta.test.thrift.serialization.common.UnionFields)value);
      }
      break;

    case EXCEPTION_FIELDS:
      if (value == null) {
        unsetExceptionFields();
      } else {
        setExceptionFields((net.morimekta.test.thrift.serialization.common.ExceptionFields)value);
      }
      break;

    case DEFAULT_VALUES:
      if (value == null) {
        unsetDefaultValues();
      } else {
        setDefaultValues((net.morimekta.test.thrift.serialization.common.DefaultValues)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOLEAN_LIST:
      return getBooleanList();

    case BYTE_LIST:
      return getByteList();

    case SHORT_LIST:
      return getShortList();

    case INTEGER_LIST:
      return getIntegerList();

    case LONG_LIST:
      return getLongList();

    case DOUBLE_LIST:
      return getDoubleList();

    case STRING_LIST:
      return getStringList();

    case BINARY_LIST:
      return getBinaryList();

    case BOOLEAN_SET:
      return getBooleanSet();

    case BYTE_SET:
      return getByteSet();

    case SHORT_SET:
      return getShortSet();

    case INTEGER_SET:
      return getIntegerSet();

    case LONG_SET:
      return getLongSet();

    case DOUBLE_SET:
      return getDoubleSet();

    case STRING_SET:
      return getStringSet();

    case BINARY_SET:
      return getBinarySet();

    case BOOLEAN_MAP:
      return getBooleanMap();

    case BYTE_MAP:
      return getByteMap();

    case SHORT_MAP:
      return getShortMap();

    case INTEGER_MAP:
      return getIntegerMap();

    case LONG_MAP:
      return getLongMap();

    case DOUBLE_MAP:
      return getDoubleMap();

    case STRING_MAP:
      return getStringMap();

    case BINARY_MAP:
      return getBinaryMap();

    case ENUM_LIST:
      return getEnumList();

    case ENUM_SET:
      return getEnumSet();

    case ENUM_MAP:
      return getEnumMap();

    case MESSAGE_LIST:
      return getMessageList();

    case MESSAGE_SET:
      return getMessageSet();

    case MESSAGE_MAP:
      return getMessageMap();

    case REQUIRED_FIELDS:
      return getRequiredFields();

    case DEFAULT_FIELDS:
      return getDefaultFields();

    case OPTIONAL_FIELDS:
      return getOptionalFields();

    case UNION_FIELDS:
      return getUnionFields();

    case EXCEPTION_FIELDS:
      return getExceptionFields();

    case DEFAULT_VALUES:
      return getDefaultValues();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOOLEAN_LIST:
      return isSetBooleanList();
    case BYTE_LIST:
      return isSetByteList();
    case SHORT_LIST:
      return isSetShortList();
    case INTEGER_LIST:
      return isSetIntegerList();
    case LONG_LIST:
      return isSetLongList();
    case DOUBLE_LIST:
      return isSetDoubleList();
    case STRING_LIST:
      return isSetStringList();
    case BINARY_LIST:
      return isSetBinaryList();
    case BOOLEAN_SET:
      return isSetBooleanSet();
    case BYTE_SET:
      return isSetByteSet();
    case SHORT_SET:
      return isSetShortSet();
    case INTEGER_SET:
      return isSetIntegerSet();
    case LONG_SET:
      return isSetLongSet();
    case DOUBLE_SET:
      return isSetDoubleSet();
    case STRING_SET:
      return isSetStringSet();
    case BINARY_SET:
      return isSetBinarySet();
    case BOOLEAN_MAP:
      return isSetBooleanMap();
    case BYTE_MAP:
      return isSetByteMap();
    case SHORT_MAP:
      return isSetShortMap();
    case INTEGER_MAP:
      return isSetIntegerMap();
    case LONG_MAP:
      return isSetLongMap();
    case DOUBLE_MAP:
      return isSetDoubleMap();
    case STRING_MAP:
      return isSetStringMap();
    case BINARY_MAP:
      return isSetBinaryMap();
    case ENUM_LIST:
      return isSetEnumList();
    case ENUM_SET:
      return isSetEnumSet();
    case ENUM_MAP:
      return isSetEnumMap();
    case MESSAGE_LIST:
      return isSetMessageList();
    case MESSAGE_SET:
      return isSetMessageSet();
    case MESSAGE_MAP:
      return isSetMessageMap();
    case REQUIRED_FIELDS:
      return isSetRequiredFields();
    case DEFAULT_FIELDS:
      return isSetDefaultFields();
    case OPTIONAL_FIELDS:
      return isSetOptionalFields();
    case UNION_FIELDS:
      return isSetUnionFields();
    case EXCEPTION_FIELDS:
      return isSetExceptionFields();
    case DEFAULT_VALUES:
      return isSetDefaultValues();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ManyContainers)
      return this.equals((ManyContainers)that);
    return false;
  }

  public boolean equals(ManyContainers that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_booleanList = true && this.isSetBooleanList();
    boolean that_present_booleanList = true && that.isSetBooleanList();
    if (this_present_booleanList || that_present_booleanList) {
      if (!(this_present_booleanList && that_present_booleanList))
        return false;
      if (!this.booleanList.equals(that.booleanList))
        return false;
    }

    boolean this_present_byteList = true && this.isSetByteList();
    boolean that_present_byteList = true && that.isSetByteList();
    if (this_present_byteList || that_present_byteList) {
      if (!(this_present_byteList && that_present_byteList))
        return false;
      if (!this.byteList.equals(that.byteList))
        return false;
    }

    boolean this_present_shortList = true && this.isSetShortList();
    boolean that_present_shortList = true && that.isSetShortList();
    if (this_present_shortList || that_present_shortList) {
      if (!(this_present_shortList && that_present_shortList))
        return false;
      if (!this.shortList.equals(that.shortList))
        return false;
    }

    boolean this_present_integerList = true && this.isSetIntegerList();
    boolean that_present_integerList = true && that.isSetIntegerList();
    if (this_present_integerList || that_present_integerList) {
      if (!(this_present_integerList && that_present_integerList))
        return false;
      if (!this.integerList.equals(that.integerList))
        return false;
    }

    boolean this_present_longList = true && this.isSetLongList();
    boolean that_present_longList = true && that.isSetLongList();
    if (this_present_longList || that_present_longList) {
      if (!(this_present_longList && that_present_longList))
        return false;
      if (!this.longList.equals(that.longList))
        return false;
    }

    boolean this_present_doubleList = true && this.isSetDoubleList();
    boolean that_present_doubleList = true && that.isSetDoubleList();
    if (this_present_doubleList || that_present_doubleList) {
      if (!(this_present_doubleList && that_present_doubleList))
        return false;
      if (!this.doubleList.equals(that.doubleList))
        return false;
    }

    boolean this_present_stringList = true && this.isSetStringList();
    boolean that_present_stringList = true && that.isSetStringList();
    if (this_present_stringList || that_present_stringList) {
      if (!(this_present_stringList && that_present_stringList))
        return false;
      if (!this.stringList.equals(that.stringList))
        return false;
    }

    boolean this_present_binaryList = true && this.isSetBinaryList();
    boolean that_present_binaryList = true && that.isSetBinaryList();
    if (this_present_binaryList || that_present_binaryList) {
      if (!(this_present_binaryList && that_present_binaryList))
        return false;
      if (!this.binaryList.equals(that.binaryList))
        return false;
    }

    boolean this_present_booleanSet = true && this.isSetBooleanSet();
    boolean that_present_booleanSet = true && that.isSetBooleanSet();
    if (this_present_booleanSet || that_present_booleanSet) {
      if (!(this_present_booleanSet && that_present_booleanSet))
        return false;
      if (!this.booleanSet.equals(that.booleanSet))
        return false;
    }

    boolean this_present_byteSet = true && this.isSetByteSet();
    boolean that_present_byteSet = true && that.isSetByteSet();
    if (this_present_byteSet || that_present_byteSet) {
      if (!(this_present_byteSet && that_present_byteSet))
        return false;
      if (!this.byteSet.equals(that.byteSet))
        return false;
    }

    boolean this_present_shortSet = true && this.isSetShortSet();
    boolean that_present_shortSet = true && that.isSetShortSet();
    if (this_present_shortSet || that_present_shortSet) {
      if (!(this_present_shortSet && that_present_shortSet))
        return false;
      if (!this.shortSet.equals(that.shortSet))
        return false;
    }

    boolean this_present_integerSet = true && this.isSetIntegerSet();
    boolean that_present_integerSet = true && that.isSetIntegerSet();
    if (this_present_integerSet || that_present_integerSet) {
      if (!(this_present_integerSet && that_present_integerSet))
        return false;
      if (!this.integerSet.equals(that.integerSet))
        return false;
    }

    boolean this_present_longSet = true && this.isSetLongSet();
    boolean that_present_longSet = true && that.isSetLongSet();
    if (this_present_longSet || that_present_longSet) {
      if (!(this_present_longSet && that_present_longSet))
        return false;
      if (!this.longSet.equals(that.longSet))
        return false;
    }

    boolean this_present_doubleSet = true && this.isSetDoubleSet();
    boolean that_present_doubleSet = true && that.isSetDoubleSet();
    if (this_present_doubleSet || that_present_doubleSet) {
      if (!(this_present_doubleSet && that_present_doubleSet))
        return false;
      if (!this.doubleSet.equals(that.doubleSet))
        return false;
    }

    boolean this_present_stringSet = true && this.isSetStringSet();
    boolean that_present_stringSet = true && that.isSetStringSet();
    if (this_present_stringSet || that_present_stringSet) {
      if (!(this_present_stringSet && that_present_stringSet))
        return false;
      if (!this.stringSet.equals(that.stringSet))
        return false;
    }

    boolean this_present_binarySet = true && this.isSetBinarySet();
    boolean that_present_binarySet = true && that.isSetBinarySet();
    if (this_present_binarySet || that_present_binarySet) {
      if (!(this_present_binarySet && that_present_binarySet))
        return false;
      if (!this.binarySet.equals(that.binarySet))
        return false;
    }

    boolean this_present_booleanMap = true && this.isSetBooleanMap();
    boolean that_present_booleanMap = true && that.isSetBooleanMap();
    if (this_present_booleanMap || that_present_booleanMap) {
      if (!(this_present_booleanMap && that_present_booleanMap))
        return false;
      if (!this.booleanMap.equals(that.booleanMap))
        return false;
    }

    boolean this_present_byteMap = true && this.isSetByteMap();
    boolean that_present_byteMap = true && that.isSetByteMap();
    if (this_present_byteMap || that_present_byteMap) {
      if (!(this_present_byteMap && that_present_byteMap))
        return false;
      if (!this.byteMap.equals(that.byteMap))
        return false;
    }

    boolean this_present_shortMap = true && this.isSetShortMap();
    boolean that_present_shortMap = true && that.isSetShortMap();
    if (this_present_shortMap || that_present_shortMap) {
      if (!(this_present_shortMap && that_present_shortMap))
        return false;
      if (!this.shortMap.equals(that.shortMap))
        return false;
    }

    boolean this_present_integerMap = true && this.isSetIntegerMap();
    boolean that_present_integerMap = true && that.isSetIntegerMap();
    if (this_present_integerMap || that_present_integerMap) {
      if (!(this_present_integerMap && that_present_integerMap))
        return false;
      if (!this.integerMap.equals(that.integerMap))
        return false;
    }

    boolean this_present_longMap = true && this.isSetLongMap();
    boolean that_present_longMap = true && that.isSetLongMap();
    if (this_present_longMap || that_present_longMap) {
      if (!(this_present_longMap && that_present_longMap))
        return false;
      if (!this.longMap.equals(that.longMap))
        return false;
    }

    boolean this_present_doubleMap = true && this.isSetDoubleMap();
    boolean that_present_doubleMap = true && that.isSetDoubleMap();
    if (this_present_doubleMap || that_present_doubleMap) {
      if (!(this_present_doubleMap && that_present_doubleMap))
        return false;
      if (!this.doubleMap.equals(that.doubleMap))
        return false;
    }

    boolean this_present_stringMap = true && this.isSetStringMap();
    boolean that_present_stringMap = true && that.isSetStringMap();
    if (this_present_stringMap || that_present_stringMap) {
      if (!(this_present_stringMap && that_present_stringMap))
        return false;
      if (!this.stringMap.equals(that.stringMap))
        return false;
    }

    boolean this_present_binaryMap = true && this.isSetBinaryMap();
    boolean that_present_binaryMap = true && that.isSetBinaryMap();
    if (this_present_binaryMap || that_present_binaryMap) {
      if (!(this_present_binaryMap && that_present_binaryMap))
        return false;
      if (!this.binaryMap.equals(that.binaryMap))
        return false;
    }

    boolean this_present_enumList = true && this.isSetEnumList();
    boolean that_present_enumList = true && that.isSetEnumList();
    if (this_present_enumList || that_present_enumList) {
      if (!(this_present_enumList && that_present_enumList))
        return false;
      if (!this.enumList.equals(that.enumList))
        return false;
    }

    boolean this_present_enumSet = true && this.isSetEnumSet();
    boolean that_present_enumSet = true && that.isSetEnumSet();
    if (this_present_enumSet || that_present_enumSet) {
      if (!(this_present_enumSet && that_present_enumSet))
        return false;
      if (!this.enumSet.equals(that.enumSet))
        return false;
    }

    boolean this_present_enumMap = true && this.isSetEnumMap();
    boolean that_present_enumMap = true && that.isSetEnumMap();
    if (this_present_enumMap || that_present_enumMap) {
      if (!(this_present_enumMap && that_present_enumMap))
        return false;
      if (!this.enumMap.equals(that.enumMap))
        return false;
    }

    boolean this_present_messageList = true && this.isSetMessageList();
    boolean that_present_messageList = true && that.isSetMessageList();
    if (this_present_messageList || that_present_messageList) {
      if (!(this_present_messageList && that_present_messageList))
        return false;
      if (!this.messageList.equals(that.messageList))
        return false;
    }

    boolean this_present_messageSet = true && this.isSetMessageSet();
    boolean that_present_messageSet = true && that.isSetMessageSet();
    if (this_present_messageSet || that_present_messageSet) {
      if (!(this_present_messageSet && that_present_messageSet))
        return false;
      if (!this.messageSet.equals(that.messageSet))
        return false;
    }

    boolean this_present_messageMap = true && this.isSetMessageMap();
    boolean that_present_messageMap = true && that.isSetMessageMap();
    if (this_present_messageMap || that_present_messageMap) {
      if (!(this_present_messageMap && that_present_messageMap))
        return false;
      if (!this.messageMap.equals(that.messageMap))
        return false;
    }

    boolean this_present_requiredFields = true && this.isSetRequiredFields();
    boolean that_present_requiredFields = true && that.isSetRequiredFields();
    if (this_present_requiredFields || that_present_requiredFields) {
      if (!(this_present_requiredFields && that_present_requiredFields))
        return false;
      if (!this.requiredFields.equals(that.requiredFields))
        return false;
    }

    boolean this_present_defaultFields = true && this.isSetDefaultFields();
    boolean that_present_defaultFields = true && that.isSetDefaultFields();
    if (this_present_defaultFields || that_present_defaultFields) {
      if (!(this_present_defaultFields && that_present_defaultFields))
        return false;
      if (!this.defaultFields.equals(that.defaultFields))
        return false;
    }

    boolean this_present_optionalFields = true && this.isSetOptionalFields();
    boolean that_present_optionalFields = true && that.isSetOptionalFields();
    if (this_present_optionalFields || that_present_optionalFields) {
      if (!(this_present_optionalFields && that_present_optionalFields))
        return false;
      if (!this.optionalFields.equals(that.optionalFields))
        return false;
    }

    boolean this_present_unionFields = true && this.isSetUnionFields();
    boolean that_present_unionFields = true && that.isSetUnionFields();
    if (this_present_unionFields || that_present_unionFields) {
      if (!(this_present_unionFields && that_present_unionFields))
        return false;
      if (!this.unionFields.equals(that.unionFields))
        return false;
    }

    boolean this_present_exceptionFields = true && this.isSetExceptionFields();
    boolean that_present_exceptionFields = true && that.isSetExceptionFields();
    if (this_present_exceptionFields || that_present_exceptionFields) {
      if (!(this_present_exceptionFields && that_present_exceptionFields))
        return false;
      if (!this.exceptionFields.equals(that.exceptionFields))
        return false;
    }

    boolean this_present_defaultValues = true && this.isSetDefaultValues();
    boolean that_present_defaultValues = true && that.isSetDefaultValues();
    if (this_present_defaultValues || that_present_defaultValues) {
      if (!(this_present_defaultValues && that_present_defaultValues))
        return false;
      if (!this.defaultValues.equals(that.defaultValues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBooleanList()) ? 131071 : 524287);
    if (isSetBooleanList())
      hashCode = hashCode * 8191 + booleanList.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteList()) ? 131071 : 524287);
    if (isSetByteList())
      hashCode = hashCode * 8191 + byteList.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortList()) ? 131071 : 524287);
    if (isSetShortList())
      hashCode = hashCode * 8191 + shortList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegerList()) ? 131071 : 524287);
    if (isSetIntegerList())
      hashCode = hashCode * 8191 + integerList.hashCode();

    hashCode = hashCode * 8191 + ((isSetLongList()) ? 131071 : 524287);
    if (isSetLongList())
      hashCode = hashCode * 8191 + longList.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoubleList()) ? 131071 : 524287);
    if (isSetDoubleList())
      hashCode = hashCode * 8191 + doubleList.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringList()) ? 131071 : 524287);
    if (isSetStringList())
      hashCode = hashCode * 8191 + stringList.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinaryList()) ? 131071 : 524287);
    if (isSetBinaryList())
      hashCode = hashCode * 8191 + binaryList.hashCode();

    hashCode = hashCode * 8191 + ((isSetBooleanSet()) ? 131071 : 524287);
    if (isSetBooleanSet())
      hashCode = hashCode * 8191 + booleanSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteSet()) ? 131071 : 524287);
    if (isSetByteSet())
      hashCode = hashCode * 8191 + byteSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortSet()) ? 131071 : 524287);
    if (isSetShortSet())
      hashCode = hashCode * 8191 + shortSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegerSet()) ? 131071 : 524287);
    if (isSetIntegerSet())
      hashCode = hashCode * 8191 + integerSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetLongSet()) ? 131071 : 524287);
    if (isSetLongSet())
      hashCode = hashCode * 8191 + longSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoubleSet()) ? 131071 : 524287);
    if (isSetDoubleSet())
      hashCode = hashCode * 8191 + doubleSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringSet()) ? 131071 : 524287);
    if (isSetStringSet())
      hashCode = hashCode * 8191 + stringSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinarySet()) ? 131071 : 524287);
    if (isSetBinarySet())
      hashCode = hashCode * 8191 + binarySet.hashCode();

    hashCode = hashCode * 8191 + ((isSetBooleanMap()) ? 131071 : 524287);
    if (isSetBooleanMap())
      hashCode = hashCode * 8191 + booleanMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteMap()) ? 131071 : 524287);
    if (isSetByteMap())
      hashCode = hashCode * 8191 + byteMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortMap()) ? 131071 : 524287);
    if (isSetShortMap())
      hashCode = hashCode * 8191 + shortMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegerMap()) ? 131071 : 524287);
    if (isSetIntegerMap())
      hashCode = hashCode * 8191 + integerMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetLongMap()) ? 131071 : 524287);
    if (isSetLongMap())
      hashCode = hashCode * 8191 + longMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoubleMap()) ? 131071 : 524287);
    if (isSetDoubleMap())
      hashCode = hashCode * 8191 + doubleMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringMap()) ? 131071 : 524287);
    if (isSetStringMap())
      hashCode = hashCode * 8191 + stringMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinaryMap()) ? 131071 : 524287);
    if (isSetBinaryMap())
      hashCode = hashCode * 8191 + binaryMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnumList()) ? 131071 : 524287);
    if (isSetEnumList())
      hashCode = hashCode * 8191 + enumList.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnumSet()) ? 131071 : 524287);
    if (isSetEnumSet())
      hashCode = hashCode * 8191 + enumSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnumMap()) ? 131071 : 524287);
    if (isSetEnumMap())
      hashCode = hashCode * 8191 + enumMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageList()) ? 131071 : 524287);
    if (isSetMessageList())
      hashCode = hashCode * 8191 + messageList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageSet()) ? 131071 : 524287);
    if (isSetMessageSet())
      hashCode = hashCode * 8191 + messageSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageMap()) ? 131071 : 524287);
    if (isSetMessageMap())
      hashCode = hashCode * 8191 + messageMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequiredFields()) ? 131071 : 524287);
    if (isSetRequiredFields())
      hashCode = hashCode * 8191 + requiredFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultFields()) ? 131071 : 524287);
    if (isSetDefaultFields())
      hashCode = hashCode * 8191 + defaultFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionalFields()) ? 131071 : 524287);
    if (isSetOptionalFields())
      hashCode = hashCode * 8191 + optionalFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnionFields()) ? 131071 : 524287);
    if (isSetUnionFields())
      hashCode = hashCode * 8191 + unionFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetExceptionFields()) ? 131071 : 524287);
    if (isSetExceptionFields())
      hashCode = hashCode * 8191 + exceptionFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultValues()) ? 131071 : 524287);
    if (isSetDefaultValues())
      hashCode = hashCode * 8191 + defaultValues.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ManyContainers other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBooleanList()).compareTo(other.isSetBooleanList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanList, other.booleanList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetByteList()).compareTo(other.isSetByteList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteList, other.byteList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortList()).compareTo(other.isSetShortList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortList, other.shortList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegerList()).compareTo(other.isSetIntegerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerList, other.integerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongList()).compareTo(other.isSetLongList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longList, other.longList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoubleList()).compareTo(other.isSetDoubleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleList, other.doubleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringList()).compareTo(other.isSetStringList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringList, other.stringList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinaryList()).compareTo(other.isSetBinaryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryList, other.binaryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBooleanSet()).compareTo(other.isSetBooleanSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanSet, other.booleanSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetByteSet()).compareTo(other.isSetByteSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteSet, other.byteSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortSet()).compareTo(other.isSetShortSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortSet, other.shortSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegerSet()).compareTo(other.isSetIntegerSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerSet, other.integerSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongSet()).compareTo(other.isSetLongSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longSet, other.longSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoubleSet()).compareTo(other.isSetDoubleSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleSet, other.doubleSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringSet()).compareTo(other.isSetStringSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringSet, other.stringSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinarySet()).compareTo(other.isSetBinarySet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinarySet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binarySet, other.binarySet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBooleanMap()).compareTo(other.isSetBooleanMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanMap, other.booleanMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetByteMap()).compareTo(other.isSetByteMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteMap, other.byteMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortMap()).compareTo(other.isSetShortMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortMap, other.shortMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegerMap()).compareTo(other.isSetIntegerMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerMap, other.integerMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongMap()).compareTo(other.isSetLongMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMap, other.longMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoubleMap()).compareTo(other.isSetDoubleMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleMap, other.doubleMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringMap()).compareTo(other.isSetStringMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringMap, other.stringMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinaryMap()).compareTo(other.isSetBinaryMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryMap, other.binaryMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnumList()).compareTo(other.isSetEnumList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumList, other.enumList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnumSet()).compareTo(other.isSetEnumSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumSet, other.enumSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnumMap()).compareTo(other.isSetEnumMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumMap, other.enumMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessageList()).compareTo(other.isSetMessageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageList, other.messageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessageSet()).compareTo(other.isSetMessageSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageSet, other.messageSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessageMap()).compareTo(other.isSetMessageMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageMap, other.messageMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequiredFields()).compareTo(other.isSetRequiredFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredFields, other.requiredFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultFields()).compareTo(other.isSetDefaultFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultFields, other.defaultFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptionalFields()).compareTo(other.isSetOptionalFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalFields, other.optionalFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionFields()).compareTo(other.isSetUnionFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionFields, other.unionFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExceptionFields()).compareTo(other.isSetExceptionFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionFields, other.exceptionFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultValues()).compareTo(other.isSetDefaultValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValues, other.defaultValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ManyContainers(");
    boolean first = true;

    if (isSetBooleanList()) {
      sb.append("booleanList:");
      if (this.booleanList == null) {
        sb.append("null");
      } else {
        sb.append(this.booleanList);
      }
      first = false;
    }
    if (isSetByteList()) {
      if (!first) sb.append(", ");
      sb.append("byteList:");
      if (this.byteList == null) {
        sb.append("null");
      } else {
        sb.append(this.byteList);
      }
      first = false;
    }
    if (isSetShortList()) {
      if (!first) sb.append(", ");
      sb.append("shortList:");
      if (this.shortList == null) {
        sb.append("null");
      } else {
        sb.append(this.shortList);
      }
      first = false;
    }
    if (isSetIntegerList()) {
      if (!first) sb.append(", ");
      sb.append("integerList:");
      if (this.integerList == null) {
        sb.append("null");
      } else {
        sb.append(this.integerList);
      }
      first = false;
    }
    if (isSetLongList()) {
      if (!first) sb.append(", ");
      sb.append("longList:");
      if (this.longList == null) {
        sb.append("null");
      } else {
        sb.append(this.longList);
      }
      first = false;
    }
    if (isSetDoubleList()) {
      if (!first) sb.append(", ");
      sb.append("doubleList:");
      if (this.doubleList == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleList);
      }
      first = false;
    }
    if (isSetStringList()) {
      if (!first) sb.append(", ");
      sb.append("stringList:");
      if (this.stringList == null) {
        sb.append("null");
      } else {
        sb.append(this.stringList);
      }
      first = false;
    }
    if (isSetBinaryList()) {
      if (!first) sb.append(", ");
      sb.append("binaryList:");
      if (this.binaryList == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryList, sb);
      }
      first = false;
    }
    if (isSetBooleanSet()) {
      if (!first) sb.append(", ");
      sb.append("booleanSet:");
      if (this.booleanSet == null) {
        sb.append("null");
      } else {
        sb.append(this.booleanSet);
      }
      first = false;
    }
    if (isSetByteSet()) {
      if (!first) sb.append(", ");
      sb.append("byteSet:");
      if (this.byteSet == null) {
        sb.append("null");
      } else {
        sb.append(this.byteSet);
      }
      first = false;
    }
    if (isSetShortSet()) {
      if (!first) sb.append(", ");
      sb.append("shortSet:");
      if (this.shortSet == null) {
        sb.append("null");
      } else {
        sb.append(this.shortSet);
      }
      first = false;
    }
    if (isSetIntegerSet()) {
      if (!first) sb.append(", ");
      sb.append("integerSet:");
      if (this.integerSet == null) {
        sb.append("null");
      } else {
        sb.append(this.integerSet);
      }
      first = false;
    }
    if (isSetLongSet()) {
      if (!first) sb.append(", ");
      sb.append("longSet:");
      if (this.longSet == null) {
        sb.append("null");
      } else {
        sb.append(this.longSet);
      }
      first = false;
    }
    if (isSetDoubleSet()) {
      if (!first) sb.append(", ");
      sb.append("doubleSet:");
      if (this.doubleSet == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleSet);
      }
      first = false;
    }
    if (isSetStringSet()) {
      if (!first) sb.append(", ");
      sb.append("stringSet:");
      if (this.stringSet == null) {
        sb.append("null");
      } else {
        sb.append(this.stringSet);
      }
      first = false;
    }
    if (isSetBinarySet()) {
      if (!first) sb.append(", ");
      sb.append("binarySet:");
      if (this.binarySet == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binarySet, sb);
      }
      first = false;
    }
    if (isSetBooleanMap()) {
      if (!first) sb.append(", ");
      sb.append("booleanMap:");
      if (this.booleanMap == null) {
        sb.append("null");
      } else {
        sb.append(this.booleanMap);
      }
      first = false;
    }
    if (isSetByteMap()) {
      if (!first) sb.append(", ");
      sb.append("byteMap:");
      if (this.byteMap == null) {
        sb.append("null");
      } else {
        sb.append(this.byteMap);
      }
      first = false;
    }
    if (isSetShortMap()) {
      if (!first) sb.append(", ");
      sb.append("shortMap:");
      if (this.shortMap == null) {
        sb.append("null");
      } else {
        sb.append(this.shortMap);
      }
      first = false;
    }
    if (isSetIntegerMap()) {
      if (!first) sb.append(", ");
      sb.append("integerMap:");
      if (this.integerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.integerMap);
      }
      first = false;
    }
    if (isSetLongMap()) {
      if (!first) sb.append(", ");
      sb.append("longMap:");
      if (this.longMap == null) {
        sb.append("null");
      } else {
        sb.append(this.longMap);
      }
      first = false;
    }
    if (isSetDoubleMap()) {
      if (!first) sb.append(", ");
      sb.append("doubleMap:");
      if (this.doubleMap == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleMap);
      }
      first = false;
    }
    if (isSetStringMap()) {
      if (!first) sb.append(", ");
      sb.append("stringMap:");
      if (this.stringMap == null) {
        sb.append("null");
      } else {
        sb.append(this.stringMap);
      }
      first = false;
    }
    if (isSetBinaryMap()) {
      if (!first) sb.append(", ");
      sb.append("binaryMap:");
      if (this.binaryMap == null) {
        sb.append("null");
      } else {
        sb.append(this.binaryMap);
      }
      first = false;
    }
    if (isSetEnumList()) {
      if (!first) sb.append(", ");
      sb.append("enumList:");
      if (this.enumList == null) {
        sb.append("null");
      } else {
        sb.append(this.enumList);
      }
      first = false;
    }
    if (isSetEnumSet()) {
      if (!first) sb.append(", ");
      sb.append("enumSet:");
      if (this.enumSet == null) {
        sb.append("null");
      } else {
        sb.append(this.enumSet);
      }
      first = false;
    }
    if (isSetEnumMap()) {
      if (!first) sb.append(", ");
      sb.append("enumMap:");
      if (this.enumMap == null) {
        sb.append("null");
      } else {
        sb.append(this.enumMap);
      }
      first = false;
    }
    if (isSetMessageList()) {
      if (!first) sb.append(", ");
      sb.append("messageList:");
      if (this.messageList == null) {
        sb.append("null");
      } else {
        sb.append(this.messageList);
      }
      first = false;
    }
    if (isSetMessageSet()) {
      if (!first) sb.append(", ");
      sb.append("messageSet:");
      if (this.messageSet == null) {
        sb.append("null");
      } else {
        sb.append(this.messageSet);
      }
      first = false;
    }
    if (isSetMessageMap()) {
      if (!first) sb.append(", ");
      sb.append("messageMap:");
      if (this.messageMap == null) {
        sb.append("null");
      } else {
        sb.append(this.messageMap);
      }
      first = false;
    }
    if (isSetRequiredFields()) {
      if (!first) sb.append(", ");
      sb.append("requiredFields:");
      if (this.requiredFields == null) {
        sb.append("null");
      } else {
        sb.append(this.requiredFields);
      }
      first = false;
    }
    if (isSetDefaultFields()) {
      if (!first) sb.append(", ");
      sb.append("defaultFields:");
      if (this.defaultFields == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultFields);
      }
      first = false;
    }
    if (isSetOptionalFields()) {
      if (!first) sb.append(", ");
      sb.append("optionalFields:");
      if (this.optionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalFields);
      }
      first = false;
    }
    if (isSetUnionFields()) {
      if (!first) sb.append(", ");
      sb.append("unionFields:");
      if (this.unionFields == null) {
        sb.append("null");
      } else {
        sb.append(this.unionFields);
      }
      first = false;
    }
    if (isSetExceptionFields()) {
      if (!first) sb.append(", ");
      sb.append("exceptionFields:");
      if (this.exceptionFields == null) {
        sb.append("null");
      } else {
        sb.append(this.exceptionFields);
      }
      first = false;
    }
    if (isSetDefaultValues()) {
      if (!first) sb.append(", ");
      sb.append("defaultValues:");
      if (this.defaultValues == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultValues);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (requiredFields != null) {
      requiredFields.validate();
    }
    if (defaultFields != null) {
      defaultFields.validate();
    }
    if (optionalFields != null) {
      optionalFields.validate();
    }
    if (defaultValues != null) {
      defaultValues.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManyContainersStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ManyContainersStandardScheme getScheme() {
      return new ManyContainersStandardScheme();
    }
  }

  private static class ManyContainersStandardScheme extends org.apache.thrift.scheme.StandardScheme<ManyContainers> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ManyContainers struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOLEAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.booleanList = new java.util.ArrayList<java.lang.Boolean>(_list0.size);
                boolean _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBool();
                  struct.booleanList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBooleanListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.byteList = new java.util.ArrayList<java.lang.Byte>(_list3.size);
                byte _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readByte();
                  struct.byteList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setByteListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHORT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.shortList = new java.util.ArrayList<java.lang.Short>(_list6.size);
                short _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI16();
                  struct.shortList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setShortListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTEGER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.integerList = new java.util.ArrayList<java.lang.Integer>(_list9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.integerList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setIntegerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.longList = new java.util.ArrayList<java.lang.Long>(_list12.size);
                long _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readI64();
                  struct.longList.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setLongListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.doubleList = new java.util.ArrayList<java.lang.Double>(_list15.size);
                double _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readDouble();
                  struct.doubleList.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setDoubleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.stringList = new java.util.ArrayList<java.lang.String>(_list18.size);
                java.lang.String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.stringList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setStringListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BINARY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.binaryList = new java.util.ArrayList<java.nio.ByteBuffer>(_list21.size);
                java.nio.ByteBuffer _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = iprot.readBinary();
                  struct.binaryList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setBinaryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BOOLEAN_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.booleanSet = new java.util.HashSet<java.lang.Boolean>(2*_set24.size);
                boolean _elem25;
                for (int _i26 = 0; _i26 < _set24.size; ++_i26)
                {
                  _elem25 = iprot.readBool();
                  struct.booleanSet.add(_elem25);
                }
                iprot.readSetEnd();
              }
              struct.setBooleanSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BYTE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                struct.byteSet = new java.util.HashSet<java.lang.Byte>(2*_set27.size);
                byte _elem28;
                for (int _i29 = 0; _i29 < _set27.size; ++_i29)
                {
                  _elem28 = iprot.readByte();
                  struct.byteSet.add(_elem28);
                }
                iprot.readSetEnd();
              }
              struct.setByteSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHORT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                struct.shortSet = new java.util.HashSet<java.lang.Short>(2*_set30.size);
                short _elem31;
                for (int _i32 = 0; _i32 < _set30.size; ++_i32)
                {
                  _elem31 = iprot.readI16();
                  struct.shortSet.add(_elem31);
                }
                iprot.readSetEnd();
              }
              struct.setShortSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INTEGER_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set33 = iprot.readSetBegin();
                struct.integerSet = new java.util.HashSet<java.lang.Integer>(2*_set33.size);
                int _elem34;
                for (int _i35 = 0; _i35 < _set33.size; ++_i35)
                {
                  _elem34 = iprot.readI32();
                  struct.integerSet.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setIntegerSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LONG_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set36 = iprot.readSetBegin();
                struct.longSet = new java.util.HashSet<java.lang.Long>(2*_set36.size);
                long _elem37;
                for (int _i38 = 0; _i38 < _set36.size; ++_i38)
                {
                  _elem37 = iprot.readI64();
                  struct.longSet.add(_elem37);
                }
                iprot.readSetEnd();
              }
              struct.setLongSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DOUBLE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set39 = iprot.readSetBegin();
                struct.doubleSet = new java.util.HashSet<java.lang.Double>(2*_set39.size);
                double _elem40;
                for (int _i41 = 0; _i41 < _set39.size; ++_i41)
                {
                  _elem40 = iprot.readDouble();
                  struct.doubleSet.add(_elem40);
                }
                iprot.readSetEnd();
              }
              struct.setDoubleSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STRING_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set42 = iprot.readSetBegin();
                struct.stringSet = new java.util.HashSet<java.lang.String>(2*_set42.size);
                java.lang.String _elem43;
                for (int _i44 = 0; _i44 < _set42.size; ++_i44)
                {
                  _elem43 = iprot.readString();
                  struct.stringSet.add(_elem43);
                }
                iprot.readSetEnd();
              }
              struct.setStringSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BINARY_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set45 = iprot.readSetBegin();
                struct.binarySet = new java.util.HashSet<java.nio.ByteBuffer>(2*_set45.size);
                java.nio.ByteBuffer _elem46;
                for (int _i47 = 0; _i47 < _set45.size; ++_i47)
                {
                  _elem46 = iprot.readBinary();
                  struct.binarySet.add(_elem46);
                }
                iprot.readSetEnd();
              }
              struct.setBinarySetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BOOLEAN_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.booleanMap = new java.util.HashMap<java.lang.Boolean,java.lang.Boolean>(2*_map48.size);
                boolean _key49;
                boolean _val50;
                for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                {
                  _key49 = iprot.readBool();
                  _val50 = iprot.readBool();
                  struct.booleanMap.put(_key49, _val50);
                }
                iprot.readMapEnd();
              }
              struct.setBooleanMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BYTE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                struct.byteMap = new java.util.HashMap<java.lang.Byte,java.lang.Byte>(2*_map52.size);
                byte _key53;
                byte _val54;
                for (int _i55 = 0; _i55 < _map52.size; ++_i55)
                {
                  _key53 = iprot.readByte();
                  _val54 = iprot.readByte();
                  struct.byteMap.put(_key53, _val54);
                }
                iprot.readMapEnd();
              }
              struct.setByteMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SHORT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                struct.shortMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map56.size);
                short _key57;
                short _val58;
                for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                {
                  _key57 = iprot.readI16();
                  _val58 = iprot.readI16();
                  struct.shortMap.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setShortMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // INTEGER_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                struct.integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map60.size);
                int _key61;
                int _val62;
                for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                {
                  _key61 = iprot.readI32();
                  _val62 = iprot.readI32();
                  struct.integerMap.put(_key61, _val62);
                }
                iprot.readMapEnd();
              }
              struct.setIntegerMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LONG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.longMap = new java.util.HashMap<java.lang.Long,java.lang.Long>(2*_map64.size);
                long _key65;
                long _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readI64();
                  _val66 = iprot.readI64();
                  struct.longMap.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setLongMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DOUBLE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                struct.doubleMap = new java.util.HashMap<java.lang.Double,java.lang.Double>(2*_map68.size);
                double _key69;
                double _val70;
                for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                {
                  _key69 = iprot.readDouble();
                  _val70 = iprot.readDouble();
                  struct.doubleMap.put(_key69, _val70);
                }
                iprot.readMapEnd();
              }
              struct.setDoubleMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // STRING_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                struct.stringMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map72.size);
                java.lang.String _key73;
                java.lang.String _val74;
                for (int _i75 = 0; _i75 < _map72.size; ++_i75)
                {
                  _key73 = iprot.readString();
                  _val74 = iprot.readString();
                  struct.stringMap.put(_key73, _val74);
                }
                iprot.readMapEnd();
              }
              struct.setStringMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // BINARY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                struct.binaryMap = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(2*_map76.size);
                java.nio.ByteBuffer _key77;
                java.nio.ByteBuffer _val78;
                for (int _i79 = 0; _i79 < _map76.size; ++_i79)
                {
                  _key77 = iprot.readBinary();
                  _val78 = iprot.readBinary();
                  struct.binaryMap.put(_key77, _val78);
                }
                iprot.readMapEnd();
              }
              struct.setBinaryMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ENUM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.enumList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.Value>(_list80.size);
                net.morimekta.test.thrift.serialization.common.Value _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
                  struct.enumList.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setEnumListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ENUM_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set83 = iprot.readSetBegin();
                struct.enumSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.Value>(2*_set83.size);
                net.morimekta.test.thrift.serialization.common.Value _elem84;
                for (int _i85 = 0; _i85 < _set83.size; ++_i85)
                {
                  _elem84 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
                  struct.enumSet.add(_elem84);
                }
                iprot.readSetEnd();
              }
              struct.setEnumSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ENUM_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                struct.enumMap = new java.util.HashMap<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value>(2*_map86.size);
                net.morimekta.test.thrift.serialization.common.Value _key87;
                net.morimekta.test.thrift.serialization.common.Value _val88;
                for (int _i89 = 0; _i89 < _map86.size; ++_i89)
                {
                  _key87 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
                  _val88 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
                  struct.enumMap.put(_key87, _val88);
                }
                iprot.readMapEnd();
              }
              struct.setEnumMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // MESSAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.messageList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.DefaultFields>(_list90.size);
                net.morimekta.test.thrift.serialization.common.DefaultFields _elem91;
                for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                {
                  _elem91 = new net.morimekta.test.thrift.serialization.common.DefaultFields();
                  _elem91.read(iprot);
                  struct.messageList.add(_elem91);
                }
                iprot.readListEnd();
              }
              struct.setMessageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // MESSAGE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set93 = iprot.readSetBegin();
                struct.messageSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.DefaultFields>(2*_set93.size);
                net.morimekta.test.thrift.serialization.common.DefaultFields _elem94;
                for (int _i95 = 0; _i95 < _set93.size; ++_i95)
                {
                  _elem94 = new net.morimekta.test.thrift.serialization.common.DefaultFields();
                  _elem94.read(iprot);
                  struct.messageSet.add(_elem94);
                }
                iprot.readSetEnd();
              }
              struct.setMessageSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // MESSAGE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                struct.messageMap = new java.util.HashMap<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields>(2*_map96.size);
                java.lang.String _key97;
                net.morimekta.test.thrift.serialization.common.DefaultFields _val98;
                for (int _i99 = 0; _i99 < _map96.size; ++_i99)
                {
                  _key97 = iprot.readString();
                  _val98 = new net.morimekta.test.thrift.serialization.common.DefaultFields();
                  _val98.read(iprot);
                  struct.messageMap.put(_key97, _val98);
                }
                iprot.readMapEnd();
              }
              struct.setMessageMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // REQUIRED_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields();
              struct.requiredFields.read(iprot);
              struct.setRequiredFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // DEFAULT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields();
              struct.defaultFields.read(iprot);
              struct.setDefaultFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // OPTIONAL_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields();
              struct.optionalFields.read(iprot);
              struct.setOptionalFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // UNION_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields();
              struct.unionFields.read(iprot);
              struct.setUnionFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // EXCEPTION_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exceptionFields = new net.morimekta.test.thrift.serialization.common.ExceptionFields();
              struct.exceptionFields.read(iprot);
              struct.setExceptionFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DEFAULT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues();
              struct.defaultValues.read(iprot);
              struct.setDefaultValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ManyContainers struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.booleanList != null) {
        if (struct.isSetBooleanList()) {
          oprot.writeFieldBegin(BOOLEAN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.booleanList.size()));
            for (boolean _iter100 : struct.booleanList)
            {
              oprot.writeBool(_iter100);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.byteList != null) {
        if (struct.isSetByteList()) {
          oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteList.size()));
            for (byte _iter101 : struct.byteList)
            {
              oprot.writeByte(_iter101);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortList != null) {
        if (struct.isSetShortList()) {
          oprot.writeFieldBegin(SHORT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortList.size()));
            for (short _iter102 : struct.shortList)
            {
              oprot.writeI16(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.integerList != null) {
        if (struct.isSetIntegerList()) {
          oprot.writeFieldBegin(INTEGER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.integerList.size()));
            for (int _iter103 : struct.integerList)
            {
              oprot.writeI32(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.longList != null) {
        if (struct.isSetLongList()) {
          oprot.writeFieldBegin(LONG_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.longList.size()));
            for (long _iter104 : struct.longList)
            {
              oprot.writeI64(_iter104);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleList != null) {
        if (struct.isSetDoubleList()) {
          oprot.writeFieldBegin(DOUBLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleList.size()));
            for (double _iter105 : struct.doubleList)
            {
              oprot.writeDouble(_iter105);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stringList != null) {
        if (struct.isSetStringList()) {
          oprot.writeFieldBegin(STRING_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringList.size()));
            for (java.lang.String _iter106 : struct.stringList)
            {
              oprot.writeString(_iter106);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryList != null) {
        if (struct.isSetBinaryList()) {
          oprot.writeFieldBegin(BINARY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binaryList.size()));
            for (java.nio.ByteBuffer _iter107 : struct.binaryList)
            {
              oprot.writeBinary(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.booleanSet != null) {
        if (struct.isSetBooleanSet()) {
          oprot.writeFieldBegin(BOOLEAN_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, struct.booleanSet.size()));
            for (boolean _iter108 : struct.booleanSet)
            {
              oprot.writeBool(_iter108);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.byteSet != null) {
        if (struct.isSetByteSet()) {
          oprot.writeFieldBegin(BYTE_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.byteSet.size()));
            for (byte _iter109 : struct.byteSet)
            {
              oprot.writeByte(_iter109);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortSet != null) {
        if (struct.isSetShortSet()) {
          oprot.writeFieldBegin(SHORT_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, struct.shortSet.size()));
            for (short _iter110 : struct.shortSet)
            {
              oprot.writeI16(_iter110);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.integerSet != null) {
        if (struct.isSetIntegerSet()) {
          oprot.writeFieldBegin(INTEGER_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.integerSet.size()));
            for (int _iter111 : struct.integerSet)
            {
              oprot.writeI32(_iter111);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.longSet != null) {
        if (struct.isSetLongSet()) {
          oprot.writeFieldBegin(LONG_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.longSet.size()));
            for (long _iter112 : struct.longSet)
            {
              oprot.writeI64(_iter112);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleSet != null) {
        if (struct.isSetDoubleSet()) {
          oprot.writeFieldBegin(DOUBLE_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleSet.size()));
            for (double _iter113 : struct.doubleSet)
            {
              oprot.writeDouble(_iter113);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stringSet != null) {
        if (struct.isSetStringSet()) {
          oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.stringSet.size()));
            for (java.lang.String _iter114 : struct.stringSet)
            {
              oprot.writeString(_iter114);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binarySet != null) {
        if (struct.isSetBinarySet()) {
          oprot.writeFieldBegin(BINARY_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.binarySet.size()));
            for (java.nio.ByteBuffer _iter115 : struct.binarySet)
            {
              oprot.writeBinary(_iter115);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.booleanMap != null) {
        if (struct.isSetBooleanMap()) {
          oprot.writeFieldBegin(BOOLEAN_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BOOL, org.apache.thrift.protocol.TType.BOOL, struct.booleanMap.size()));
            for (java.util.Map.Entry<java.lang.Boolean, java.lang.Boolean> _iter116 : struct.booleanMap.entrySet())
            {
              oprot.writeBool(_iter116.getKey());
              oprot.writeBool(_iter116.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.byteMap != null) {
        if (struct.isSetByteMap()) {
          oprot.writeFieldBegin(BYTE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, struct.byteMap.size()));
            for (java.util.Map.Entry<java.lang.Byte, java.lang.Byte> _iter117 : struct.byteMap.entrySet())
            {
              oprot.writeByte(_iter117.getKey());
              oprot.writeByte(_iter117.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortMap != null) {
        if (struct.isSetShortMap()) {
          oprot.writeFieldBegin(SHORT_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.shortMap.size()));
            for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter118 : struct.shortMap.entrySet())
            {
              oprot.writeI16(_iter118.getKey());
              oprot.writeI16(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.integerMap != null) {
        if (struct.isSetIntegerMap()) {
          oprot.writeFieldBegin(INTEGER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.integerMap.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter119 : struct.integerMap.entrySet())
            {
              oprot.writeI32(_iter119.getKey());
              oprot.writeI32(_iter119.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.longMap != null) {
        if (struct.isSetLongMap()) {
          oprot.writeFieldBegin(LONG_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, struct.longMap.size()));
            for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter120 : struct.longMap.entrySet())
            {
              oprot.writeI64(_iter120.getKey());
              oprot.writeI64(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleMap != null) {
        if (struct.isSetDoubleMap()) {
          oprot.writeFieldBegin(DOUBLE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.DOUBLE, struct.doubleMap.size()));
            for (java.util.Map.Entry<java.lang.Double, java.lang.Double> _iter121 : struct.doubleMap.entrySet())
            {
              oprot.writeDouble(_iter121.getKey());
              oprot.writeDouble(_iter121.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stringMap != null) {
        if (struct.isSetStringMap()) {
          oprot.writeFieldBegin(STRING_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stringMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter122 : struct.stringMap.entrySet())
            {
              oprot.writeString(_iter122.getKey());
              oprot.writeString(_iter122.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryMap != null) {
        if (struct.isSetBinaryMap()) {
          oprot.writeFieldBegin(BINARY_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.binaryMap.size()));
            for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> _iter123 : struct.binaryMap.entrySet())
            {
              oprot.writeBinary(_iter123.getKey());
              oprot.writeBinary(_iter123.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.enumList != null) {
        if (struct.isSetEnumList()) {
          oprot.writeFieldBegin(ENUM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.enumList.size()));
            for (net.morimekta.test.thrift.serialization.common.Value _iter124 : struct.enumList)
            {
              oprot.writeI32(_iter124.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.enumSet != null) {
        if (struct.isSetEnumSet()) {
          oprot.writeFieldBegin(ENUM_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.enumSet.size()));
            for (net.morimekta.test.thrift.serialization.common.Value _iter125 : struct.enumSet)
            {
              oprot.writeI32(_iter125.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.enumMap != null) {
        if (struct.isSetEnumMap()) {
          oprot.writeFieldBegin(ENUM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.enumMap.size()));
            for (java.util.Map.Entry<net.morimekta.test.thrift.serialization.common.Value, net.morimekta.test.thrift.serialization.common.Value> _iter126 : struct.enumMap.entrySet())
            {
              oprot.writeI32(_iter126.getKey().getValue());
              oprot.writeI32(_iter126.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageList != null) {
        if (struct.isSetMessageList()) {
          oprot.writeFieldBegin(MESSAGE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messageList.size()));
            for (net.morimekta.test.thrift.serialization.common.DefaultFields _iter127 : struct.messageList)
            {
              _iter127.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageSet != null) {
        if (struct.isSetMessageSet()) {
          oprot.writeFieldBegin(MESSAGE_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.messageSet.size()));
            for (net.morimekta.test.thrift.serialization.common.DefaultFields _iter128 : struct.messageSet)
            {
              _iter128.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageMap != null) {
        if (struct.isSetMessageMap()) {
          oprot.writeFieldBegin(MESSAGE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.messageMap.size()));
            for (java.util.Map.Entry<java.lang.String, net.morimekta.test.thrift.serialization.common.DefaultFields> _iter129 : struct.messageMap.entrySet())
            {
              oprot.writeString(_iter129.getKey());
              _iter129.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requiredFields != null) {
        if (struct.isSetRequiredFields()) {
          oprot.writeFieldBegin(REQUIRED_FIELDS_FIELD_DESC);
          struct.requiredFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultFields != null) {
        if (struct.isSetDefaultFields()) {
          oprot.writeFieldBegin(DEFAULT_FIELDS_FIELD_DESC);
          struct.defaultFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.optionalFields != null) {
        if (struct.isSetOptionalFields()) {
          oprot.writeFieldBegin(OPTIONAL_FIELDS_FIELD_DESC);
          struct.optionalFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unionFields != null) {
        if (struct.isSetUnionFields()) {
          oprot.writeFieldBegin(UNION_FIELDS_FIELD_DESC);
          struct.unionFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exceptionFields != null) {
        if (struct.isSetExceptionFields()) {
          oprot.writeFieldBegin(EXCEPTION_FIELDS_FIELD_DESC);
          struct.exceptionFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultValues != null) {
        if (struct.isSetDefaultValues()) {
          oprot.writeFieldBegin(DEFAULT_VALUES_FIELD_DESC);
          struct.defaultValues.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManyContainersTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ManyContainersTupleScheme getScheme() {
      return new ManyContainersTupleScheme();
    }
  }

  private static class ManyContainersTupleScheme extends org.apache.thrift.scheme.TupleScheme<ManyContainers> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ManyContainers struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBooleanList()) {
        optionals.set(0);
      }
      if (struct.isSetByteList()) {
        optionals.set(1);
      }
      if (struct.isSetShortList()) {
        optionals.set(2);
      }
      if (struct.isSetIntegerList()) {
        optionals.set(3);
      }
      if (struct.isSetLongList()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleList()) {
        optionals.set(5);
      }
      if (struct.isSetStringList()) {
        optionals.set(6);
      }
      if (struct.isSetBinaryList()) {
        optionals.set(7);
      }
      if (struct.isSetBooleanSet()) {
        optionals.set(8);
      }
      if (struct.isSetByteSet()) {
        optionals.set(9);
      }
      if (struct.isSetShortSet()) {
        optionals.set(10);
      }
      if (struct.isSetIntegerSet()) {
        optionals.set(11);
      }
      if (struct.isSetLongSet()) {
        optionals.set(12);
      }
      if (struct.isSetDoubleSet()) {
        optionals.set(13);
      }
      if (struct.isSetStringSet()) {
        optionals.set(14);
      }
      if (struct.isSetBinarySet()) {
        optionals.set(15);
      }
      if (struct.isSetBooleanMap()) {
        optionals.set(16);
      }
      if (struct.isSetByteMap()) {
        optionals.set(17);
      }
      if (struct.isSetShortMap()) {
        optionals.set(18);
      }
      if (struct.isSetIntegerMap()) {
        optionals.set(19);
      }
      if (struct.isSetLongMap()) {
        optionals.set(20);
      }
      if (struct.isSetDoubleMap()) {
        optionals.set(21);
      }
      if (struct.isSetStringMap()) {
        optionals.set(22);
      }
      if (struct.isSetBinaryMap()) {
        optionals.set(23);
      }
      if (struct.isSetEnumList()) {
        optionals.set(24);
      }
      if (struct.isSetEnumSet()) {
        optionals.set(25);
      }
      if (struct.isSetEnumMap()) {
        optionals.set(26);
      }
      if (struct.isSetMessageList()) {
        optionals.set(27);
      }
      if (struct.isSetMessageSet()) {
        optionals.set(28);
      }
      if (struct.isSetMessageMap()) {
        optionals.set(29);
      }
      if (struct.isSetRequiredFields()) {
        optionals.set(30);
      }
      if (struct.isSetDefaultFields()) {
        optionals.set(31);
      }
      if (struct.isSetOptionalFields()) {
        optionals.set(32);
      }
      if (struct.isSetUnionFields()) {
        optionals.set(33);
      }
      if (struct.isSetExceptionFields()) {
        optionals.set(34);
      }
      if (struct.isSetDefaultValues()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetBooleanList()) {
        {
          oprot.writeI32(struct.booleanList.size());
          for (boolean _iter130 : struct.booleanList)
          {
            oprot.writeBool(_iter130);
          }
        }
      }
      if (struct.isSetByteList()) {
        {
          oprot.writeI32(struct.byteList.size());
          for (byte _iter131 : struct.byteList)
          {
            oprot.writeByte(_iter131);
          }
        }
      }
      if (struct.isSetShortList()) {
        {
          oprot.writeI32(struct.shortList.size());
          for (short _iter132 : struct.shortList)
          {
            oprot.writeI16(_iter132);
          }
        }
      }
      if (struct.isSetIntegerList()) {
        {
          oprot.writeI32(struct.integerList.size());
          for (int _iter133 : struct.integerList)
          {
            oprot.writeI32(_iter133);
          }
        }
      }
      if (struct.isSetLongList()) {
        {
          oprot.writeI32(struct.longList.size());
          for (long _iter134 : struct.longList)
          {
            oprot.writeI64(_iter134);
          }
        }
      }
      if (struct.isSetDoubleList()) {
        {
          oprot.writeI32(struct.doubleList.size());
          for (double _iter135 : struct.doubleList)
          {
            oprot.writeDouble(_iter135);
          }
        }
      }
      if (struct.isSetStringList()) {
        {
          oprot.writeI32(struct.stringList.size());
          for (java.lang.String _iter136 : struct.stringList)
          {
            oprot.writeString(_iter136);
          }
        }
      }
      if (struct.isSetBinaryList()) {
        {
          oprot.writeI32(struct.binaryList.size());
          for (java.nio.ByteBuffer _iter137 : struct.binaryList)
          {
            oprot.writeBinary(_iter137);
          }
        }
      }
      if (struct.isSetBooleanSet()) {
        {
          oprot.writeI32(struct.booleanSet.size());
          for (boolean _iter138 : struct.booleanSet)
          {
            oprot.writeBool(_iter138);
          }
        }
      }
      if (struct.isSetByteSet()) {
        {
          oprot.writeI32(struct.byteSet.size());
          for (byte _iter139 : struct.byteSet)
          {
            oprot.writeByte(_iter139);
          }
        }
      }
      if (struct.isSetShortSet()) {
        {
          oprot.writeI32(struct.shortSet.size());
          for (short _iter140 : struct.shortSet)
          {
            oprot.writeI16(_iter140);
          }
        }
      }
      if (struct.isSetIntegerSet()) {
        {
          oprot.writeI32(struct.integerSet.size());
          for (int _iter141 : struct.integerSet)
          {
            oprot.writeI32(_iter141);
          }
        }
      }
      if (struct.isSetLongSet()) {
        {
          oprot.writeI32(struct.longSet.size());
          for (long _iter142 : struct.longSet)
          {
            oprot.writeI64(_iter142);
          }
        }
      }
      if (struct.isSetDoubleSet()) {
        {
          oprot.writeI32(struct.doubleSet.size());
          for (double _iter143 : struct.doubleSet)
          {
            oprot.writeDouble(_iter143);
          }
        }
      }
      if (struct.isSetStringSet()) {
        {
          oprot.writeI32(struct.stringSet.size());
          for (java.lang.String _iter144 : struct.stringSet)
          {
            oprot.writeString(_iter144);
          }
        }
      }
      if (struct.isSetBinarySet()) {
        {
          oprot.writeI32(struct.binarySet.size());
          for (java.nio.ByteBuffer _iter145 : struct.binarySet)
          {
            oprot.writeBinary(_iter145);
          }
        }
      }
      if (struct.isSetBooleanMap()) {
        {
          oprot.writeI32(struct.booleanMap.size());
          for (java.util.Map.Entry<java.lang.Boolean, java.lang.Boolean> _iter146 : struct.booleanMap.entrySet())
          {
            oprot.writeBool(_iter146.getKey());
            oprot.writeBool(_iter146.getValue());
          }
        }
      }
      if (struct.isSetByteMap()) {
        {
          oprot.writeI32(struct.byteMap.size());
          for (java.util.Map.Entry<java.lang.Byte, java.lang.Byte> _iter147 : struct.byteMap.entrySet())
          {
            oprot.writeByte(_iter147.getKey());
            oprot.writeByte(_iter147.getValue());
          }
        }
      }
      if (struct.isSetShortMap()) {
        {
          oprot.writeI32(struct.shortMap.size());
          for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter148 : struct.shortMap.entrySet())
          {
            oprot.writeI16(_iter148.getKey());
            oprot.writeI16(_iter148.getValue());
          }
        }
      }
      if (struct.isSetIntegerMap()) {
        {
          oprot.writeI32(struct.integerMap.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter149 : struct.integerMap.entrySet())
          {
            oprot.writeI32(_iter149.getKey());
            oprot.writeI32(_iter149.getValue());
          }
        }
      }
      if (struct.isSetLongMap()) {
        {
          oprot.writeI32(struct.longMap.size());
          for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter150 : struct.longMap.entrySet())
          {
            oprot.writeI64(_iter150.getKey());
            oprot.writeI64(_iter150.getValue());
          }
        }
      }
      if (struct.isSetDoubleMap()) {
        {
          oprot.writeI32(struct.doubleMap.size());
          for (java.util.Map.Entry<java.lang.Double, java.lang.Double> _iter151 : struct.doubleMap.entrySet())
          {
            oprot.writeDouble(_iter151.getKey());
            oprot.writeDouble(_iter151.getValue());
          }
        }
      }
      if (struct.isSetStringMap()) {
        {
          oprot.writeI32(struct.stringMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter152 : struct.stringMap.entrySet())
          {
            oprot.writeString(_iter152.getKey());
            oprot.writeString(_iter152.getValue());
          }
        }
      }
      if (struct.isSetBinaryMap()) {
        {
          oprot.writeI32(struct.binaryMap.size());
          for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> _iter153 : struct.binaryMap.entrySet())
          {
            oprot.writeBinary(_iter153.getKey());
            oprot.writeBinary(_iter153.getValue());
          }
        }
      }
      if (struct.isSetEnumList()) {
        {
          oprot.writeI32(struct.enumList.size());
          for (net.morimekta.test.thrift.serialization.common.Value _iter154 : struct.enumList)
          {
            oprot.writeI32(_iter154.getValue());
          }
        }
      }
      if (struct.isSetEnumSet()) {
        {
          oprot.writeI32(struct.enumSet.size());
          for (net.morimekta.test.thrift.serialization.common.Value _iter155 : struct.enumSet)
          {
            oprot.writeI32(_iter155.getValue());
          }
        }
      }
      if (struct.isSetEnumMap()) {
        {
          oprot.writeI32(struct.enumMap.size());
          for (java.util.Map.Entry<net.morimekta.test.thrift.serialization.common.Value, net.morimekta.test.thrift.serialization.common.Value> _iter156 : struct.enumMap.entrySet())
          {
            oprot.writeI32(_iter156.getKey().getValue());
            oprot.writeI32(_iter156.getValue().getValue());
          }
        }
      }
      if (struct.isSetMessageList()) {
        {
          oprot.writeI32(struct.messageList.size());
          for (net.morimekta.test.thrift.serialization.common.DefaultFields _iter157 : struct.messageList)
          {
            _iter157.write(oprot);
          }
        }
      }
      if (struct.isSetMessageSet()) {
        {
          oprot.writeI32(struct.messageSet.size());
          for (net.morimekta.test.thrift.serialization.common.DefaultFields _iter158 : struct.messageSet)
          {
            _iter158.write(oprot);
          }
        }
      }
      if (struct.isSetMessageMap()) {
        {
          oprot.writeI32(struct.messageMap.size());
          for (java.util.Map.Entry<java.lang.String, net.morimekta.test.thrift.serialization.common.DefaultFields> _iter159 : struct.messageMap.entrySet())
          {
            oprot.writeString(_iter159.getKey());
            _iter159.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetRequiredFields()) {
        struct.requiredFields.write(oprot);
      }
      if (struct.isSetDefaultFields()) {
        struct.defaultFields.write(oprot);
      }
      if (struct.isSetOptionalFields()) {
        struct.optionalFields.write(oprot);
      }
      if (struct.isSetUnionFields()) {
        struct.unionFields.write(oprot);
      }
      if (struct.isSetExceptionFields()) {
        struct.exceptionFields.write(oprot);
      }
      if (struct.isSetDefaultValues()) {
        struct.defaultValues.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ManyContainers struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list160 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.booleanList = new java.util.ArrayList<java.lang.Boolean>(_list160.size);
          boolean _elem161;
          for (int _i162 = 0; _i162 < _list160.size; ++_i162)
          {
            _elem161 = iprot.readBool();
            struct.booleanList.add(_elem161);
          }
        }
        struct.setBooleanListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteList = new java.util.ArrayList<java.lang.Byte>(_list163.size);
          byte _elem164;
          for (int _i165 = 0; _i165 < _list163.size; ++_i165)
          {
            _elem164 = iprot.readByte();
            struct.byteList.add(_elem164);
          }
        }
        struct.setByteListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list166 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortList = new java.util.ArrayList<java.lang.Short>(_list166.size);
          short _elem167;
          for (int _i168 = 0; _i168 < _list166.size; ++_i168)
          {
            _elem167 = iprot.readI16();
            struct.shortList.add(_elem167);
          }
        }
        struct.setShortListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.integerList = new java.util.ArrayList<java.lang.Integer>(_list169.size);
          int _elem170;
          for (int _i171 = 0; _i171 < _list169.size; ++_i171)
          {
            _elem170 = iprot.readI32();
            struct.integerList.add(_elem170);
          }
        }
        struct.setIntegerListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longList = new java.util.ArrayList<java.lang.Long>(_list172.size);
          long _elem173;
          for (int _i174 = 0; _i174 < _list172.size; ++_i174)
          {
            _elem173 = iprot.readI64();
            struct.longList.add(_elem173);
          }
        }
        struct.setLongListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleList = new java.util.ArrayList<java.lang.Double>(_list175.size);
          double _elem176;
          for (int _i177 = 0; _i177 < _list175.size; ++_i177)
          {
            _elem176 = iprot.readDouble();
            struct.doubleList.add(_elem176);
          }
        }
        struct.setDoubleListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringList = new java.util.ArrayList<java.lang.String>(_list178.size);
          java.lang.String _elem179;
          for (int _i180 = 0; _i180 < _list178.size; ++_i180)
          {
            _elem179 = iprot.readString();
            struct.stringList.add(_elem179);
          }
        }
        struct.setStringListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binaryList = new java.util.ArrayList<java.nio.ByteBuffer>(_list181.size);
          java.nio.ByteBuffer _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = iprot.readBinary();
            struct.binaryList.add(_elem182);
          }
        }
        struct.setBinaryListIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set184 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.booleanSet = new java.util.HashSet<java.lang.Boolean>(2*_set184.size);
          boolean _elem185;
          for (int _i186 = 0; _i186 < _set184.size; ++_i186)
          {
            _elem185 = iprot.readBool();
            struct.booleanSet.add(_elem185);
          }
        }
        struct.setBooleanSetIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set187 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteSet = new java.util.HashSet<java.lang.Byte>(2*_set187.size);
          byte _elem188;
          for (int _i189 = 0; _i189 < _set187.size; ++_i189)
          {
            _elem188 = iprot.readByte();
            struct.byteSet.add(_elem188);
          }
        }
        struct.setByteSetIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set190 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortSet = new java.util.HashSet<java.lang.Short>(2*_set190.size);
          short _elem191;
          for (int _i192 = 0; _i192 < _set190.size; ++_i192)
          {
            _elem191 = iprot.readI16();
            struct.shortSet.add(_elem191);
          }
        }
        struct.setShortSetIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set193 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.integerSet = new java.util.HashSet<java.lang.Integer>(2*_set193.size);
          int _elem194;
          for (int _i195 = 0; _i195 < _set193.size; ++_i195)
          {
            _elem194 = iprot.readI32();
            struct.integerSet.add(_elem194);
          }
        }
        struct.setIntegerSetIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TSet _set196 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longSet = new java.util.HashSet<java.lang.Long>(2*_set196.size);
          long _elem197;
          for (int _i198 = 0; _i198 < _set196.size; ++_i198)
          {
            _elem197 = iprot.readI64();
            struct.longSet.add(_elem197);
          }
        }
        struct.setLongSetIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TSet _set199 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleSet = new java.util.HashSet<java.lang.Double>(2*_set199.size);
          double _elem200;
          for (int _i201 = 0; _i201 < _set199.size; ++_i201)
          {
            _elem200 = iprot.readDouble();
            struct.doubleSet.add(_elem200);
          }
        }
        struct.setDoubleSetIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TSet _set202 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringSet = new java.util.HashSet<java.lang.String>(2*_set202.size);
          java.lang.String _elem203;
          for (int _i204 = 0; _i204 < _set202.size; ++_i204)
          {
            _elem203 = iprot.readString();
            struct.stringSet.add(_elem203);
          }
        }
        struct.setStringSetIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TSet _set205 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binarySet = new java.util.HashSet<java.nio.ByteBuffer>(2*_set205.size);
          java.nio.ByteBuffer _elem206;
          for (int _i207 = 0; _i207 < _set205.size; ++_i207)
          {
            _elem206 = iprot.readBinary();
            struct.binarySet.add(_elem206);
          }
        }
        struct.setBinarySetIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TMap _map208 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BOOL, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.booleanMap = new java.util.HashMap<java.lang.Boolean,java.lang.Boolean>(2*_map208.size);
          boolean _key209;
          boolean _val210;
          for (int _i211 = 0; _i211 < _map208.size; ++_i211)
          {
            _key209 = iprot.readBool();
            _val210 = iprot.readBool();
            struct.booleanMap.put(_key209, _val210);
          }
        }
        struct.setBooleanMapIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map212 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteMap = new java.util.HashMap<java.lang.Byte,java.lang.Byte>(2*_map212.size);
          byte _key213;
          byte _val214;
          for (int _i215 = 0; _i215 < _map212.size; ++_i215)
          {
            _key213 = iprot.readByte();
            _val214 = iprot.readByte();
            struct.byteMap.put(_key213, _val214);
          }
        }
        struct.setByteMapIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TMap _map216 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map216.size);
          short _key217;
          short _val218;
          for (int _i219 = 0; _i219 < _map216.size; ++_i219)
          {
            _key217 = iprot.readI16();
            _val218 = iprot.readI16();
            struct.shortMap.put(_key217, _val218);
          }
        }
        struct.setShortMapIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TMap _map220 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map220.size);
          int _key221;
          int _val222;
          for (int _i223 = 0; _i223 < _map220.size; ++_i223)
          {
            _key221 = iprot.readI32();
            _val222 = iprot.readI32();
            struct.integerMap.put(_key221, _val222);
          }
        }
        struct.setIntegerMapIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TMap _map224 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longMap = new java.util.HashMap<java.lang.Long,java.lang.Long>(2*_map224.size);
          long _key225;
          long _val226;
          for (int _i227 = 0; _i227 < _map224.size; ++_i227)
          {
            _key225 = iprot.readI64();
            _val226 = iprot.readI64();
            struct.longMap.put(_key225, _val226);
          }
        }
        struct.setLongMapIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TMap _map228 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleMap = new java.util.HashMap<java.lang.Double,java.lang.Double>(2*_map228.size);
          double _key229;
          double _val230;
          for (int _i231 = 0; _i231 < _map228.size; ++_i231)
          {
            _key229 = iprot.readDouble();
            _val230 = iprot.readDouble();
            struct.doubleMap.put(_key229, _val230);
          }
        }
        struct.setDoubleMapIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TMap _map232 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map232.size);
          java.lang.String _key233;
          java.lang.String _val234;
          for (int _i235 = 0; _i235 < _map232.size; ++_i235)
          {
            _key233 = iprot.readString();
            _val234 = iprot.readString();
            struct.stringMap.put(_key233, _val234);
          }
        }
        struct.setStringMapIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TMap _map236 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binaryMap = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(2*_map236.size);
          java.nio.ByteBuffer _key237;
          java.nio.ByteBuffer _val238;
          for (int _i239 = 0; _i239 < _map236.size; ++_i239)
          {
            _key237 = iprot.readBinary();
            _val238 = iprot.readBinary();
            struct.binaryMap.put(_key237, _val238);
          }
        }
        struct.setBinaryMapIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list240 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.enumList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.Value>(_list240.size);
          net.morimekta.test.thrift.serialization.common.Value _elem241;
          for (int _i242 = 0; _i242 < _list240.size; ++_i242)
          {
            _elem241 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
            struct.enumList.add(_elem241);
          }
        }
        struct.setEnumListIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TSet _set243 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.enumSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.Value>(2*_set243.size);
          net.morimekta.test.thrift.serialization.common.Value _elem244;
          for (int _i245 = 0; _i245 < _set243.size; ++_i245)
          {
            _elem244 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
            struct.enumSet.add(_elem244);
          }
        }
        struct.setEnumSetIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TMap _map246 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.enumMap = new java.util.HashMap<net.morimekta.test.thrift.serialization.common.Value,net.morimekta.test.thrift.serialization.common.Value>(2*_map246.size);
          net.morimekta.test.thrift.serialization.common.Value _key247;
          net.morimekta.test.thrift.serialization.common.Value _val248;
          for (int _i249 = 0; _i249 < _map246.size; ++_i249)
          {
            _key247 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
            _val248 = net.morimekta.test.thrift.serialization.common.Value.findByValue(iprot.readI32());
            struct.enumMap.put(_key247, _val248);
          }
        }
        struct.setEnumMapIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list250 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messageList = new java.util.ArrayList<net.morimekta.test.thrift.serialization.common.DefaultFields>(_list250.size);
          net.morimekta.test.thrift.serialization.common.DefaultFields _elem251;
          for (int _i252 = 0; _i252 < _list250.size; ++_i252)
          {
            _elem251 = new net.morimekta.test.thrift.serialization.common.DefaultFields();
            _elem251.read(iprot);
            struct.messageList.add(_elem251);
          }
        }
        struct.setMessageListIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TSet _set253 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messageSet = new java.util.HashSet<net.morimekta.test.thrift.serialization.common.DefaultFields>(2*_set253.size);
          net.morimekta.test.thrift.serialization.common.DefaultFields _elem254;
          for (int _i255 = 0; _i255 < _set253.size; ++_i255)
          {
            _elem254 = new net.morimekta.test.thrift.serialization.common.DefaultFields();
            _elem254.read(iprot);
            struct.messageSet.add(_elem254);
          }
        }
        struct.setMessageSetIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TMap _map256 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messageMap = new java.util.HashMap<java.lang.String,net.morimekta.test.thrift.serialization.common.DefaultFields>(2*_map256.size);
          java.lang.String _key257;
          net.morimekta.test.thrift.serialization.common.DefaultFields _val258;
          for (int _i259 = 0; _i259 < _map256.size; ++_i259)
          {
            _key257 = iprot.readString();
            _val258 = new net.morimekta.test.thrift.serialization.common.DefaultFields();
            _val258.read(iprot);
            struct.messageMap.put(_key257, _val258);
          }
        }
        struct.setMessageMapIsSet(true);
      }
      if (incoming.get(30)) {
        struct.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields();
        struct.requiredFields.read(iprot);
        struct.setRequiredFieldsIsSet(true);
      }
      if (incoming.get(31)) {
        struct.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields();
        struct.defaultFields.read(iprot);
        struct.setDefaultFieldsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields();
        struct.optionalFields.read(iprot);
        struct.setOptionalFieldsIsSet(true);
      }
      if (incoming.get(33)) {
        struct.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields();
        struct.unionFields.read(iprot);
        struct.setUnionFieldsIsSet(true);
      }
      if (incoming.get(34)) {
        struct.exceptionFields = new net.morimekta.test.thrift.serialization.common.ExceptionFields();
        struct.exceptionFields.read(iprot);
        struct.setExceptionFieldsIsSet(true);
      }
      if (incoming.get(35)) {
        struct.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues();
        struct.defaultValues.read(iprot);
        struct.setDefaultValuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

