/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.morimekta.test.thrift.serialization.messages;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ManyRequiredFields implements org.apache.thrift.TBase<ManyRequiredFields, ManyRequiredFields._Fields>, java.io.Serializable, Cloneable, Comparable<ManyRequiredFields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ManyRequiredFields");

  private static final org.apache.thrift.protocol.TField INTEGER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("integerList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stringList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INTEGER_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("integerSet", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField STRING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("stringSet", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField INTEGER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("integerMap", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringMap", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("second", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField THIRD_FIELD_DESC = new org.apache.thrift.protocol.TField("third", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FOURTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fourth", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FIFTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fifth", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SIXTH_FIELD_DESC = new org.apache.thrift.protocol.TField("sixth", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SEVENTH_FIELD_DESC = new org.apache.thrift.protocol.TField("seventh", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EIGHTH_FIELD_DESC = new org.apache.thrift.protocol.TField("eighth", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NINTH_FIELD_DESC = new org.apache.thrift.protocol.TField("ninth", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TENTH_FIELD_DESC = new org.apache.thrift.protocol.TField("tenth", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField NO_1_FIELD_DESC = new org.apache.thrift.protocol.TField("no_1", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField NO_2_FIELD_DESC = new org.apache.thrift.protocol.TField("no_2", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField NO_3_FIELD_DESC = new org.apache.thrift.protocol.TField("no_3", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField NO_4_FIELD_DESC = new org.apache.thrift.protocol.TField("no_4", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField NO_5_FIELD_DESC = new org.apache.thrift.protocol.TField("no_5", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField NO_6_FIELD_DESC = new org.apache.thrift.protocol.TField("no_6", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField NO_7_FIELD_DESC = new org.apache.thrift.protocol.TField("no_7", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField NO_8_FIELD_DESC = new org.apache.thrift.protocol.TField("no_8", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField NO_9_FIELD_DESC = new org.apache.thrift.protocol.TField("no_9", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField NO_10_FIELD_DESC = new org.apache.thrift.protocol.TField("no_10", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField LONG_1_FIELD_DESC = new org.apache.thrift.protocol.TField("long_1", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField LONG_2_FIELD_DESC = new org.apache.thrift.protocol.TField("long_2", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField LONG_3_FIELD_DESC = new org.apache.thrift.protocol.TField("long_3", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField LONG_4_FIELD_DESC = new org.apache.thrift.protocol.TField("long_4", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField LONG_5_FIELD_DESC = new org.apache.thrift.protocol.TField("long_5", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField LONG_6_FIELD_DESC = new org.apache.thrift.protocol.TField("long_6", org.apache.thrift.protocol.TType.I64, (short)35);
  private static final org.apache.thrift.protocol.TField LONG_7_FIELD_DESC = new org.apache.thrift.protocol.TField("long_7", org.apache.thrift.protocol.TType.I64, (short)36);
  private static final org.apache.thrift.protocol.TField LONG_8_FIELD_DESC = new org.apache.thrift.protocol.TField("long_8", org.apache.thrift.protocol.TType.I64, (short)37);
  private static final org.apache.thrift.protocol.TField LONG_9_FIELD_DESC = new org.apache.thrift.protocol.TField("long_9", org.apache.thrift.protocol.TType.I64, (short)38);
  private static final org.apache.thrift.protocol.TField LONG_10_FIELD_DESC = new org.apache.thrift.protocol.TField("long_10", org.apache.thrift.protocol.TType.I64, (short)39);
  private static final org.apache.thrift.protocol.TField DBL_1_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_1", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField DBL_2_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_2", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField DBL_3_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_3", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField DBL_4_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_4", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField DBL_5_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_5", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField DBL_6_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_6", org.apache.thrift.protocol.TType.DOUBLE, (short)45);
  private static final org.apache.thrift.protocol.TField DBL_7_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_7", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField DBL_8_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_8", org.apache.thrift.protocol.TType.DOUBLE, (short)47);
  private static final org.apache.thrift.protocol.TField DBL_9_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_9", org.apache.thrift.protocol.TType.DOUBLE, (short)48);
  private static final org.apache.thrift.protocol.TField DBL_10_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl_10", org.apache.thrift.protocol.TType.DOUBLE, (short)49);
  private static final org.apache.thrift.protocol.TField REQUIRED_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredFields", org.apache.thrift.protocol.TType.STRUCT, (short)51);
  private static final org.apache.thrift.protocol.TField DEFAULT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultFields", org.apache.thrift.protocol.TType.STRUCT, (short)52);
  private static final org.apache.thrift.protocol.TField OPTIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)53);
  private static final org.apache.thrift.protocol.TField UNION_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("unionFields", org.apache.thrift.protocol.TType.STRUCT, (short)54);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValues", org.apache.thrift.protocol.TType.STRUCT, (short)56);
  private static final org.apache.thrift.protocol.TField COMPACT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("compactFields", org.apache.thrift.protocol.TType.STRUCT, (short)57);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ManyRequiredFieldsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ManyRequiredFieldsTupleSchemeFactory();

  private java.util.List<java.lang.Integer> integerList; // required
  private java.util.List<java.lang.String> stringList; // required
  private java.util.Set<java.lang.Integer> integerSet; // required
  private java.util.Set<java.lang.String> stringSet; // required
  private java.util.Map<java.lang.Integer,java.lang.Integer> integerMap; // required
  private java.util.Map<java.lang.String,java.lang.String> stringMap; // required
  private java.lang.String first; // required
  private java.lang.String second; // required
  private java.lang.String third; // required
  private java.lang.String fourth; // required
  private java.lang.String fifth; // required
  private java.lang.String sixth; // required
  private java.lang.String seventh; // required
  private java.lang.String eighth; // required
  private java.lang.String ninth; // required
  private java.lang.String tenth; // required
  private int no_1; // required
  private int no_2; // required
  private int no_3; // required
  private int no_4; // required
  private int no_5; // required
  private int no_6; // required
  private int no_7; // required
  private int no_8; // required
  private int no_9; // required
  private int no_10; // required
  private long long_1; // required
  private long long_2; // required
  private long long_3; // required
  private long long_4; // required
  private long long_5; // required
  private long long_6; // required
  private long long_7; // required
  private long long_8; // required
  private long long_9; // required
  private long long_10; // required
  private double dbl_1; // required
  private double dbl_2; // required
  private double dbl_3; // required
  private double dbl_4; // required
  private double dbl_5; // required
  private double dbl_6; // required
  private double dbl_7; // required
  private double dbl_8; // required
  private double dbl_9; // required
  private double dbl_10; // required
  private net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields; // required
  private net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields; // required
  private net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields; // required
  private net.morimekta.test.thrift.serialization.common.UnionFields unionFields; // required
  private net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues; // required
  private net.morimekta.test.thrift.serialization.common.CompactFields compactFields; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTEGER_LIST((short)1, "integerList"),
    STRING_LIST((short)2, "stringList"),
    INTEGER_SET((short)3, "integerSet"),
    STRING_SET((short)4, "stringSet"),
    INTEGER_MAP((short)5, "integerMap"),
    STRING_MAP((short)6, "stringMap"),
    FIRST((short)10, "first"),
    SECOND((short)11, "second"),
    THIRD((short)12, "third"),
    FOURTH((short)13, "fourth"),
    FIFTH((short)14, "fifth"),
    SIXTH((short)15, "sixth"),
    SEVENTH((short)16, "seventh"),
    EIGHTH((short)17, "eighth"),
    NINTH((short)18, "ninth"),
    TENTH((short)19, "tenth"),
    NO_1((short)20, "no_1"),
    NO_2((short)21, "no_2"),
    NO_3((short)22, "no_3"),
    NO_4((short)23, "no_4"),
    NO_5((short)24, "no_5"),
    NO_6((short)25, "no_6"),
    NO_7((short)26, "no_7"),
    NO_8((short)27, "no_8"),
    NO_9((short)28, "no_9"),
    NO_10((short)29, "no_10"),
    LONG_1((short)30, "long_1"),
    LONG_2((short)31, "long_2"),
    LONG_3((short)32, "long_3"),
    LONG_4((short)33, "long_4"),
    LONG_5((short)34, "long_5"),
    LONG_6((short)35, "long_6"),
    LONG_7((short)36, "long_7"),
    LONG_8((short)37, "long_8"),
    LONG_9((short)38, "long_9"),
    LONG_10((short)39, "long_10"),
    DBL_1((short)40, "dbl_1"),
    DBL_2((short)41, "dbl_2"),
    DBL_3((short)42, "dbl_3"),
    DBL_4((short)43, "dbl_4"),
    DBL_5((short)44, "dbl_5"),
    DBL_6((short)45, "dbl_6"),
    DBL_7((short)46, "dbl_7"),
    DBL_8((short)47, "dbl_8"),
    DBL_9((short)48, "dbl_9"),
    DBL_10((short)49, "dbl_10"),
    REQUIRED_FIELDS((short)51, "requiredFields"),
    DEFAULT_FIELDS((short)52, "defaultFields"),
    OPTIONAL_FIELDS((short)53, "optionalFields"),
    UNION_FIELDS((short)54, "unionFields"),
    DEFAULT_VALUES((short)56, "defaultValues"),
    COMPACT_FIELDS((short)57, "compactFields");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTEGER_LIST
          return INTEGER_LIST;
        case 2: // STRING_LIST
          return STRING_LIST;
        case 3: // INTEGER_SET
          return INTEGER_SET;
        case 4: // STRING_SET
          return STRING_SET;
        case 5: // INTEGER_MAP
          return INTEGER_MAP;
        case 6: // STRING_MAP
          return STRING_MAP;
        case 10: // FIRST
          return FIRST;
        case 11: // SECOND
          return SECOND;
        case 12: // THIRD
          return THIRD;
        case 13: // FOURTH
          return FOURTH;
        case 14: // FIFTH
          return FIFTH;
        case 15: // SIXTH
          return SIXTH;
        case 16: // SEVENTH
          return SEVENTH;
        case 17: // EIGHTH
          return EIGHTH;
        case 18: // NINTH
          return NINTH;
        case 19: // TENTH
          return TENTH;
        case 20: // NO_1
          return NO_1;
        case 21: // NO_2
          return NO_2;
        case 22: // NO_3
          return NO_3;
        case 23: // NO_4
          return NO_4;
        case 24: // NO_5
          return NO_5;
        case 25: // NO_6
          return NO_6;
        case 26: // NO_7
          return NO_7;
        case 27: // NO_8
          return NO_8;
        case 28: // NO_9
          return NO_9;
        case 29: // NO_10
          return NO_10;
        case 30: // LONG_1
          return LONG_1;
        case 31: // LONG_2
          return LONG_2;
        case 32: // LONG_3
          return LONG_3;
        case 33: // LONG_4
          return LONG_4;
        case 34: // LONG_5
          return LONG_5;
        case 35: // LONG_6
          return LONG_6;
        case 36: // LONG_7
          return LONG_7;
        case 37: // LONG_8
          return LONG_8;
        case 38: // LONG_9
          return LONG_9;
        case 39: // LONG_10
          return LONG_10;
        case 40: // DBL_1
          return DBL_1;
        case 41: // DBL_2
          return DBL_2;
        case 42: // DBL_3
          return DBL_3;
        case 43: // DBL_4
          return DBL_4;
        case 44: // DBL_5
          return DBL_5;
        case 45: // DBL_6
          return DBL_6;
        case 46: // DBL_7
          return DBL_7;
        case 47: // DBL_8
          return DBL_8;
        case 48: // DBL_9
          return DBL_9;
        case 49: // DBL_10
          return DBL_10;
        case 51: // REQUIRED_FIELDS
          return REQUIRED_FIELDS;
        case 52: // DEFAULT_FIELDS
          return DEFAULT_FIELDS;
        case 53: // OPTIONAL_FIELDS
          return OPTIONAL_FIELDS;
        case 54: // UNION_FIELDS
          return UNION_FIELDS;
        case 56: // DEFAULT_VALUES
          return DEFAULT_VALUES;
        case 57: // COMPACT_FIELDS
          return COMPACT_FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NO_1_ISSET_ID = 0;
  private static final int __NO_2_ISSET_ID = 1;
  private static final int __NO_3_ISSET_ID = 2;
  private static final int __NO_4_ISSET_ID = 3;
  private static final int __NO_5_ISSET_ID = 4;
  private static final int __NO_6_ISSET_ID = 5;
  private static final int __NO_7_ISSET_ID = 6;
  private static final int __NO_8_ISSET_ID = 7;
  private static final int __NO_9_ISSET_ID = 8;
  private static final int __NO_10_ISSET_ID = 9;
  private static final int __LONG_1_ISSET_ID = 10;
  private static final int __LONG_2_ISSET_ID = 11;
  private static final int __LONG_3_ISSET_ID = 12;
  private static final int __LONG_4_ISSET_ID = 13;
  private static final int __LONG_5_ISSET_ID = 14;
  private static final int __LONG_6_ISSET_ID = 15;
  private static final int __LONG_7_ISSET_ID = 16;
  private static final int __LONG_8_ISSET_ID = 17;
  private static final int __LONG_9_ISSET_ID = 18;
  private static final int __LONG_10_ISSET_ID = 19;
  private static final int __DBL_1_ISSET_ID = 20;
  private static final int __DBL_2_ISSET_ID = 21;
  private static final int __DBL_3_ISSET_ID = 22;
  private static final int __DBL_4_ISSET_ID = 23;
  private static final int __DBL_5_ISSET_ID = 24;
  private static final int __DBL_6_ISSET_ID = 25;
  private static final int __DBL_7_ISSET_ID = 26;
  private static final int __DBL_8_ISSET_ID = 27;
  private static final int __DBL_9_ISSET_ID = 28;
  private static final int __DBL_10_ISSET_ID = 29;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTEGER_LIST, new org.apache.thrift.meta_data.FieldMetaData("integerList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STRING_LIST, new org.apache.thrift.meta_data.FieldMetaData("stringList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTEGER_SET, new org.apache.thrift.meta_data.FieldMetaData("integerSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STRING_SET, new org.apache.thrift.meta_data.FieldMetaData("stringSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTEGER_MAP, new org.apache.thrift.meta_data.FieldMetaData("integerMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND, new org.apache.thrift.meta_data.FieldMetaData("second", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD, new org.apache.thrift.meta_data.FieldMetaData("third", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOURTH, new org.apache.thrift.meta_data.FieldMetaData("fourth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIFTH, new org.apache.thrift.meta_data.FieldMetaData("fifth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIXTH, new org.apache.thrift.meta_data.FieldMetaData("sixth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEVENTH, new org.apache.thrift.meta_data.FieldMetaData("seventh", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EIGHTH, new org.apache.thrift.meta_data.FieldMetaData("eighth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NINTH, new org.apache.thrift.meta_data.FieldMetaData("ninth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENTH, new org.apache.thrift.meta_data.FieldMetaData("tenth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_1, new org.apache.thrift.meta_data.FieldMetaData("no_1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_2, new org.apache.thrift.meta_data.FieldMetaData("no_2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_3, new org.apache.thrift.meta_data.FieldMetaData("no_3", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_4, new org.apache.thrift.meta_data.FieldMetaData("no_4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_5, new org.apache.thrift.meta_data.FieldMetaData("no_5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_6, new org.apache.thrift.meta_data.FieldMetaData("no_6", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_7, new org.apache.thrift.meta_data.FieldMetaData("no_7", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_8, new org.apache.thrift.meta_data.FieldMetaData("no_8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_9, new org.apache.thrift.meta_data.FieldMetaData("no_9", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_10, new org.apache.thrift.meta_data.FieldMetaData("no_10", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_1, new org.apache.thrift.meta_data.FieldMetaData("long_1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_2, new org.apache.thrift.meta_data.FieldMetaData("long_2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_3, new org.apache.thrift.meta_data.FieldMetaData("long_3", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_4, new org.apache.thrift.meta_data.FieldMetaData("long_4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_5, new org.apache.thrift.meta_data.FieldMetaData("long_5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_6, new org.apache.thrift.meta_data.FieldMetaData("long_6", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_7, new org.apache.thrift.meta_data.FieldMetaData("long_7", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_8, new org.apache.thrift.meta_data.FieldMetaData("long_8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_9, new org.apache.thrift.meta_data.FieldMetaData("long_9", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_10, new org.apache.thrift.meta_data.FieldMetaData("long_10", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DBL_1, new org.apache.thrift.meta_data.FieldMetaData("dbl_1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_2, new org.apache.thrift.meta_data.FieldMetaData("dbl_2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_3, new org.apache.thrift.meta_data.FieldMetaData("dbl_3", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_4, new org.apache.thrift.meta_data.FieldMetaData("dbl_4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_5, new org.apache.thrift.meta_data.FieldMetaData("dbl_5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_6, new org.apache.thrift.meta_data.FieldMetaData("dbl_6", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_7, new org.apache.thrift.meta_data.FieldMetaData("dbl_7", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_8, new org.apache.thrift.meta_data.FieldMetaData("dbl_8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_9, new org.apache.thrift.meta_data.FieldMetaData("dbl_9", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DBL_10, new org.apache.thrift.meta_data.FieldMetaData("dbl_10", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUIRED_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("requiredFields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.RequiredFields.class)));
    tmpMap.put(_Fields.DEFAULT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("defaultFields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultFields.class)));
    tmpMap.put(_Fields.OPTIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("optionalFields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.OptionalFields.class)));
    tmpMap.put(_Fields.UNION_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("unionFields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.UnionFields.class)));
    tmpMap.put(_Fields.DEFAULT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("defaultValues", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.DefaultValues.class)));
    tmpMap.put(_Fields.COMPACT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("compactFields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.morimekta.test.thrift.serialization.common.CompactFields.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ManyRequiredFields.class, metaDataMap);
  }

  public ManyRequiredFields() {
  }

  public ManyRequiredFields(
    java.util.List<java.lang.Integer> integerList,
    java.util.List<java.lang.String> stringList,
    java.util.Set<java.lang.Integer> integerSet,
    java.util.Set<java.lang.String> stringSet,
    java.util.Map<java.lang.Integer,java.lang.Integer> integerMap,
    java.util.Map<java.lang.String,java.lang.String> stringMap,
    java.lang.String first,
    java.lang.String second,
    java.lang.String third,
    java.lang.String fourth,
    java.lang.String fifth,
    java.lang.String sixth,
    java.lang.String seventh,
    java.lang.String eighth,
    java.lang.String ninth,
    java.lang.String tenth,
    int no_1,
    int no_2,
    int no_3,
    int no_4,
    int no_5,
    int no_6,
    int no_7,
    int no_8,
    int no_9,
    int no_10,
    long long_1,
    long long_2,
    long long_3,
    long long_4,
    long long_5,
    long long_6,
    long long_7,
    long long_8,
    long long_9,
    long long_10,
    double dbl_1,
    double dbl_2,
    double dbl_3,
    double dbl_4,
    double dbl_5,
    double dbl_6,
    double dbl_7,
    double dbl_8,
    double dbl_9,
    double dbl_10,
    net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields,
    net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields,
    net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields,
    net.morimekta.test.thrift.serialization.common.UnionFields unionFields,
    net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues,
    net.morimekta.test.thrift.serialization.common.CompactFields compactFields)
  {
    this();
    this.integerList = integerList;
    this.stringList = stringList;
    this.integerSet = integerSet;
    this.stringSet = stringSet;
    this.integerMap = integerMap;
    this.stringMap = stringMap;
    this.first = first;
    this.second = second;
    this.third = third;
    this.fourth = fourth;
    this.fifth = fifth;
    this.sixth = sixth;
    this.seventh = seventh;
    this.eighth = eighth;
    this.ninth = ninth;
    this.tenth = tenth;
    this.no_1 = no_1;
    setNo1IsSet(true);
    this.no_2 = no_2;
    setNo2IsSet(true);
    this.no_3 = no_3;
    setNo3IsSet(true);
    this.no_4 = no_4;
    setNo4IsSet(true);
    this.no_5 = no_5;
    setNo5IsSet(true);
    this.no_6 = no_6;
    setNo6IsSet(true);
    this.no_7 = no_7;
    setNo7IsSet(true);
    this.no_8 = no_8;
    setNo8IsSet(true);
    this.no_9 = no_9;
    setNo9IsSet(true);
    this.no_10 = no_10;
    setNo10IsSet(true);
    this.long_1 = long_1;
    setLong1IsSet(true);
    this.long_2 = long_2;
    setLong2IsSet(true);
    this.long_3 = long_3;
    setLong3IsSet(true);
    this.long_4 = long_4;
    setLong4IsSet(true);
    this.long_5 = long_5;
    setLong5IsSet(true);
    this.long_6 = long_6;
    setLong6IsSet(true);
    this.long_7 = long_7;
    setLong7IsSet(true);
    this.long_8 = long_8;
    setLong8IsSet(true);
    this.long_9 = long_9;
    setLong9IsSet(true);
    this.long_10 = long_10;
    setLong10IsSet(true);
    this.dbl_1 = dbl_1;
    setDbl1IsSet(true);
    this.dbl_2 = dbl_2;
    setDbl2IsSet(true);
    this.dbl_3 = dbl_3;
    setDbl3IsSet(true);
    this.dbl_4 = dbl_4;
    setDbl4IsSet(true);
    this.dbl_5 = dbl_5;
    setDbl5IsSet(true);
    this.dbl_6 = dbl_6;
    setDbl6IsSet(true);
    this.dbl_7 = dbl_7;
    setDbl7IsSet(true);
    this.dbl_8 = dbl_8;
    setDbl8IsSet(true);
    this.dbl_9 = dbl_9;
    setDbl9IsSet(true);
    this.dbl_10 = dbl_10;
    setDbl10IsSet(true);
    this.requiredFields = requiredFields;
    this.defaultFields = defaultFields;
    this.optionalFields = optionalFields;
    this.unionFields = unionFields;
    this.defaultValues = defaultValues;
    this.compactFields = compactFields;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ManyRequiredFields(ManyRequiredFields other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIntegerList()) {
      java.util.List<java.lang.Integer> __this__integerList = new java.util.ArrayList<java.lang.Integer>(other.integerList);
      this.integerList = __this__integerList;
    }
    if (other.isSetStringList()) {
      java.util.List<java.lang.String> __this__stringList = new java.util.ArrayList<java.lang.String>(other.stringList);
      this.stringList = __this__stringList;
    }
    if (other.isSetIntegerSet()) {
      java.util.Set<java.lang.Integer> __this__integerSet = new java.util.HashSet<java.lang.Integer>(other.integerSet);
      this.integerSet = __this__integerSet;
    }
    if (other.isSetStringSet()) {
      java.util.Set<java.lang.String> __this__stringSet = new java.util.HashSet<java.lang.String>(other.stringSet);
      this.stringSet = __this__stringSet;
    }
    if (other.isSetIntegerMap()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.integerMap);
      this.integerMap = __this__integerMap;
    }
    if (other.isSetStringMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__stringMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.stringMap);
      this.stringMap = __this__stringMap;
    }
    if (other.isSetFirst()) {
      this.first = other.first;
    }
    if (other.isSetSecond()) {
      this.second = other.second;
    }
    if (other.isSetThird()) {
      this.third = other.third;
    }
    if (other.isSetFourth()) {
      this.fourth = other.fourth;
    }
    if (other.isSetFifth()) {
      this.fifth = other.fifth;
    }
    if (other.isSetSixth()) {
      this.sixth = other.sixth;
    }
    if (other.isSetSeventh()) {
      this.seventh = other.seventh;
    }
    if (other.isSetEighth()) {
      this.eighth = other.eighth;
    }
    if (other.isSetNinth()) {
      this.ninth = other.ninth;
    }
    if (other.isSetTenth()) {
      this.tenth = other.tenth;
    }
    this.no_1 = other.no_1;
    this.no_2 = other.no_2;
    this.no_3 = other.no_3;
    this.no_4 = other.no_4;
    this.no_5 = other.no_5;
    this.no_6 = other.no_6;
    this.no_7 = other.no_7;
    this.no_8 = other.no_8;
    this.no_9 = other.no_9;
    this.no_10 = other.no_10;
    this.long_1 = other.long_1;
    this.long_2 = other.long_2;
    this.long_3 = other.long_3;
    this.long_4 = other.long_4;
    this.long_5 = other.long_5;
    this.long_6 = other.long_6;
    this.long_7 = other.long_7;
    this.long_8 = other.long_8;
    this.long_9 = other.long_9;
    this.long_10 = other.long_10;
    this.dbl_1 = other.dbl_1;
    this.dbl_2 = other.dbl_2;
    this.dbl_3 = other.dbl_3;
    this.dbl_4 = other.dbl_4;
    this.dbl_5 = other.dbl_5;
    this.dbl_6 = other.dbl_6;
    this.dbl_7 = other.dbl_7;
    this.dbl_8 = other.dbl_8;
    this.dbl_9 = other.dbl_9;
    this.dbl_10 = other.dbl_10;
    if (other.isSetRequiredFields()) {
      this.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields(other.requiredFields);
    }
    if (other.isSetDefaultFields()) {
      this.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields(other.defaultFields);
    }
    if (other.isSetOptionalFields()) {
      this.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields(other.optionalFields);
    }
    if (other.isSetUnionFields()) {
      this.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields(other.unionFields);
    }
    if (other.isSetDefaultValues()) {
      this.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues(other.defaultValues);
    }
    if (other.isSetCompactFields()) {
      this.compactFields = new net.morimekta.test.thrift.serialization.common.CompactFields(other.compactFields);
    }
  }

  public ManyRequiredFields deepCopy() {
    return new ManyRequiredFields(this);
  }

  @Override
  public void clear() {
    this.integerList = null;
    this.stringList = null;
    this.integerSet = null;
    this.stringSet = null;
    this.integerMap = null;
    this.stringMap = null;
    this.first = null;
    this.second = null;
    this.third = null;
    this.fourth = null;
    this.fifth = null;
    this.sixth = null;
    this.seventh = null;
    this.eighth = null;
    this.ninth = null;
    this.tenth = null;
    setNo1IsSet(false);
    this.no_1 = 0;
    setNo2IsSet(false);
    this.no_2 = 0;
    setNo3IsSet(false);
    this.no_3 = 0;
    setNo4IsSet(false);
    this.no_4 = 0;
    setNo5IsSet(false);
    this.no_5 = 0;
    setNo6IsSet(false);
    this.no_6 = 0;
    setNo7IsSet(false);
    this.no_7 = 0;
    setNo8IsSet(false);
    this.no_8 = 0;
    setNo9IsSet(false);
    this.no_9 = 0;
    setNo10IsSet(false);
    this.no_10 = 0;
    setLong1IsSet(false);
    this.long_1 = 0;
    setLong2IsSet(false);
    this.long_2 = 0;
    setLong3IsSet(false);
    this.long_3 = 0;
    setLong4IsSet(false);
    this.long_4 = 0;
    setLong5IsSet(false);
    this.long_5 = 0;
    setLong6IsSet(false);
    this.long_6 = 0;
    setLong7IsSet(false);
    this.long_7 = 0;
    setLong8IsSet(false);
    this.long_8 = 0;
    setLong9IsSet(false);
    this.long_9 = 0;
    setLong10IsSet(false);
    this.long_10 = 0;
    setDbl1IsSet(false);
    this.dbl_1 = 0.0;
    setDbl2IsSet(false);
    this.dbl_2 = 0.0;
    setDbl3IsSet(false);
    this.dbl_3 = 0.0;
    setDbl4IsSet(false);
    this.dbl_4 = 0.0;
    setDbl5IsSet(false);
    this.dbl_5 = 0.0;
    setDbl6IsSet(false);
    this.dbl_6 = 0.0;
    setDbl7IsSet(false);
    this.dbl_7 = 0.0;
    setDbl8IsSet(false);
    this.dbl_8 = 0.0;
    setDbl9IsSet(false);
    this.dbl_9 = 0.0;
    setDbl10IsSet(false);
    this.dbl_10 = 0.0;
    this.requiredFields = null;
    this.defaultFields = null;
    this.optionalFields = null;
    this.unionFields = null;
    this.defaultValues = null;
    this.compactFields = null;
  }

  public int getIntegerListSize() {
    return (this.integerList == null) ? 0 : this.integerList.size();
  }

  public java.util.Iterator<java.lang.Integer> getIntegerListIterator() {
    return (this.integerList == null) ? null : this.integerList.iterator();
  }

  public void addToIntegerList(int elem) {
    if (this.integerList == null) {
      this.integerList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.integerList.add(elem);
  }

  public java.util.List<java.lang.Integer> getIntegerList() {
    return this.integerList;
  }

  public ManyRequiredFields setIntegerList(java.util.List<java.lang.Integer> integerList) {
    this.integerList = integerList;
    return this;
  }

  public void unsetIntegerList() {
    this.integerList = null;
  }

  /** Returns true if field integerList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerList() {
    return this.integerList != null;
  }

  public void setIntegerListIsSet(boolean value) {
    if (!value) {
      this.integerList = null;
    }
  }

  public int getStringListSize() {
    return (this.stringList == null) ? 0 : this.stringList.size();
  }

  public java.util.Iterator<java.lang.String> getStringListIterator() {
    return (this.stringList == null) ? null : this.stringList.iterator();
  }

  public void addToStringList(java.lang.String elem) {
    if (this.stringList == null) {
      this.stringList = new java.util.ArrayList<java.lang.String>();
    }
    this.stringList.add(elem);
  }

  public java.util.List<java.lang.String> getStringList() {
    return this.stringList;
  }

  public ManyRequiredFields setStringList(java.util.List<java.lang.String> stringList) {
    this.stringList = stringList;
    return this;
  }

  public void unsetStringList() {
    this.stringList = null;
  }

  /** Returns true if field stringList is set (has been assigned a value) and false otherwise */
  public boolean isSetStringList() {
    return this.stringList != null;
  }

  public void setStringListIsSet(boolean value) {
    if (!value) {
      this.stringList = null;
    }
  }

  public int getIntegerSetSize() {
    return (this.integerSet == null) ? 0 : this.integerSet.size();
  }

  public java.util.Iterator<java.lang.Integer> getIntegerSetIterator() {
    return (this.integerSet == null) ? null : this.integerSet.iterator();
  }

  public void addToIntegerSet(int elem) {
    if (this.integerSet == null) {
      this.integerSet = new java.util.HashSet<java.lang.Integer>();
    }
    this.integerSet.add(elem);
  }

  public java.util.Set<java.lang.Integer> getIntegerSet() {
    return this.integerSet;
  }

  public ManyRequiredFields setIntegerSet(java.util.Set<java.lang.Integer> integerSet) {
    this.integerSet = integerSet;
    return this;
  }

  public void unsetIntegerSet() {
    this.integerSet = null;
  }

  /** Returns true if field integerSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerSet() {
    return this.integerSet != null;
  }

  public void setIntegerSetIsSet(boolean value) {
    if (!value) {
      this.integerSet = null;
    }
  }

  public int getStringSetSize() {
    return (this.stringSet == null) ? 0 : this.stringSet.size();
  }

  public java.util.Iterator<java.lang.String> getStringSetIterator() {
    return (this.stringSet == null) ? null : this.stringSet.iterator();
  }

  public void addToStringSet(java.lang.String elem) {
    if (this.stringSet == null) {
      this.stringSet = new java.util.HashSet<java.lang.String>();
    }
    this.stringSet.add(elem);
  }

  public java.util.Set<java.lang.String> getStringSet() {
    return this.stringSet;
  }

  public ManyRequiredFields setStringSet(java.util.Set<java.lang.String> stringSet) {
    this.stringSet = stringSet;
    return this;
  }

  public void unsetStringSet() {
    this.stringSet = null;
  }

  /** Returns true if field stringSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStringSet() {
    return this.stringSet != null;
  }

  public void setStringSetIsSet(boolean value) {
    if (!value) {
      this.stringSet = null;
    }
  }

  public int getIntegerMapSize() {
    return (this.integerMap == null) ? 0 : this.integerMap.size();
  }

  public void putToIntegerMap(int key, int val) {
    if (this.integerMap == null) {
      this.integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.integerMap.put(key, val);
  }

  public java.util.Map<java.lang.Integer,java.lang.Integer> getIntegerMap() {
    return this.integerMap;
  }

  public ManyRequiredFields setIntegerMap(java.util.Map<java.lang.Integer,java.lang.Integer> integerMap) {
    this.integerMap = integerMap;
    return this;
  }

  public void unsetIntegerMap() {
    this.integerMap = null;
  }

  /** Returns true if field integerMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerMap() {
    return this.integerMap != null;
  }

  public void setIntegerMapIsSet(boolean value) {
    if (!value) {
      this.integerMap = null;
    }
  }

  public int getStringMapSize() {
    return (this.stringMap == null) ? 0 : this.stringMap.size();
  }

  public void putToStringMap(java.lang.String key, java.lang.String val) {
    if (this.stringMap == null) {
      this.stringMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.stringMap.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getStringMap() {
    return this.stringMap;
  }

  public ManyRequiredFields setStringMap(java.util.Map<java.lang.String,java.lang.String> stringMap) {
    this.stringMap = stringMap;
    return this;
  }

  public void unsetStringMap() {
    this.stringMap = null;
  }

  /** Returns true if field stringMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStringMap() {
    return this.stringMap != null;
  }

  public void setStringMapIsSet(boolean value) {
    if (!value) {
      this.stringMap = null;
    }
  }

  public java.lang.String getFirst() {
    return this.first;
  }

  public ManyRequiredFields setFirst(java.lang.String first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  public java.lang.String getSecond() {
    return this.second;
  }

  public ManyRequiredFields setSecond(java.lang.String second) {
    this.second = second;
    return this;
  }

  public void unsetSecond() {
    this.second = null;
  }

  /** Returns true if field second is set (has been assigned a value) and false otherwise */
  public boolean isSetSecond() {
    return this.second != null;
  }

  public void setSecondIsSet(boolean value) {
    if (!value) {
      this.second = null;
    }
  }

  public java.lang.String getThird() {
    return this.third;
  }

  public ManyRequiredFields setThird(java.lang.String third) {
    this.third = third;
    return this;
  }

  public void unsetThird() {
    this.third = null;
  }

  /** Returns true if field third is set (has been assigned a value) and false otherwise */
  public boolean isSetThird() {
    return this.third != null;
  }

  public void setThirdIsSet(boolean value) {
    if (!value) {
      this.third = null;
    }
  }

  public java.lang.String getFourth() {
    return this.fourth;
  }

  public ManyRequiredFields setFourth(java.lang.String fourth) {
    this.fourth = fourth;
    return this;
  }

  public void unsetFourth() {
    this.fourth = null;
  }

  /** Returns true if field fourth is set (has been assigned a value) and false otherwise */
  public boolean isSetFourth() {
    return this.fourth != null;
  }

  public void setFourthIsSet(boolean value) {
    if (!value) {
      this.fourth = null;
    }
  }

  public java.lang.String getFifth() {
    return this.fifth;
  }

  public ManyRequiredFields setFifth(java.lang.String fifth) {
    this.fifth = fifth;
    return this;
  }

  public void unsetFifth() {
    this.fifth = null;
  }

  /** Returns true if field fifth is set (has been assigned a value) and false otherwise */
  public boolean isSetFifth() {
    return this.fifth != null;
  }

  public void setFifthIsSet(boolean value) {
    if (!value) {
      this.fifth = null;
    }
  }

  public java.lang.String getSixth() {
    return this.sixth;
  }

  public ManyRequiredFields setSixth(java.lang.String sixth) {
    this.sixth = sixth;
    return this;
  }

  public void unsetSixth() {
    this.sixth = null;
  }

  /** Returns true if field sixth is set (has been assigned a value) and false otherwise */
  public boolean isSetSixth() {
    return this.sixth != null;
  }

  public void setSixthIsSet(boolean value) {
    if (!value) {
      this.sixth = null;
    }
  }

  public java.lang.String getSeventh() {
    return this.seventh;
  }

  public ManyRequiredFields setSeventh(java.lang.String seventh) {
    this.seventh = seventh;
    return this;
  }

  public void unsetSeventh() {
    this.seventh = null;
  }

  /** Returns true if field seventh is set (has been assigned a value) and false otherwise */
  public boolean isSetSeventh() {
    return this.seventh != null;
  }

  public void setSeventhIsSet(boolean value) {
    if (!value) {
      this.seventh = null;
    }
  }

  public java.lang.String getEighth() {
    return this.eighth;
  }

  public ManyRequiredFields setEighth(java.lang.String eighth) {
    this.eighth = eighth;
    return this;
  }

  public void unsetEighth() {
    this.eighth = null;
  }

  /** Returns true if field eighth is set (has been assigned a value) and false otherwise */
  public boolean isSetEighth() {
    return this.eighth != null;
  }

  public void setEighthIsSet(boolean value) {
    if (!value) {
      this.eighth = null;
    }
  }

  public java.lang.String getNinth() {
    return this.ninth;
  }

  public ManyRequiredFields setNinth(java.lang.String ninth) {
    this.ninth = ninth;
    return this;
  }

  public void unsetNinth() {
    this.ninth = null;
  }

  /** Returns true if field ninth is set (has been assigned a value) and false otherwise */
  public boolean isSetNinth() {
    return this.ninth != null;
  }

  public void setNinthIsSet(boolean value) {
    if (!value) {
      this.ninth = null;
    }
  }

  public java.lang.String getTenth() {
    return this.tenth;
  }

  public ManyRequiredFields setTenth(java.lang.String tenth) {
    this.tenth = tenth;
    return this;
  }

  public void unsetTenth() {
    this.tenth = null;
  }

  /** Returns true if field tenth is set (has been assigned a value) and false otherwise */
  public boolean isSetTenth() {
    return this.tenth != null;
  }

  public void setTenthIsSet(boolean value) {
    if (!value) {
      this.tenth = null;
    }
  }

  public int getNo1() {
    return this.no_1;
  }

  public ManyRequiredFields setNo1(int no_1) {
    this.no_1 = no_1;
    setNo1IsSet(true);
    return this;
  }

  public void unsetNo1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_1_ISSET_ID);
  }

  /** Returns true if field no_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_1_ISSET_ID);
  }

  public void setNo1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_1_ISSET_ID, value);
  }

  public int getNo2() {
    return this.no_2;
  }

  public ManyRequiredFields setNo2(int no_2) {
    this.no_2 = no_2;
    setNo2IsSet(true);
    return this;
  }

  public void unsetNo2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_2_ISSET_ID);
  }

  /** Returns true if field no_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_2_ISSET_ID);
  }

  public void setNo2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_2_ISSET_ID, value);
  }

  public int getNo3() {
    return this.no_3;
  }

  public ManyRequiredFields setNo3(int no_3) {
    this.no_3 = no_3;
    setNo3IsSet(true);
    return this;
  }

  public void unsetNo3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_3_ISSET_ID);
  }

  /** Returns true if field no_3 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_3_ISSET_ID);
  }

  public void setNo3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_3_ISSET_ID, value);
  }

  public int getNo4() {
    return this.no_4;
  }

  public ManyRequiredFields setNo4(int no_4) {
    this.no_4 = no_4;
    setNo4IsSet(true);
    return this;
  }

  public void unsetNo4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_4_ISSET_ID);
  }

  /** Returns true if field no_4 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_4_ISSET_ID);
  }

  public void setNo4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_4_ISSET_ID, value);
  }

  public int getNo5() {
    return this.no_5;
  }

  public ManyRequiredFields setNo5(int no_5) {
    this.no_5 = no_5;
    setNo5IsSet(true);
    return this;
  }

  public void unsetNo5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_5_ISSET_ID);
  }

  /** Returns true if field no_5 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_5_ISSET_ID);
  }

  public void setNo5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_5_ISSET_ID, value);
  }

  public int getNo6() {
    return this.no_6;
  }

  public ManyRequiredFields setNo6(int no_6) {
    this.no_6 = no_6;
    setNo6IsSet(true);
    return this;
  }

  public void unsetNo6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_6_ISSET_ID);
  }

  /** Returns true if field no_6 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_6_ISSET_ID);
  }

  public void setNo6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_6_ISSET_ID, value);
  }

  public int getNo7() {
    return this.no_7;
  }

  public ManyRequiredFields setNo7(int no_7) {
    this.no_7 = no_7;
    setNo7IsSet(true);
    return this;
  }

  public void unsetNo7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_7_ISSET_ID);
  }

  /** Returns true if field no_7 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_7_ISSET_ID);
  }

  public void setNo7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_7_ISSET_ID, value);
  }

  public int getNo8() {
    return this.no_8;
  }

  public ManyRequiredFields setNo8(int no_8) {
    this.no_8 = no_8;
    setNo8IsSet(true);
    return this;
  }

  public void unsetNo8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_8_ISSET_ID);
  }

  /** Returns true if field no_8 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_8_ISSET_ID);
  }

  public void setNo8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_8_ISSET_ID, value);
  }

  public int getNo9() {
    return this.no_9;
  }

  public ManyRequiredFields setNo9(int no_9) {
    this.no_9 = no_9;
    setNo9IsSet(true);
    return this;
  }

  public void unsetNo9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_9_ISSET_ID);
  }

  /** Returns true if field no_9 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_9_ISSET_ID);
  }

  public void setNo9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_9_ISSET_ID, value);
  }

  public int getNo10() {
    return this.no_10;
  }

  public ManyRequiredFields setNo10(int no_10) {
    this.no_10 = no_10;
    setNo10IsSet(true);
    return this;
  }

  public void unsetNo10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NO_10_ISSET_ID);
  }

  /** Returns true if field no_10 is set (has been assigned a value) and false otherwise */
  public boolean isSetNo10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NO_10_ISSET_ID);
  }

  public void setNo10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NO_10_ISSET_ID, value);
  }

  public long getLong1() {
    return this.long_1;
  }

  public ManyRequiredFields setLong1(long long_1) {
    this.long_1 = long_1;
    setLong1IsSet(true);
    return this;
  }

  public void unsetLong1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_1_ISSET_ID);
  }

  /** Returns true if field long_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_1_ISSET_ID);
  }

  public void setLong1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_1_ISSET_ID, value);
  }

  public long getLong2() {
    return this.long_2;
  }

  public ManyRequiredFields setLong2(long long_2) {
    this.long_2 = long_2;
    setLong2IsSet(true);
    return this;
  }

  public void unsetLong2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_2_ISSET_ID);
  }

  /** Returns true if field long_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_2_ISSET_ID);
  }

  public void setLong2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_2_ISSET_ID, value);
  }

  public long getLong3() {
    return this.long_3;
  }

  public ManyRequiredFields setLong3(long long_3) {
    this.long_3 = long_3;
    setLong3IsSet(true);
    return this;
  }

  public void unsetLong3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_3_ISSET_ID);
  }

  /** Returns true if field long_3 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_3_ISSET_ID);
  }

  public void setLong3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_3_ISSET_ID, value);
  }

  public long getLong4() {
    return this.long_4;
  }

  public ManyRequiredFields setLong4(long long_4) {
    this.long_4 = long_4;
    setLong4IsSet(true);
    return this;
  }

  public void unsetLong4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_4_ISSET_ID);
  }

  /** Returns true if field long_4 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_4_ISSET_ID);
  }

  public void setLong4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_4_ISSET_ID, value);
  }

  public long getLong5() {
    return this.long_5;
  }

  public ManyRequiredFields setLong5(long long_5) {
    this.long_5 = long_5;
    setLong5IsSet(true);
    return this;
  }

  public void unsetLong5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_5_ISSET_ID);
  }

  /** Returns true if field long_5 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_5_ISSET_ID);
  }

  public void setLong5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_5_ISSET_ID, value);
  }

  public long getLong6() {
    return this.long_6;
  }

  public ManyRequiredFields setLong6(long long_6) {
    this.long_6 = long_6;
    setLong6IsSet(true);
    return this;
  }

  public void unsetLong6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_6_ISSET_ID);
  }

  /** Returns true if field long_6 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_6_ISSET_ID);
  }

  public void setLong6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_6_ISSET_ID, value);
  }

  public long getLong7() {
    return this.long_7;
  }

  public ManyRequiredFields setLong7(long long_7) {
    this.long_7 = long_7;
    setLong7IsSet(true);
    return this;
  }

  public void unsetLong7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_7_ISSET_ID);
  }

  /** Returns true if field long_7 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_7_ISSET_ID);
  }

  public void setLong7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_7_ISSET_ID, value);
  }

  public long getLong8() {
    return this.long_8;
  }

  public ManyRequiredFields setLong8(long long_8) {
    this.long_8 = long_8;
    setLong8IsSet(true);
    return this;
  }

  public void unsetLong8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_8_ISSET_ID);
  }

  /** Returns true if field long_8 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_8_ISSET_ID);
  }

  public void setLong8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_8_ISSET_ID, value);
  }

  public long getLong9() {
    return this.long_9;
  }

  public ManyRequiredFields setLong9(long long_9) {
    this.long_9 = long_9;
    setLong9IsSet(true);
    return this;
  }

  public void unsetLong9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_9_ISSET_ID);
  }

  /** Returns true if field long_9 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_9_ISSET_ID);
  }

  public void setLong9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_9_ISSET_ID, value);
  }

  public long getLong10() {
    return this.long_10;
  }

  public ManyRequiredFields setLong10(long long_10) {
    this.long_10 = long_10;
    setLong10IsSet(true);
    return this;
  }

  public void unsetLong10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONG_10_ISSET_ID);
  }

  /** Returns true if field long_10 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONG_10_ISSET_ID);
  }

  public void setLong10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONG_10_ISSET_ID, value);
  }

  public double getDbl1() {
    return this.dbl_1;
  }

  public ManyRequiredFields setDbl1(double dbl_1) {
    this.dbl_1 = dbl_1;
    setDbl1IsSet(true);
    return this;
  }

  public void unsetDbl1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_1_ISSET_ID);
  }

  /** Returns true if field dbl_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_1_ISSET_ID);
  }

  public void setDbl1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_1_ISSET_ID, value);
  }

  public double getDbl2() {
    return this.dbl_2;
  }

  public ManyRequiredFields setDbl2(double dbl_2) {
    this.dbl_2 = dbl_2;
    setDbl2IsSet(true);
    return this;
  }

  public void unsetDbl2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_2_ISSET_ID);
  }

  /** Returns true if field dbl_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_2_ISSET_ID);
  }

  public void setDbl2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_2_ISSET_ID, value);
  }

  public double getDbl3() {
    return this.dbl_3;
  }

  public ManyRequiredFields setDbl3(double dbl_3) {
    this.dbl_3 = dbl_3;
    setDbl3IsSet(true);
    return this;
  }

  public void unsetDbl3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_3_ISSET_ID);
  }

  /** Returns true if field dbl_3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_3_ISSET_ID);
  }

  public void setDbl3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_3_ISSET_ID, value);
  }

  public double getDbl4() {
    return this.dbl_4;
  }

  public ManyRequiredFields setDbl4(double dbl_4) {
    this.dbl_4 = dbl_4;
    setDbl4IsSet(true);
    return this;
  }

  public void unsetDbl4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_4_ISSET_ID);
  }

  /** Returns true if field dbl_4 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_4_ISSET_ID);
  }

  public void setDbl4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_4_ISSET_ID, value);
  }

  public double getDbl5() {
    return this.dbl_5;
  }

  public ManyRequiredFields setDbl5(double dbl_5) {
    this.dbl_5 = dbl_5;
    setDbl5IsSet(true);
    return this;
  }

  public void unsetDbl5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_5_ISSET_ID);
  }

  /** Returns true if field dbl_5 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_5_ISSET_ID);
  }

  public void setDbl5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_5_ISSET_ID, value);
  }

  public double getDbl6() {
    return this.dbl_6;
  }

  public ManyRequiredFields setDbl6(double dbl_6) {
    this.dbl_6 = dbl_6;
    setDbl6IsSet(true);
    return this;
  }

  public void unsetDbl6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_6_ISSET_ID);
  }

  /** Returns true if field dbl_6 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_6_ISSET_ID);
  }

  public void setDbl6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_6_ISSET_ID, value);
  }

  public double getDbl7() {
    return this.dbl_7;
  }

  public ManyRequiredFields setDbl7(double dbl_7) {
    this.dbl_7 = dbl_7;
    setDbl7IsSet(true);
    return this;
  }

  public void unsetDbl7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_7_ISSET_ID);
  }

  /** Returns true if field dbl_7 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_7_ISSET_ID);
  }

  public void setDbl7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_7_ISSET_ID, value);
  }

  public double getDbl8() {
    return this.dbl_8;
  }

  public ManyRequiredFields setDbl8(double dbl_8) {
    this.dbl_8 = dbl_8;
    setDbl8IsSet(true);
    return this;
  }

  public void unsetDbl8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_8_ISSET_ID);
  }

  /** Returns true if field dbl_8 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_8_ISSET_ID);
  }

  public void setDbl8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_8_ISSET_ID, value);
  }

  public double getDbl9() {
    return this.dbl_9;
  }

  public ManyRequiredFields setDbl9(double dbl_9) {
    this.dbl_9 = dbl_9;
    setDbl9IsSet(true);
    return this;
  }

  public void unsetDbl9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_9_ISSET_ID);
  }

  /** Returns true if field dbl_9 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_9_ISSET_ID);
  }

  public void setDbl9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_9_ISSET_ID, value);
  }

  public double getDbl10() {
    return this.dbl_10;
  }

  public ManyRequiredFields setDbl10(double dbl_10) {
    this.dbl_10 = dbl_10;
    setDbl10IsSet(true);
    return this;
  }

  public void unsetDbl10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBL_10_ISSET_ID);
  }

  /** Returns true if field dbl_10 is set (has been assigned a value) and false otherwise */
  public boolean isSetDbl10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBL_10_ISSET_ID);
  }

  public void setDbl10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBL_10_ISSET_ID, value);
  }

  public net.morimekta.test.thrift.serialization.common.RequiredFields getRequiredFields() {
    return this.requiredFields;
  }

  public ManyRequiredFields setRequiredFields(net.morimekta.test.thrift.serialization.common.RequiredFields requiredFields) {
    this.requiredFields = requiredFields;
    return this;
  }

  public void unsetRequiredFields() {
    this.requiredFields = null;
  }

  /** Returns true if field requiredFields is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredFields() {
    return this.requiredFields != null;
  }

  public void setRequiredFieldsIsSet(boolean value) {
    if (!value) {
      this.requiredFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.DefaultFields getDefaultFields() {
    return this.defaultFields;
  }

  public ManyRequiredFields setDefaultFields(net.morimekta.test.thrift.serialization.common.DefaultFields defaultFields) {
    this.defaultFields = defaultFields;
    return this;
  }

  public void unsetDefaultFields() {
    this.defaultFields = null;
  }

  /** Returns true if field defaultFields is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultFields() {
    return this.defaultFields != null;
  }

  public void setDefaultFieldsIsSet(boolean value) {
    if (!value) {
      this.defaultFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.OptionalFields getOptionalFields() {
    return this.optionalFields;
  }

  public ManyRequiredFields setOptionalFields(net.morimekta.test.thrift.serialization.common.OptionalFields optionalFields) {
    this.optionalFields = optionalFields;
    return this;
  }

  public void unsetOptionalFields() {
    this.optionalFields = null;
  }

  /** Returns true if field optionalFields is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalFields() {
    return this.optionalFields != null;
  }

  public void setOptionalFieldsIsSet(boolean value) {
    if (!value) {
      this.optionalFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.UnionFields getUnionFields() {
    return this.unionFields;
  }

  public ManyRequiredFields setUnionFields(net.morimekta.test.thrift.serialization.common.UnionFields unionFields) {
    this.unionFields = unionFields;
    return this;
  }

  public void unsetUnionFields() {
    this.unionFields = null;
  }

  /** Returns true if field unionFields is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionFields() {
    return this.unionFields != null;
  }

  public void setUnionFieldsIsSet(boolean value) {
    if (!value) {
      this.unionFields = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.DefaultValues getDefaultValues() {
    return this.defaultValues;
  }

  public ManyRequiredFields setDefaultValues(net.morimekta.test.thrift.serialization.common.DefaultValues defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public void unsetDefaultValues() {
    this.defaultValues = null;
  }

  /** Returns true if field defaultValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValues() {
    return this.defaultValues != null;
  }

  public void setDefaultValuesIsSet(boolean value) {
    if (!value) {
      this.defaultValues = null;
    }
  }

  public net.morimekta.test.thrift.serialization.common.CompactFields getCompactFields() {
    return this.compactFields;
  }

  public ManyRequiredFields setCompactFields(net.morimekta.test.thrift.serialization.common.CompactFields compactFields) {
    this.compactFields = compactFields;
    return this;
  }

  public void unsetCompactFields() {
    this.compactFields = null;
  }

  /** Returns true if field compactFields is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactFields() {
    return this.compactFields != null;
  }

  public void setCompactFieldsIsSet(boolean value) {
    if (!value) {
      this.compactFields = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INTEGER_LIST:
      if (value == null) {
        unsetIntegerList();
      } else {
        setIntegerList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case STRING_LIST:
      if (value == null) {
        unsetStringList();
      } else {
        setStringList((java.util.List<java.lang.String>)value);
      }
      break;

    case INTEGER_SET:
      if (value == null) {
        unsetIntegerSet();
      } else {
        setIntegerSet((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case STRING_SET:
      if (value == null) {
        unsetStringSet();
      } else {
        setStringSet((java.util.Set<java.lang.String>)value);
      }
      break;

    case INTEGER_MAP:
      if (value == null) {
        unsetIntegerMap();
      } else {
        setIntegerMap((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case STRING_MAP:
      if (value == null) {
        unsetStringMap();
      } else {
        setStringMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((java.lang.String)value);
      }
      break;

    case SECOND:
      if (value == null) {
        unsetSecond();
      } else {
        setSecond((java.lang.String)value);
      }
      break;

    case THIRD:
      if (value == null) {
        unsetThird();
      } else {
        setThird((java.lang.String)value);
      }
      break;

    case FOURTH:
      if (value == null) {
        unsetFourth();
      } else {
        setFourth((java.lang.String)value);
      }
      break;

    case FIFTH:
      if (value == null) {
        unsetFifth();
      } else {
        setFifth((java.lang.String)value);
      }
      break;

    case SIXTH:
      if (value == null) {
        unsetSixth();
      } else {
        setSixth((java.lang.String)value);
      }
      break;

    case SEVENTH:
      if (value == null) {
        unsetSeventh();
      } else {
        setSeventh((java.lang.String)value);
      }
      break;

    case EIGHTH:
      if (value == null) {
        unsetEighth();
      } else {
        setEighth((java.lang.String)value);
      }
      break;

    case NINTH:
      if (value == null) {
        unsetNinth();
      } else {
        setNinth((java.lang.String)value);
      }
      break;

    case TENTH:
      if (value == null) {
        unsetTenth();
      } else {
        setTenth((java.lang.String)value);
      }
      break;

    case NO_1:
      if (value == null) {
        unsetNo1();
      } else {
        setNo1((java.lang.Integer)value);
      }
      break;

    case NO_2:
      if (value == null) {
        unsetNo2();
      } else {
        setNo2((java.lang.Integer)value);
      }
      break;

    case NO_3:
      if (value == null) {
        unsetNo3();
      } else {
        setNo3((java.lang.Integer)value);
      }
      break;

    case NO_4:
      if (value == null) {
        unsetNo4();
      } else {
        setNo4((java.lang.Integer)value);
      }
      break;

    case NO_5:
      if (value == null) {
        unsetNo5();
      } else {
        setNo5((java.lang.Integer)value);
      }
      break;

    case NO_6:
      if (value == null) {
        unsetNo6();
      } else {
        setNo6((java.lang.Integer)value);
      }
      break;

    case NO_7:
      if (value == null) {
        unsetNo7();
      } else {
        setNo7((java.lang.Integer)value);
      }
      break;

    case NO_8:
      if (value == null) {
        unsetNo8();
      } else {
        setNo8((java.lang.Integer)value);
      }
      break;

    case NO_9:
      if (value == null) {
        unsetNo9();
      } else {
        setNo9((java.lang.Integer)value);
      }
      break;

    case NO_10:
      if (value == null) {
        unsetNo10();
      } else {
        setNo10((java.lang.Integer)value);
      }
      break;

    case LONG_1:
      if (value == null) {
        unsetLong1();
      } else {
        setLong1((java.lang.Long)value);
      }
      break;

    case LONG_2:
      if (value == null) {
        unsetLong2();
      } else {
        setLong2((java.lang.Long)value);
      }
      break;

    case LONG_3:
      if (value == null) {
        unsetLong3();
      } else {
        setLong3((java.lang.Long)value);
      }
      break;

    case LONG_4:
      if (value == null) {
        unsetLong4();
      } else {
        setLong4((java.lang.Long)value);
      }
      break;

    case LONG_5:
      if (value == null) {
        unsetLong5();
      } else {
        setLong5((java.lang.Long)value);
      }
      break;

    case LONG_6:
      if (value == null) {
        unsetLong6();
      } else {
        setLong6((java.lang.Long)value);
      }
      break;

    case LONG_7:
      if (value == null) {
        unsetLong7();
      } else {
        setLong7((java.lang.Long)value);
      }
      break;

    case LONG_8:
      if (value == null) {
        unsetLong8();
      } else {
        setLong8((java.lang.Long)value);
      }
      break;

    case LONG_9:
      if (value == null) {
        unsetLong9();
      } else {
        setLong9((java.lang.Long)value);
      }
      break;

    case LONG_10:
      if (value == null) {
        unsetLong10();
      } else {
        setLong10((java.lang.Long)value);
      }
      break;

    case DBL_1:
      if (value == null) {
        unsetDbl1();
      } else {
        setDbl1((java.lang.Double)value);
      }
      break;

    case DBL_2:
      if (value == null) {
        unsetDbl2();
      } else {
        setDbl2((java.lang.Double)value);
      }
      break;

    case DBL_3:
      if (value == null) {
        unsetDbl3();
      } else {
        setDbl3((java.lang.Double)value);
      }
      break;

    case DBL_4:
      if (value == null) {
        unsetDbl4();
      } else {
        setDbl4((java.lang.Double)value);
      }
      break;

    case DBL_5:
      if (value == null) {
        unsetDbl5();
      } else {
        setDbl5((java.lang.Double)value);
      }
      break;

    case DBL_6:
      if (value == null) {
        unsetDbl6();
      } else {
        setDbl6((java.lang.Double)value);
      }
      break;

    case DBL_7:
      if (value == null) {
        unsetDbl7();
      } else {
        setDbl7((java.lang.Double)value);
      }
      break;

    case DBL_8:
      if (value == null) {
        unsetDbl8();
      } else {
        setDbl8((java.lang.Double)value);
      }
      break;

    case DBL_9:
      if (value == null) {
        unsetDbl9();
      } else {
        setDbl9((java.lang.Double)value);
      }
      break;

    case DBL_10:
      if (value == null) {
        unsetDbl10();
      } else {
        setDbl10((java.lang.Double)value);
      }
      break;

    case REQUIRED_FIELDS:
      if (value == null) {
        unsetRequiredFields();
      } else {
        setRequiredFields((net.morimekta.test.thrift.serialization.common.RequiredFields)value);
      }
      break;

    case DEFAULT_FIELDS:
      if (value == null) {
        unsetDefaultFields();
      } else {
        setDefaultFields((net.morimekta.test.thrift.serialization.common.DefaultFields)value);
      }
      break;

    case OPTIONAL_FIELDS:
      if (value == null) {
        unsetOptionalFields();
      } else {
        setOptionalFields((net.morimekta.test.thrift.serialization.common.OptionalFields)value);
      }
      break;

    case UNION_FIELDS:
      if (value == null) {
        unsetUnionFields();
      } else {
        setUnionFields((net.morimekta.test.thrift.serialization.common.UnionFields)value);
      }
      break;

    case DEFAULT_VALUES:
      if (value == null) {
        unsetDefaultValues();
      } else {
        setDefaultValues((net.morimekta.test.thrift.serialization.common.DefaultValues)value);
      }
      break;

    case COMPACT_FIELDS:
      if (value == null) {
        unsetCompactFields();
      } else {
        setCompactFields((net.morimekta.test.thrift.serialization.common.CompactFields)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTEGER_LIST:
      return getIntegerList();

    case STRING_LIST:
      return getStringList();

    case INTEGER_SET:
      return getIntegerSet();

    case STRING_SET:
      return getStringSet();

    case INTEGER_MAP:
      return getIntegerMap();

    case STRING_MAP:
      return getStringMap();

    case FIRST:
      return getFirst();

    case SECOND:
      return getSecond();

    case THIRD:
      return getThird();

    case FOURTH:
      return getFourth();

    case FIFTH:
      return getFifth();

    case SIXTH:
      return getSixth();

    case SEVENTH:
      return getSeventh();

    case EIGHTH:
      return getEighth();

    case NINTH:
      return getNinth();

    case TENTH:
      return getTenth();

    case NO_1:
      return getNo1();

    case NO_2:
      return getNo2();

    case NO_3:
      return getNo3();

    case NO_4:
      return getNo4();

    case NO_5:
      return getNo5();

    case NO_6:
      return getNo6();

    case NO_7:
      return getNo7();

    case NO_8:
      return getNo8();

    case NO_9:
      return getNo9();

    case NO_10:
      return getNo10();

    case LONG_1:
      return getLong1();

    case LONG_2:
      return getLong2();

    case LONG_3:
      return getLong3();

    case LONG_4:
      return getLong4();

    case LONG_5:
      return getLong5();

    case LONG_6:
      return getLong6();

    case LONG_7:
      return getLong7();

    case LONG_8:
      return getLong8();

    case LONG_9:
      return getLong9();

    case LONG_10:
      return getLong10();

    case DBL_1:
      return getDbl1();

    case DBL_2:
      return getDbl2();

    case DBL_3:
      return getDbl3();

    case DBL_4:
      return getDbl4();

    case DBL_5:
      return getDbl5();

    case DBL_6:
      return getDbl6();

    case DBL_7:
      return getDbl7();

    case DBL_8:
      return getDbl8();

    case DBL_9:
      return getDbl9();

    case DBL_10:
      return getDbl10();

    case REQUIRED_FIELDS:
      return getRequiredFields();

    case DEFAULT_FIELDS:
      return getDefaultFields();

    case OPTIONAL_FIELDS:
      return getOptionalFields();

    case UNION_FIELDS:
      return getUnionFields();

    case DEFAULT_VALUES:
      return getDefaultValues();

    case COMPACT_FIELDS:
      return getCompactFields();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTEGER_LIST:
      return isSetIntegerList();
    case STRING_LIST:
      return isSetStringList();
    case INTEGER_SET:
      return isSetIntegerSet();
    case STRING_SET:
      return isSetStringSet();
    case INTEGER_MAP:
      return isSetIntegerMap();
    case STRING_MAP:
      return isSetStringMap();
    case FIRST:
      return isSetFirst();
    case SECOND:
      return isSetSecond();
    case THIRD:
      return isSetThird();
    case FOURTH:
      return isSetFourth();
    case FIFTH:
      return isSetFifth();
    case SIXTH:
      return isSetSixth();
    case SEVENTH:
      return isSetSeventh();
    case EIGHTH:
      return isSetEighth();
    case NINTH:
      return isSetNinth();
    case TENTH:
      return isSetTenth();
    case NO_1:
      return isSetNo1();
    case NO_2:
      return isSetNo2();
    case NO_3:
      return isSetNo3();
    case NO_4:
      return isSetNo4();
    case NO_5:
      return isSetNo5();
    case NO_6:
      return isSetNo6();
    case NO_7:
      return isSetNo7();
    case NO_8:
      return isSetNo8();
    case NO_9:
      return isSetNo9();
    case NO_10:
      return isSetNo10();
    case LONG_1:
      return isSetLong1();
    case LONG_2:
      return isSetLong2();
    case LONG_3:
      return isSetLong3();
    case LONG_4:
      return isSetLong4();
    case LONG_5:
      return isSetLong5();
    case LONG_6:
      return isSetLong6();
    case LONG_7:
      return isSetLong7();
    case LONG_8:
      return isSetLong8();
    case LONG_9:
      return isSetLong9();
    case LONG_10:
      return isSetLong10();
    case DBL_1:
      return isSetDbl1();
    case DBL_2:
      return isSetDbl2();
    case DBL_3:
      return isSetDbl3();
    case DBL_4:
      return isSetDbl4();
    case DBL_5:
      return isSetDbl5();
    case DBL_6:
      return isSetDbl6();
    case DBL_7:
      return isSetDbl7();
    case DBL_8:
      return isSetDbl8();
    case DBL_9:
      return isSetDbl9();
    case DBL_10:
      return isSetDbl10();
    case REQUIRED_FIELDS:
      return isSetRequiredFields();
    case DEFAULT_FIELDS:
      return isSetDefaultFields();
    case OPTIONAL_FIELDS:
      return isSetOptionalFields();
    case UNION_FIELDS:
      return isSetUnionFields();
    case DEFAULT_VALUES:
      return isSetDefaultValues();
    case COMPACT_FIELDS:
      return isSetCompactFields();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ManyRequiredFields)
      return this.equals((ManyRequiredFields)that);
    return false;
  }

  public boolean equals(ManyRequiredFields that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_integerList = true && this.isSetIntegerList();
    boolean that_present_integerList = true && that.isSetIntegerList();
    if (this_present_integerList || that_present_integerList) {
      if (!(this_present_integerList && that_present_integerList))
        return false;
      if (!this.integerList.equals(that.integerList))
        return false;
    }

    boolean this_present_stringList = true && this.isSetStringList();
    boolean that_present_stringList = true && that.isSetStringList();
    if (this_present_stringList || that_present_stringList) {
      if (!(this_present_stringList && that_present_stringList))
        return false;
      if (!this.stringList.equals(that.stringList))
        return false;
    }

    boolean this_present_integerSet = true && this.isSetIntegerSet();
    boolean that_present_integerSet = true && that.isSetIntegerSet();
    if (this_present_integerSet || that_present_integerSet) {
      if (!(this_present_integerSet && that_present_integerSet))
        return false;
      if (!this.integerSet.equals(that.integerSet))
        return false;
    }

    boolean this_present_stringSet = true && this.isSetStringSet();
    boolean that_present_stringSet = true && that.isSetStringSet();
    if (this_present_stringSet || that_present_stringSet) {
      if (!(this_present_stringSet && that_present_stringSet))
        return false;
      if (!this.stringSet.equals(that.stringSet))
        return false;
    }

    boolean this_present_integerMap = true && this.isSetIntegerMap();
    boolean that_present_integerMap = true && that.isSetIntegerMap();
    if (this_present_integerMap || that_present_integerMap) {
      if (!(this_present_integerMap && that_present_integerMap))
        return false;
      if (!this.integerMap.equals(that.integerMap))
        return false;
    }

    boolean this_present_stringMap = true && this.isSetStringMap();
    boolean that_present_stringMap = true && that.isSetStringMap();
    if (this_present_stringMap || that_present_stringMap) {
      if (!(this_present_stringMap && that_present_stringMap))
        return false;
      if (!this.stringMap.equals(that.stringMap))
        return false;
    }

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_second = true && this.isSetSecond();
    boolean that_present_second = true && that.isSetSecond();
    if (this_present_second || that_present_second) {
      if (!(this_present_second && that_present_second))
        return false;
      if (!this.second.equals(that.second))
        return false;
    }

    boolean this_present_third = true && this.isSetThird();
    boolean that_present_third = true && that.isSetThird();
    if (this_present_third || that_present_third) {
      if (!(this_present_third && that_present_third))
        return false;
      if (!this.third.equals(that.third))
        return false;
    }

    boolean this_present_fourth = true && this.isSetFourth();
    boolean that_present_fourth = true && that.isSetFourth();
    if (this_present_fourth || that_present_fourth) {
      if (!(this_present_fourth && that_present_fourth))
        return false;
      if (!this.fourth.equals(that.fourth))
        return false;
    }

    boolean this_present_fifth = true && this.isSetFifth();
    boolean that_present_fifth = true && that.isSetFifth();
    if (this_present_fifth || that_present_fifth) {
      if (!(this_present_fifth && that_present_fifth))
        return false;
      if (!this.fifth.equals(that.fifth))
        return false;
    }

    boolean this_present_sixth = true && this.isSetSixth();
    boolean that_present_sixth = true && that.isSetSixth();
    if (this_present_sixth || that_present_sixth) {
      if (!(this_present_sixth && that_present_sixth))
        return false;
      if (!this.sixth.equals(that.sixth))
        return false;
    }

    boolean this_present_seventh = true && this.isSetSeventh();
    boolean that_present_seventh = true && that.isSetSeventh();
    if (this_present_seventh || that_present_seventh) {
      if (!(this_present_seventh && that_present_seventh))
        return false;
      if (!this.seventh.equals(that.seventh))
        return false;
    }

    boolean this_present_eighth = true && this.isSetEighth();
    boolean that_present_eighth = true && that.isSetEighth();
    if (this_present_eighth || that_present_eighth) {
      if (!(this_present_eighth && that_present_eighth))
        return false;
      if (!this.eighth.equals(that.eighth))
        return false;
    }

    boolean this_present_ninth = true && this.isSetNinth();
    boolean that_present_ninth = true && that.isSetNinth();
    if (this_present_ninth || that_present_ninth) {
      if (!(this_present_ninth && that_present_ninth))
        return false;
      if (!this.ninth.equals(that.ninth))
        return false;
    }

    boolean this_present_tenth = true && this.isSetTenth();
    boolean that_present_tenth = true && that.isSetTenth();
    if (this_present_tenth || that_present_tenth) {
      if (!(this_present_tenth && that_present_tenth))
        return false;
      if (!this.tenth.equals(that.tenth))
        return false;
    }

    boolean this_present_no_1 = true;
    boolean that_present_no_1 = true;
    if (this_present_no_1 || that_present_no_1) {
      if (!(this_present_no_1 && that_present_no_1))
        return false;
      if (this.no_1 != that.no_1)
        return false;
    }

    boolean this_present_no_2 = true;
    boolean that_present_no_2 = true;
    if (this_present_no_2 || that_present_no_2) {
      if (!(this_present_no_2 && that_present_no_2))
        return false;
      if (this.no_2 != that.no_2)
        return false;
    }

    boolean this_present_no_3 = true;
    boolean that_present_no_3 = true;
    if (this_present_no_3 || that_present_no_3) {
      if (!(this_present_no_3 && that_present_no_3))
        return false;
      if (this.no_3 != that.no_3)
        return false;
    }

    boolean this_present_no_4 = true;
    boolean that_present_no_4 = true;
    if (this_present_no_4 || that_present_no_4) {
      if (!(this_present_no_4 && that_present_no_4))
        return false;
      if (this.no_4 != that.no_4)
        return false;
    }

    boolean this_present_no_5 = true;
    boolean that_present_no_5 = true;
    if (this_present_no_5 || that_present_no_5) {
      if (!(this_present_no_5 && that_present_no_5))
        return false;
      if (this.no_5 != that.no_5)
        return false;
    }

    boolean this_present_no_6 = true;
    boolean that_present_no_6 = true;
    if (this_present_no_6 || that_present_no_6) {
      if (!(this_present_no_6 && that_present_no_6))
        return false;
      if (this.no_6 != that.no_6)
        return false;
    }

    boolean this_present_no_7 = true;
    boolean that_present_no_7 = true;
    if (this_present_no_7 || that_present_no_7) {
      if (!(this_present_no_7 && that_present_no_7))
        return false;
      if (this.no_7 != that.no_7)
        return false;
    }

    boolean this_present_no_8 = true;
    boolean that_present_no_8 = true;
    if (this_present_no_8 || that_present_no_8) {
      if (!(this_present_no_8 && that_present_no_8))
        return false;
      if (this.no_8 != that.no_8)
        return false;
    }

    boolean this_present_no_9 = true;
    boolean that_present_no_9 = true;
    if (this_present_no_9 || that_present_no_9) {
      if (!(this_present_no_9 && that_present_no_9))
        return false;
      if (this.no_9 != that.no_9)
        return false;
    }

    boolean this_present_no_10 = true;
    boolean that_present_no_10 = true;
    if (this_present_no_10 || that_present_no_10) {
      if (!(this_present_no_10 && that_present_no_10))
        return false;
      if (this.no_10 != that.no_10)
        return false;
    }

    boolean this_present_long_1 = true;
    boolean that_present_long_1 = true;
    if (this_present_long_1 || that_present_long_1) {
      if (!(this_present_long_1 && that_present_long_1))
        return false;
      if (this.long_1 != that.long_1)
        return false;
    }

    boolean this_present_long_2 = true;
    boolean that_present_long_2 = true;
    if (this_present_long_2 || that_present_long_2) {
      if (!(this_present_long_2 && that_present_long_2))
        return false;
      if (this.long_2 != that.long_2)
        return false;
    }

    boolean this_present_long_3 = true;
    boolean that_present_long_3 = true;
    if (this_present_long_3 || that_present_long_3) {
      if (!(this_present_long_3 && that_present_long_3))
        return false;
      if (this.long_3 != that.long_3)
        return false;
    }

    boolean this_present_long_4 = true;
    boolean that_present_long_4 = true;
    if (this_present_long_4 || that_present_long_4) {
      if (!(this_present_long_4 && that_present_long_4))
        return false;
      if (this.long_4 != that.long_4)
        return false;
    }

    boolean this_present_long_5 = true;
    boolean that_present_long_5 = true;
    if (this_present_long_5 || that_present_long_5) {
      if (!(this_present_long_5 && that_present_long_5))
        return false;
      if (this.long_5 != that.long_5)
        return false;
    }

    boolean this_present_long_6 = true;
    boolean that_present_long_6 = true;
    if (this_present_long_6 || that_present_long_6) {
      if (!(this_present_long_6 && that_present_long_6))
        return false;
      if (this.long_6 != that.long_6)
        return false;
    }

    boolean this_present_long_7 = true;
    boolean that_present_long_7 = true;
    if (this_present_long_7 || that_present_long_7) {
      if (!(this_present_long_7 && that_present_long_7))
        return false;
      if (this.long_7 != that.long_7)
        return false;
    }

    boolean this_present_long_8 = true;
    boolean that_present_long_8 = true;
    if (this_present_long_8 || that_present_long_8) {
      if (!(this_present_long_8 && that_present_long_8))
        return false;
      if (this.long_8 != that.long_8)
        return false;
    }

    boolean this_present_long_9 = true;
    boolean that_present_long_9 = true;
    if (this_present_long_9 || that_present_long_9) {
      if (!(this_present_long_9 && that_present_long_9))
        return false;
      if (this.long_9 != that.long_9)
        return false;
    }

    boolean this_present_long_10 = true;
    boolean that_present_long_10 = true;
    if (this_present_long_10 || that_present_long_10) {
      if (!(this_present_long_10 && that_present_long_10))
        return false;
      if (this.long_10 != that.long_10)
        return false;
    }

    boolean this_present_dbl_1 = true;
    boolean that_present_dbl_1 = true;
    if (this_present_dbl_1 || that_present_dbl_1) {
      if (!(this_present_dbl_1 && that_present_dbl_1))
        return false;
      if (this.dbl_1 != that.dbl_1)
        return false;
    }

    boolean this_present_dbl_2 = true;
    boolean that_present_dbl_2 = true;
    if (this_present_dbl_2 || that_present_dbl_2) {
      if (!(this_present_dbl_2 && that_present_dbl_2))
        return false;
      if (this.dbl_2 != that.dbl_2)
        return false;
    }

    boolean this_present_dbl_3 = true;
    boolean that_present_dbl_3 = true;
    if (this_present_dbl_3 || that_present_dbl_3) {
      if (!(this_present_dbl_3 && that_present_dbl_3))
        return false;
      if (this.dbl_3 != that.dbl_3)
        return false;
    }

    boolean this_present_dbl_4 = true;
    boolean that_present_dbl_4 = true;
    if (this_present_dbl_4 || that_present_dbl_4) {
      if (!(this_present_dbl_4 && that_present_dbl_4))
        return false;
      if (this.dbl_4 != that.dbl_4)
        return false;
    }

    boolean this_present_dbl_5 = true;
    boolean that_present_dbl_5 = true;
    if (this_present_dbl_5 || that_present_dbl_5) {
      if (!(this_present_dbl_5 && that_present_dbl_5))
        return false;
      if (this.dbl_5 != that.dbl_5)
        return false;
    }

    boolean this_present_dbl_6 = true;
    boolean that_present_dbl_6 = true;
    if (this_present_dbl_6 || that_present_dbl_6) {
      if (!(this_present_dbl_6 && that_present_dbl_6))
        return false;
      if (this.dbl_6 != that.dbl_6)
        return false;
    }

    boolean this_present_dbl_7 = true;
    boolean that_present_dbl_7 = true;
    if (this_present_dbl_7 || that_present_dbl_7) {
      if (!(this_present_dbl_7 && that_present_dbl_7))
        return false;
      if (this.dbl_7 != that.dbl_7)
        return false;
    }

    boolean this_present_dbl_8 = true;
    boolean that_present_dbl_8 = true;
    if (this_present_dbl_8 || that_present_dbl_8) {
      if (!(this_present_dbl_8 && that_present_dbl_8))
        return false;
      if (this.dbl_8 != that.dbl_8)
        return false;
    }

    boolean this_present_dbl_9 = true;
    boolean that_present_dbl_9 = true;
    if (this_present_dbl_9 || that_present_dbl_9) {
      if (!(this_present_dbl_9 && that_present_dbl_9))
        return false;
      if (this.dbl_9 != that.dbl_9)
        return false;
    }

    boolean this_present_dbl_10 = true;
    boolean that_present_dbl_10 = true;
    if (this_present_dbl_10 || that_present_dbl_10) {
      if (!(this_present_dbl_10 && that_present_dbl_10))
        return false;
      if (this.dbl_10 != that.dbl_10)
        return false;
    }

    boolean this_present_requiredFields = true && this.isSetRequiredFields();
    boolean that_present_requiredFields = true && that.isSetRequiredFields();
    if (this_present_requiredFields || that_present_requiredFields) {
      if (!(this_present_requiredFields && that_present_requiredFields))
        return false;
      if (!this.requiredFields.equals(that.requiredFields))
        return false;
    }

    boolean this_present_defaultFields = true && this.isSetDefaultFields();
    boolean that_present_defaultFields = true && that.isSetDefaultFields();
    if (this_present_defaultFields || that_present_defaultFields) {
      if (!(this_present_defaultFields && that_present_defaultFields))
        return false;
      if (!this.defaultFields.equals(that.defaultFields))
        return false;
    }

    boolean this_present_optionalFields = true && this.isSetOptionalFields();
    boolean that_present_optionalFields = true && that.isSetOptionalFields();
    if (this_present_optionalFields || that_present_optionalFields) {
      if (!(this_present_optionalFields && that_present_optionalFields))
        return false;
      if (!this.optionalFields.equals(that.optionalFields))
        return false;
    }

    boolean this_present_unionFields = true && this.isSetUnionFields();
    boolean that_present_unionFields = true && that.isSetUnionFields();
    if (this_present_unionFields || that_present_unionFields) {
      if (!(this_present_unionFields && that_present_unionFields))
        return false;
      if (!this.unionFields.equals(that.unionFields))
        return false;
    }

    boolean this_present_defaultValues = true && this.isSetDefaultValues();
    boolean that_present_defaultValues = true && that.isSetDefaultValues();
    if (this_present_defaultValues || that_present_defaultValues) {
      if (!(this_present_defaultValues && that_present_defaultValues))
        return false;
      if (!this.defaultValues.equals(that.defaultValues))
        return false;
    }

    boolean this_present_compactFields = true && this.isSetCompactFields();
    boolean that_present_compactFields = true && that.isSetCompactFields();
    if (this_present_compactFields || that_present_compactFields) {
      if (!(this_present_compactFields && that_present_compactFields))
        return false;
      if (!this.compactFields.equals(that.compactFields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIntegerList()) ? 131071 : 524287);
    if (isSetIntegerList())
      hashCode = hashCode * 8191 + integerList.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringList()) ? 131071 : 524287);
    if (isSetStringList())
      hashCode = hashCode * 8191 + stringList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegerSet()) ? 131071 : 524287);
    if (isSetIntegerSet())
      hashCode = hashCode * 8191 + integerSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringSet()) ? 131071 : 524287);
    if (isSetStringSet())
      hashCode = hashCode * 8191 + stringSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegerMap()) ? 131071 : 524287);
    if (isSetIntegerMap())
      hashCode = hashCode * 8191 + integerMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringMap()) ? 131071 : 524287);
    if (isSetStringMap())
      hashCode = hashCode * 8191 + stringMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirst()) ? 131071 : 524287);
    if (isSetFirst())
      hashCode = hashCode * 8191 + first.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecond()) ? 131071 : 524287);
    if (isSetSecond())
      hashCode = hashCode * 8191 + second.hashCode();

    hashCode = hashCode * 8191 + ((isSetThird()) ? 131071 : 524287);
    if (isSetThird())
      hashCode = hashCode * 8191 + third.hashCode();

    hashCode = hashCode * 8191 + ((isSetFourth()) ? 131071 : 524287);
    if (isSetFourth())
      hashCode = hashCode * 8191 + fourth.hashCode();

    hashCode = hashCode * 8191 + ((isSetFifth()) ? 131071 : 524287);
    if (isSetFifth())
      hashCode = hashCode * 8191 + fifth.hashCode();

    hashCode = hashCode * 8191 + ((isSetSixth()) ? 131071 : 524287);
    if (isSetSixth())
      hashCode = hashCode * 8191 + sixth.hashCode();

    hashCode = hashCode * 8191 + ((isSetSeventh()) ? 131071 : 524287);
    if (isSetSeventh())
      hashCode = hashCode * 8191 + seventh.hashCode();

    hashCode = hashCode * 8191 + ((isSetEighth()) ? 131071 : 524287);
    if (isSetEighth())
      hashCode = hashCode * 8191 + eighth.hashCode();

    hashCode = hashCode * 8191 + ((isSetNinth()) ? 131071 : 524287);
    if (isSetNinth())
      hashCode = hashCode * 8191 + ninth.hashCode();

    hashCode = hashCode * 8191 + ((isSetTenth()) ? 131071 : 524287);
    if (isSetTenth())
      hashCode = hashCode * 8191 + tenth.hashCode();

    hashCode = hashCode * 8191 + no_1;

    hashCode = hashCode * 8191 + no_2;

    hashCode = hashCode * 8191 + no_3;

    hashCode = hashCode * 8191 + no_4;

    hashCode = hashCode * 8191 + no_5;

    hashCode = hashCode * 8191 + no_6;

    hashCode = hashCode * 8191 + no_7;

    hashCode = hashCode * 8191 + no_8;

    hashCode = hashCode * 8191 + no_9;

    hashCode = hashCode * 8191 + no_10;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_2);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_4);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_6);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_7);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_8);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_9);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(long_10);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_2);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_4);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_6);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_7);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_8);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_9);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbl_10);

    hashCode = hashCode * 8191 + ((isSetRequiredFields()) ? 131071 : 524287);
    if (isSetRequiredFields())
      hashCode = hashCode * 8191 + requiredFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultFields()) ? 131071 : 524287);
    if (isSetDefaultFields())
      hashCode = hashCode * 8191 + defaultFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionalFields()) ? 131071 : 524287);
    if (isSetOptionalFields())
      hashCode = hashCode * 8191 + optionalFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnionFields()) ? 131071 : 524287);
    if (isSetUnionFields())
      hashCode = hashCode * 8191 + unionFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultValues()) ? 131071 : 524287);
    if (isSetDefaultValues())
      hashCode = hashCode * 8191 + defaultValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompactFields()) ? 131071 : 524287);
    if (isSetCompactFields())
      hashCode = hashCode * 8191 + compactFields.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ManyRequiredFields other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIntegerList()).compareTo(other.isSetIntegerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerList, other.integerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringList()).compareTo(other.isSetStringList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringList, other.stringList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegerSet()).compareTo(other.isSetIntegerSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerSet, other.integerSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringSet()).compareTo(other.isSetStringSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringSet, other.stringSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegerMap()).compareTo(other.isSetIntegerMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerMap, other.integerMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringMap()).compareTo(other.isSetStringMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringMap, other.stringMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second, other.second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThird()).compareTo(other.isSetThird());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThird()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.third, other.third);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFourth()).compareTo(other.isSetFourth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFourth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fourth, other.fourth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFifth()).compareTo(other.isSetFifth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFifth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fifth, other.fifth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSixth()).compareTo(other.isSetSixth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSixth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sixth, other.sixth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSeventh()).compareTo(other.isSetSeventh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeventh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seventh, other.seventh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEighth()).compareTo(other.isSetEighth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEighth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eighth, other.eighth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNinth()).compareTo(other.isSetNinth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNinth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ninth, other.ninth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTenth()).compareTo(other.isSetTenth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenth, other.tenth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo1()).compareTo(other.isSetNo1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_1, other.no_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo2()).compareTo(other.isSetNo2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_2, other.no_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo3()).compareTo(other.isSetNo3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_3, other.no_3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo4()).compareTo(other.isSetNo4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_4, other.no_4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo5()).compareTo(other.isSetNo5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_5, other.no_5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo6()).compareTo(other.isSetNo6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_6, other.no_6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo7()).compareTo(other.isSetNo7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_7, other.no_7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo8()).compareTo(other.isSetNo8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_8, other.no_8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo9()).compareTo(other.isSetNo9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_9, other.no_9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNo10()).compareTo(other.isSetNo10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_10, other.no_10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong1()).compareTo(other.isSetLong1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_1, other.long_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong2()).compareTo(other.isSetLong2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_2, other.long_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong3()).compareTo(other.isSetLong3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_3, other.long_3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong4()).compareTo(other.isSetLong4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_4, other.long_4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong5()).compareTo(other.isSetLong5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_5, other.long_5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong6()).compareTo(other.isSetLong6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_6, other.long_6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong7()).compareTo(other.isSetLong7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_7, other.long_7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong8()).compareTo(other.isSetLong8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_8, other.long_8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong9()).compareTo(other.isSetLong9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_9, other.long_9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLong10()).compareTo(other.isSetLong10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_10, other.long_10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl1()).compareTo(other.isSetDbl1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_1, other.dbl_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl2()).compareTo(other.isSetDbl2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_2, other.dbl_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl3()).compareTo(other.isSetDbl3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_3, other.dbl_3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl4()).compareTo(other.isSetDbl4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_4, other.dbl_4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl5()).compareTo(other.isSetDbl5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_5, other.dbl_5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl6()).compareTo(other.isSetDbl6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_6, other.dbl_6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl7()).compareTo(other.isSetDbl7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_7, other.dbl_7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl8()).compareTo(other.isSetDbl8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_8, other.dbl_8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl9()).compareTo(other.isSetDbl9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_9, other.dbl_9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbl10()).compareTo(other.isSetDbl10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbl10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl_10, other.dbl_10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequiredFields()).compareTo(other.isSetRequiredFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredFields, other.requiredFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultFields()).compareTo(other.isSetDefaultFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultFields, other.defaultFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptionalFields()).compareTo(other.isSetOptionalFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalFields, other.optionalFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionFields()).compareTo(other.isSetUnionFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionFields, other.unionFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultValues()).compareTo(other.isSetDefaultValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValues, other.defaultValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompactFields()).compareTo(other.isSetCompactFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compactFields, other.compactFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ManyRequiredFields(");
    boolean first = true;

    sb.append("integerList:");
    if (this.integerList == null) {
      sb.append("null");
    } else {
      sb.append(this.integerList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringList:");
    if (this.stringList == null) {
      sb.append("null");
    } else {
      sb.append(this.stringList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("integerSet:");
    if (this.integerSet == null) {
      sb.append("null");
    } else {
      sb.append(this.integerSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringSet:");
    if (this.stringSet == null) {
      sb.append("null");
    } else {
      sb.append(this.stringSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("integerMap:");
    if (this.integerMap == null) {
      sb.append("null");
    } else {
      sb.append(this.integerMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringMap:");
    if (this.stringMap == null) {
      sb.append("null");
    } else {
      sb.append(this.stringMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("first:");
    if (this.first == null) {
      sb.append("null");
    } else {
      sb.append(this.first);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("second:");
    if (this.second == null) {
      sb.append("null");
    } else {
      sb.append(this.second);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("third:");
    if (this.third == null) {
      sb.append("null");
    } else {
      sb.append(this.third);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fourth:");
    if (this.fourth == null) {
      sb.append("null");
    } else {
      sb.append(this.fourth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fifth:");
    if (this.fifth == null) {
      sb.append("null");
    } else {
      sb.append(this.fifth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sixth:");
    if (this.sixth == null) {
      sb.append("null");
    } else {
      sb.append(this.sixth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seventh:");
    if (this.seventh == null) {
      sb.append("null");
    } else {
      sb.append(this.seventh);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eighth:");
    if (this.eighth == null) {
      sb.append("null");
    } else {
      sb.append(this.eighth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ninth:");
    if (this.ninth == null) {
      sb.append("null");
    } else {
      sb.append(this.ninth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenth:");
    if (this.tenth == null) {
      sb.append("null");
    } else {
      sb.append(this.tenth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_1:");
    sb.append(this.no_1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_2:");
    sb.append(this.no_2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_3:");
    sb.append(this.no_3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_4:");
    sb.append(this.no_4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_5:");
    sb.append(this.no_5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_6:");
    sb.append(this.no_6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_7:");
    sb.append(this.no_7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_8:");
    sb.append(this.no_8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_9:");
    sb.append(this.no_9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_10:");
    sb.append(this.no_10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_1:");
    sb.append(this.long_1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_2:");
    sb.append(this.long_2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_3:");
    sb.append(this.long_3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_4:");
    sb.append(this.long_4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_5:");
    sb.append(this.long_5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_6:");
    sb.append(this.long_6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_7:");
    sb.append(this.long_7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_8:");
    sb.append(this.long_8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_9:");
    sb.append(this.long_9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_10:");
    sb.append(this.long_10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_1:");
    sb.append(this.dbl_1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_2:");
    sb.append(this.dbl_2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_3:");
    sb.append(this.dbl_3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_4:");
    sb.append(this.dbl_4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_5:");
    sb.append(this.dbl_5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_6:");
    sb.append(this.dbl_6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_7:");
    sb.append(this.dbl_7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_8:");
    sb.append(this.dbl_8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_9:");
    sb.append(this.dbl_9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbl_10:");
    sb.append(this.dbl_10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredFields:");
    if (this.requiredFields == null) {
      sb.append("null");
    } else {
      sb.append(this.requiredFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultFields:");
    if (this.defaultFields == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionalFields:");
    if (this.optionalFields == null) {
      sb.append("null");
    } else {
      sb.append(this.optionalFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionFields:");
    if (this.unionFields == null) {
      sb.append("null");
    } else {
      sb.append(this.unionFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultValues:");
    if (this.defaultValues == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compactFields:");
    if (this.compactFields == null) {
      sb.append("null");
    } else {
      sb.append(this.compactFields);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (integerList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'integerList' was not present! Struct: " + toString());
    }
    if (stringList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stringList' was not present! Struct: " + toString());
    }
    if (integerSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'integerSet' was not present! Struct: " + toString());
    }
    if (stringSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stringSet' was not present! Struct: " + toString());
    }
    if (integerMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'integerMap' was not present! Struct: " + toString());
    }
    if (stringMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stringMap' was not present! Struct: " + toString());
    }
    if (first == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'first' was not present! Struct: " + toString());
    }
    if (second == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'second' was not present! Struct: " + toString());
    }
    if (third == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'third' was not present! Struct: " + toString());
    }
    if (fourth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fourth' was not present! Struct: " + toString());
    }
    if (fifth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fifth' was not present! Struct: " + toString());
    }
    if (sixth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sixth' was not present! Struct: " + toString());
    }
    if (seventh == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seventh' was not present! Struct: " + toString());
    }
    if (eighth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eighth' was not present! Struct: " + toString());
    }
    if (ninth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ninth' was not present! Struct: " + toString());
    }
    if (tenth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tenth' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'no_1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_2' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_3' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_4' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_5' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_6' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_7' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_9' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'no_10' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_2' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_3' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_4' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_5' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_6' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_7' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_9' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_10' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_2' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_3' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_4' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_5' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_6' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_7' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_9' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dbl_10' because it's a primitive and you chose the non-beans generator.
    if (requiredFields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredFields' was not present! Struct: " + toString());
    }
    if (defaultFields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultFields' was not present! Struct: " + toString());
    }
    if (optionalFields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optionalFields' was not present! Struct: " + toString());
    }
    if (unionFields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unionFields' was not present! Struct: " + toString());
    }
    if (defaultValues == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultValues' was not present! Struct: " + toString());
    }
    if (compactFields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compactFields' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (requiredFields != null) {
      requiredFields.validate();
    }
    if (defaultFields != null) {
      defaultFields.validate();
    }
    if (optionalFields != null) {
      optionalFields.validate();
    }
    if (defaultValues != null) {
      defaultValues.validate();
    }
    if (compactFields != null) {
      compactFields.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManyRequiredFieldsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ManyRequiredFieldsStandardScheme getScheme() {
      return new ManyRequiredFieldsStandardScheme();
    }
  }

  private static class ManyRequiredFieldsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ManyRequiredFields> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ManyRequiredFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTEGER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.integerList = new java.util.ArrayList<java.lang.Integer>(_list52.size);
                int _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = iprot.readI32();
                  struct.integerList.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setIntegerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.stringList = new java.util.ArrayList<java.lang.String>(_list55.size);
                java.lang.String _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = iprot.readString();
                  struct.stringList.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setStringListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTEGER_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set58 = iprot.readSetBegin();
                struct.integerSet = new java.util.HashSet<java.lang.Integer>(2*_set58.size);
                int _elem59;
                for (int _i60 = 0; _i60 < _set58.size; ++_i60)
                {
                  _elem59 = iprot.readI32();
                  struct.integerSet.add(_elem59);
                }
                iprot.readSetEnd();
              }
              struct.setIntegerSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRING_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set61 = iprot.readSetBegin();
                struct.stringSet = new java.util.HashSet<java.lang.String>(2*_set61.size);
                java.lang.String _elem62;
                for (int _i63 = 0; _i63 < _set61.size; ++_i63)
                {
                  _elem62 = iprot.readString();
                  struct.stringSet.add(_elem62);
                }
                iprot.readSetEnd();
              }
              struct.setStringSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTEGER_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map64.size);
                int _key65;
                int _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readI32();
                  _val66 = iprot.readI32();
                  struct.integerMap.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setIntegerMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRING_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                struct.stringMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map68.size);
                java.lang.String _key69;
                java.lang.String _val70;
                for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                {
                  _key69 = iprot.readString();
                  _val70 = iprot.readString();
                  struct.stringMap.put(_key69, _val70);
                }
                iprot.readMapEnd();
              }
              struct.setStringMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first = iprot.readString();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.second = iprot.readString();
              struct.setSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // THIRD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.third = iprot.readString();
              struct.setThirdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FOURTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fourth = iprot.readString();
              struct.setFourthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FIFTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fifth = iprot.readString();
              struct.setFifthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SIXTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sixth = iprot.readString();
              struct.setSixthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SEVENTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seventh = iprot.readString();
              struct.setSeventhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EIGHTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eighth = iprot.readString();
              struct.setEighthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NINTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ninth = iprot.readString();
              struct.setNinthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TENTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenth = iprot.readString();
              struct.setTenthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NO_1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_1 = iprot.readI32();
              struct.setNo1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NO_2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_2 = iprot.readI32();
              struct.setNo2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NO_3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_3 = iprot.readI32();
              struct.setNo3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // NO_4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_4 = iprot.readI32();
              struct.setNo4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // NO_5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_5 = iprot.readI32();
              struct.setNo5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // NO_6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_6 = iprot.readI32();
              struct.setNo6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // NO_7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_7 = iprot.readI32();
              struct.setNo7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // NO_8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_8 = iprot.readI32();
              struct.setNo8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // NO_9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_9 = iprot.readI32();
              struct.setNo9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // NO_10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_10 = iprot.readI32();
              struct.setNo10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LONG_1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_1 = iprot.readI64();
              struct.setLong1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LONG_2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_2 = iprot.readI64();
              struct.setLong2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // LONG_3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_3 = iprot.readI64();
              struct.setLong3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LONG_4
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_4 = iprot.readI64();
              struct.setLong4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // LONG_5
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_5 = iprot.readI64();
              struct.setLong5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // LONG_6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_6 = iprot.readI64();
              struct.setLong6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // LONG_7
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_7 = iprot.readI64();
              struct.setLong7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // LONG_8
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_8 = iprot.readI64();
              struct.setLong8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // LONG_9
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_9 = iprot.readI64();
              struct.setLong9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // LONG_10
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_10 = iprot.readI64();
              struct.setLong10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DBL_1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_1 = iprot.readDouble();
              struct.setDbl1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // DBL_2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_2 = iprot.readDouble();
              struct.setDbl2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // DBL_3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_3 = iprot.readDouble();
              struct.setDbl3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // DBL_4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_4 = iprot.readDouble();
              struct.setDbl4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // DBL_5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_5 = iprot.readDouble();
              struct.setDbl5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // DBL_6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_6 = iprot.readDouble();
              struct.setDbl6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // DBL_7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_7 = iprot.readDouble();
              struct.setDbl7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // DBL_8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_8 = iprot.readDouble();
              struct.setDbl8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // DBL_9
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_9 = iprot.readDouble();
              struct.setDbl9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // DBL_10
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dbl_10 = iprot.readDouble();
              struct.setDbl10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // REQUIRED_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields();
              struct.requiredFields.read(iprot);
              struct.setRequiredFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // DEFAULT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields();
              struct.defaultFields.read(iprot);
              struct.setDefaultFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // OPTIONAL_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields();
              struct.optionalFields.read(iprot);
              struct.setOptionalFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // UNION_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields();
              struct.unionFields.read(iprot);
              struct.setUnionFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DEFAULT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues();
              struct.defaultValues.read(iprot);
              struct.setDefaultValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // COMPACT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compactFields = new net.morimekta.test.thrift.serialization.common.CompactFields();
              struct.compactFields.read(iprot);
              struct.setCompactFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNo1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_2' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo3()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_3' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo4()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_4' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo5()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_5' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo6()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_6' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo7()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_7' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo9()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_9' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNo10()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'no_10' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_2' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong3()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_3' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong4()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_4' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong5()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_5' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong6()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_6' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong7()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_7' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong9()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_9' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLong10()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_10' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_2' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl3()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_3' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl4()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_4' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl5()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_5' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl6()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_6' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl7()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_7' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl9()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_9' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDbl10()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbl_10' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ManyRequiredFields struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.integerList != null) {
        oprot.writeFieldBegin(INTEGER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.integerList.size()));
          for (int _iter72 : struct.integerList)
          {
            oprot.writeI32(_iter72);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringList != null) {
        oprot.writeFieldBegin(STRING_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringList.size()));
          for (java.lang.String _iter73 : struct.stringList)
          {
            oprot.writeString(_iter73);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.integerSet != null) {
        oprot.writeFieldBegin(INTEGER_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.integerSet.size()));
          for (int _iter74 : struct.integerSet)
          {
            oprot.writeI32(_iter74);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringSet != null) {
        oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.stringSet.size()));
          for (java.lang.String _iter75 : struct.stringSet)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.integerMap != null) {
        oprot.writeFieldBegin(INTEGER_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.integerMap.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter76 : struct.integerMap.entrySet())
          {
            oprot.writeI32(_iter76.getKey());
            oprot.writeI32(_iter76.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringMap != null) {
        oprot.writeFieldBegin(STRING_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stringMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter77 : struct.stringMap.entrySet())
          {
            oprot.writeString(_iter77.getKey());
            oprot.writeString(_iter77.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.first != null) {
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeString(struct.first);
        oprot.writeFieldEnd();
      }
      if (struct.second != null) {
        oprot.writeFieldBegin(SECOND_FIELD_DESC);
        oprot.writeString(struct.second);
        oprot.writeFieldEnd();
      }
      if (struct.third != null) {
        oprot.writeFieldBegin(THIRD_FIELD_DESC);
        oprot.writeString(struct.third);
        oprot.writeFieldEnd();
      }
      if (struct.fourth != null) {
        oprot.writeFieldBegin(FOURTH_FIELD_DESC);
        oprot.writeString(struct.fourth);
        oprot.writeFieldEnd();
      }
      if (struct.fifth != null) {
        oprot.writeFieldBegin(FIFTH_FIELD_DESC);
        oprot.writeString(struct.fifth);
        oprot.writeFieldEnd();
      }
      if (struct.sixth != null) {
        oprot.writeFieldBegin(SIXTH_FIELD_DESC);
        oprot.writeString(struct.sixth);
        oprot.writeFieldEnd();
      }
      if (struct.seventh != null) {
        oprot.writeFieldBegin(SEVENTH_FIELD_DESC);
        oprot.writeString(struct.seventh);
        oprot.writeFieldEnd();
      }
      if (struct.eighth != null) {
        oprot.writeFieldBegin(EIGHTH_FIELD_DESC);
        oprot.writeString(struct.eighth);
        oprot.writeFieldEnd();
      }
      if (struct.ninth != null) {
        oprot.writeFieldBegin(NINTH_FIELD_DESC);
        oprot.writeString(struct.ninth);
        oprot.writeFieldEnd();
      }
      if (struct.tenth != null) {
        oprot.writeFieldBegin(TENTH_FIELD_DESC);
        oprot.writeString(struct.tenth);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NO_1_FIELD_DESC);
      oprot.writeI32(struct.no_1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_2_FIELD_DESC);
      oprot.writeI32(struct.no_2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_3_FIELD_DESC);
      oprot.writeI32(struct.no_3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_4_FIELD_DESC);
      oprot.writeI32(struct.no_4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_5_FIELD_DESC);
      oprot.writeI32(struct.no_5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_6_FIELD_DESC);
      oprot.writeI32(struct.no_6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_7_FIELD_DESC);
      oprot.writeI32(struct.no_7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_8_FIELD_DESC);
      oprot.writeI32(struct.no_8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_9_FIELD_DESC);
      oprot.writeI32(struct.no_9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_10_FIELD_DESC);
      oprot.writeI32(struct.no_10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_1_FIELD_DESC);
      oprot.writeI64(struct.long_1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_2_FIELD_DESC);
      oprot.writeI64(struct.long_2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_3_FIELD_DESC);
      oprot.writeI64(struct.long_3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_4_FIELD_DESC);
      oprot.writeI64(struct.long_4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_5_FIELD_DESC);
      oprot.writeI64(struct.long_5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_6_FIELD_DESC);
      oprot.writeI64(struct.long_6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_7_FIELD_DESC);
      oprot.writeI64(struct.long_7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_8_FIELD_DESC);
      oprot.writeI64(struct.long_8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_9_FIELD_DESC);
      oprot.writeI64(struct.long_9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_10_FIELD_DESC);
      oprot.writeI64(struct.long_10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_1_FIELD_DESC);
      oprot.writeDouble(struct.dbl_1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_2_FIELD_DESC);
      oprot.writeDouble(struct.dbl_2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_3_FIELD_DESC);
      oprot.writeDouble(struct.dbl_3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_4_FIELD_DESC);
      oprot.writeDouble(struct.dbl_4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_5_FIELD_DESC);
      oprot.writeDouble(struct.dbl_5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_6_FIELD_DESC);
      oprot.writeDouble(struct.dbl_6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_7_FIELD_DESC);
      oprot.writeDouble(struct.dbl_7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_8_FIELD_DESC);
      oprot.writeDouble(struct.dbl_8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_9_FIELD_DESC);
      oprot.writeDouble(struct.dbl_9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBL_10_FIELD_DESC);
      oprot.writeDouble(struct.dbl_10);
      oprot.writeFieldEnd();
      if (struct.requiredFields != null) {
        oprot.writeFieldBegin(REQUIRED_FIELDS_FIELD_DESC);
        struct.requiredFields.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.defaultFields != null) {
        oprot.writeFieldBegin(DEFAULT_FIELDS_FIELD_DESC);
        struct.defaultFields.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.optionalFields != null) {
        oprot.writeFieldBegin(OPTIONAL_FIELDS_FIELD_DESC);
        struct.optionalFields.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.unionFields != null) {
        oprot.writeFieldBegin(UNION_FIELDS_FIELD_DESC);
        struct.unionFields.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.defaultValues != null) {
        oprot.writeFieldBegin(DEFAULT_VALUES_FIELD_DESC);
        struct.defaultValues.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.compactFields != null) {
        oprot.writeFieldBegin(COMPACT_FIELDS_FIELD_DESC);
        struct.compactFields.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManyRequiredFieldsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ManyRequiredFieldsTupleScheme getScheme() {
      return new ManyRequiredFieldsTupleScheme();
    }
  }

  private static class ManyRequiredFieldsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ManyRequiredFields> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ManyRequiredFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.integerList.size());
        for (int _iter78 : struct.integerList)
        {
          oprot.writeI32(_iter78);
        }
      }
      {
        oprot.writeI32(struct.stringList.size());
        for (java.lang.String _iter79 : struct.stringList)
        {
          oprot.writeString(_iter79);
        }
      }
      {
        oprot.writeI32(struct.integerSet.size());
        for (int _iter80 : struct.integerSet)
        {
          oprot.writeI32(_iter80);
        }
      }
      {
        oprot.writeI32(struct.stringSet.size());
        for (java.lang.String _iter81 : struct.stringSet)
        {
          oprot.writeString(_iter81);
        }
      }
      {
        oprot.writeI32(struct.integerMap.size());
        for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter82 : struct.integerMap.entrySet())
        {
          oprot.writeI32(_iter82.getKey());
          oprot.writeI32(_iter82.getValue());
        }
      }
      {
        oprot.writeI32(struct.stringMap.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter83 : struct.stringMap.entrySet())
        {
          oprot.writeString(_iter83.getKey());
          oprot.writeString(_iter83.getValue());
        }
      }
      oprot.writeString(struct.first);
      oprot.writeString(struct.second);
      oprot.writeString(struct.third);
      oprot.writeString(struct.fourth);
      oprot.writeString(struct.fifth);
      oprot.writeString(struct.sixth);
      oprot.writeString(struct.seventh);
      oprot.writeString(struct.eighth);
      oprot.writeString(struct.ninth);
      oprot.writeString(struct.tenth);
      oprot.writeI32(struct.no_1);
      oprot.writeI32(struct.no_2);
      oprot.writeI32(struct.no_3);
      oprot.writeI32(struct.no_4);
      oprot.writeI32(struct.no_5);
      oprot.writeI32(struct.no_6);
      oprot.writeI32(struct.no_7);
      oprot.writeI32(struct.no_8);
      oprot.writeI32(struct.no_9);
      oprot.writeI32(struct.no_10);
      oprot.writeI64(struct.long_1);
      oprot.writeI64(struct.long_2);
      oprot.writeI64(struct.long_3);
      oprot.writeI64(struct.long_4);
      oprot.writeI64(struct.long_5);
      oprot.writeI64(struct.long_6);
      oprot.writeI64(struct.long_7);
      oprot.writeI64(struct.long_8);
      oprot.writeI64(struct.long_9);
      oprot.writeI64(struct.long_10);
      oprot.writeDouble(struct.dbl_1);
      oprot.writeDouble(struct.dbl_2);
      oprot.writeDouble(struct.dbl_3);
      oprot.writeDouble(struct.dbl_4);
      oprot.writeDouble(struct.dbl_5);
      oprot.writeDouble(struct.dbl_6);
      oprot.writeDouble(struct.dbl_7);
      oprot.writeDouble(struct.dbl_8);
      oprot.writeDouble(struct.dbl_9);
      oprot.writeDouble(struct.dbl_10);
      struct.requiredFields.write(oprot);
      struct.defaultFields.write(oprot);
      struct.optionalFields.write(oprot);
      struct.unionFields.write(oprot);
      struct.defaultValues.write(oprot);
      struct.compactFields.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ManyRequiredFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.integerList = new java.util.ArrayList<java.lang.Integer>(_list84.size);
        int _elem85;
        for (int _i86 = 0; _i86 < _list84.size; ++_i86)
        {
          _elem85 = iprot.readI32();
          struct.integerList.add(_elem85);
        }
      }
      struct.setIntegerListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.stringList = new java.util.ArrayList<java.lang.String>(_list87.size);
        java.lang.String _elem88;
        for (int _i89 = 0; _i89 < _list87.size; ++_i89)
        {
          _elem88 = iprot.readString();
          struct.stringList.add(_elem88);
        }
      }
      struct.setStringListIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set90 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.integerSet = new java.util.HashSet<java.lang.Integer>(2*_set90.size);
        int _elem91;
        for (int _i92 = 0; _i92 < _set90.size; ++_i92)
        {
          _elem91 = iprot.readI32();
          struct.integerSet.add(_elem91);
        }
      }
      struct.setIntegerSetIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set93 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.stringSet = new java.util.HashSet<java.lang.String>(2*_set93.size);
        java.lang.String _elem94;
        for (int _i95 = 0; _i95 < _set93.size; ++_i95)
        {
          _elem94 = iprot.readString();
          struct.stringSet.add(_elem94);
        }
      }
      struct.setStringSetIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.integerMap = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map96.size);
        int _key97;
        int _val98;
        for (int _i99 = 0; _i99 < _map96.size; ++_i99)
        {
          _key97 = iprot.readI32();
          _val98 = iprot.readI32();
          struct.integerMap.put(_key97, _val98);
        }
      }
      struct.setIntegerMapIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.stringMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map100.size);
        java.lang.String _key101;
        java.lang.String _val102;
        for (int _i103 = 0; _i103 < _map100.size; ++_i103)
        {
          _key101 = iprot.readString();
          _val102 = iprot.readString();
          struct.stringMap.put(_key101, _val102);
        }
      }
      struct.setStringMapIsSet(true);
      struct.first = iprot.readString();
      struct.setFirstIsSet(true);
      struct.second = iprot.readString();
      struct.setSecondIsSet(true);
      struct.third = iprot.readString();
      struct.setThirdIsSet(true);
      struct.fourth = iprot.readString();
      struct.setFourthIsSet(true);
      struct.fifth = iprot.readString();
      struct.setFifthIsSet(true);
      struct.sixth = iprot.readString();
      struct.setSixthIsSet(true);
      struct.seventh = iprot.readString();
      struct.setSeventhIsSet(true);
      struct.eighth = iprot.readString();
      struct.setEighthIsSet(true);
      struct.ninth = iprot.readString();
      struct.setNinthIsSet(true);
      struct.tenth = iprot.readString();
      struct.setTenthIsSet(true);
      struct.no_1 = iprot.readI32();
      struct.setNo1IsSet(true);
      struct.no_2 = iprot.readI32();
      struct.setNo2IsSet(true);
      struct.no_3 = iprot.readI32();
      struct.setNo3IsSet(true);
      struct.no_4 = iprot.readI32();
      struct.setNo4IsSet(true);
      struct.no_5 = iprot.readI32();
      struct.setNo5IsSet(true);
      struct.no_6 = iprot.readI32();
      struct.setNo6IsSet(true);
      struct.no_7 = iprot.readI32();
      struct.setNo7IsSet(true);
      struct.no_8 = iprot.readI32();
      struct.setNo8IsSet(true);
      struct.no_9 = iprot.readI32();
      struct.setNo9IsSet(true);
      struct.no_10 = iprot.readI32();
      struct.setNo10IsSet(true);
      struct.long_1 = iprot.readI64();
      struct.setLong1IsSet(true);
      struct.long_2 = iprot.readI64();
      struct.setLong2IsSet(true);
      struct.long_3 = iprot.readI64();
      struct.setLong3IsSet(true);
      struct.long_4 = iprot.readI64();
      struct.setLong4IsSet(true);
      struct.long_5 = iprot.readI64();
      struct.setLong5IsSet(true);
      struct.long_6 = iprot.readI64();
      struct.setLong6IsSet(true);
      struct.long_7 = iprot.readI64();
      struct.setLong7IsSet(true);
      struct.long_8 = iprot.readI64();
      struct.setLong8IsSet(true);
      struct.long_9 = iprot.readI64();
      struct.setLong9IsSet(true);
      struct.long_10 = iprot.readI64();
      struct.setLong10IsSet(true);
      struct.dbl_1 = iprot.readDouble();
      struct.setDbl1IsSet(true);
      struct.dbl_2 = iprot.readDouble();
      struct.setDbl2IsSet(true);
      struct.dbl_3 = iprot.readDouble();
      struct.setDbl3IsSet(true);
      struct.dbl_4 = iprot.readDouble();
      struct.setDbl4IsSet(true);
      struct.dbl_5 = iprot.readDouble();
      struct.setDbl5IsSet(true);
      struct.dbl_6 = iprot.readDouble();
      struct.setDbl6IsSet(true);
      struct.dbl_7 = iprot.readDouble();
      struct.setDbl7IsSet(true);
      struct.dbl_8 = iprot.readDouble();
      struct.setDbl8IsSet(true);
      struct.dbl_9 = iprot.readDouble();
      struct.setDbl9IsSet(true);
      struct.dbl_10 = iprot.readDouble();
      struct.setDbl10IsSet(true);
      struct.requiredFields = new net.morimekta.test.thrift.serialization.common.RequiredFields();
      struct.requiredFields.read(iprot);
      struct.setRequiredFieldsIsSet(true);
      struct.defaultFields = new net.morimekta.test.thrift.serialization.common.DefaultFields();
      struct.defaultFields.read(iprot);
      struct.setDefaultFieldsIsSet(true);
      struct.optionalFields = new net.morimekta.test.thrift.serialization.common.OptionalFields();
      struct.optionalFields.read(iprot);
      struct.setOptionalFieldsIsSet(true);
      struct.unionFields = new net.morimekta.test.thrift.serialization.common.UnionFields();
      struct.unionFields.read(iprot);
      struct.setUnionFieldsIsSet(true);
      struct.defaultValues = new net.morimekta.test.thrift.serialization.common.DefaultValues();
      struct.defaultValues.read(iprot);
      struct.setDefaultValuesIsSet(true);
      struct.compactFields = new net.morimekta.test.thrift.serialization.common.CompactFields();
      struct.compactFields.read(iprot);
      struct.setCompactFieldsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

